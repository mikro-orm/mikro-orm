// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`polymorphic embeddables in sqlite diffing 1`] = `
"function(entity, data, factory, newEntity, convertCustomTypes, schema) {
  if (typeof data.id !== 'undefined') entity.id = data.id;
  if (typeof data.name !== 'undefined') entity.name = data.name;
  if (data.pet_canBark !== undefined || data.pet_type !== undefined || data.pet_name !== undefined || data.pet_canMeow !== undefined) {
    if (data.pet_type == '1' && entity.pet == null) {
      entity.pet = factory.createEmbeddable('Dog', data, { newEntity, convertCustomTypes });
    }
    if (data.pet_type == '0' && entity.pet == null) {
      entity.pet = factory.createEmbeddable('Cat', data, { newEntity, convertCustomTypes });
    }
    if (typeof data.pet_canBark !== 'undefined') entity.pet.canBark = data.pet_canBark === null ? null : !!data.pet_canBark;
    if (typeof data.pet_type !== 'undefined') entity.pet.type = data.pet_type;
    if (typeof data.pet_name !== 'undefined') entity.pet.name = data.pet_name;
    if (typeof data.pet_canMeow !== 'undefined') entity.pet.canMeow = data.pet_canMeow === null ? null : !!data.pet_canMeow;
  } else if (data.pet === null) {
    entity.pet = null;
  }
  if (typeof data.pet === 'string') {
    data.pet = parseJsonSafe(data.pet);
  }
  if (data.pet != null) {
    if (data.pet.type == '1' && entity.pet == null) {
      entity.pet = factory.createEmbeddable('Dog', data.pet, { newEntity, convertCustomTypes });
    }
    if (data.pet.type == '0' && entity.pet == null) {
      entity.pet = factory.createEmbeddable('Cat', data.pet, { newEntity, convertCustomTypes });
    }
    if (data.pet && typeof data.pet.canBark !== 'undefined') entity.pet.canBark = data.pet.canBark === null ? null : !!data.pet.canBark;
    if (data.pet && typeof data.pet.type !== 'undefined') entity.pet.type = data.pet.type;
    if (data.pet && typeof data.pet.name !== 'undefined') entity.pet.name = data.pet.name;
    if (data.pet && typeof data.pet.canMeow !== 'undefined') entity.pet.canMeow = data.pet.canMeow === null ? null : !!data.pet.canMeow;
  } else if (data.pet === null) {
    entity.pet = null;
  }
  if (typeof data.pet2 === 'string') {
    data.pet2 = parseJsonSafe(data.pet2);
  }
  if (data.pet2 != null) {
    if (data.pet2.type == '1' && entity.pet2 == null) {
      entity.pet2 = factory.createEmbeddable('Dog', data.pet2, { newEntity, convertCustomTypes });
    }
    if (data.pet2.type == '0' && entity.pet2 == null) {
      entity.pet2 = factory.createEmbeddable('Cat', data.pet2, { newEntity, convertCustomTypes });
    }
    if (data.pet2 && typeof data.pet2.canBark !== 'undefined') entity.pet2.canBark = data.pet2.canBark === null ? null : !!data.pet2.canBark;
    if (data.pet2 && typeof data.pet2.type !== 'undefined') entity.pet2.type = data.pet2.type;
    if (data.pet2 && typeof data.pet2.name !== 'undefined') entity.pet2.name = data.pet2.name;
    if (data.pet2 && typeof data.pet2.canMeow !== 'undefined') entity.pet2.canMeow = data.pet2.canMeow === null ? null : !!data.pet2.canMeow;
  } else if (data.pet2 === null) {
    entity.pet2 = null;
  }
  if (typeof data.pets === 'string') {
    data.pets = parseJsonSafe(data.pets);
  }
  if (Array.isArray(data.pets)) {
    entity.pets = [];
    data.pets.forEach((_, idx_0) => {
      if (typeof data.pets[idx_0] === 'string') {
        data.pets[idx_0] = parseJsonSafe(data.pets[idx_0]);
      }
      if (data.pets[idx_0] != null) {
        if (data.pets[idx_0].type == '1' && entity.pets[idx_0] == null) {
          entity.pets[idx_0] = factory.createEmbeddable('Dog', data.pets[idx_0], { newEntity, convertCustomTypes });
        }
        if (data.pets[idx_0].type == '0' && entity.pets[idx_0] == null) {
          entity.pets[idx_0] = factory.createEmbeddable('Cat', data.pets[idx_0], { newEntity, convertCustomTypes });
        }
        if (data.pets && data.pets[idx_0] && typeof data.pets[idx_0].canBark !== 'undefined') entity.pets[idx_0].canBark = data.pets[idx_0].canBark === null ? null : !!data.pets[idx_0].canBark;
        if (data.pets && data.pets[idx_0] && typeof data.pets[idx_0].type !== 'undefined') entity.pets[idx_0].type = data.pets[idx_0].type;
        if (data.pets && data.pets[idx_0] && typeof data.pets[idx_0].name !== 'undefined') entity.pets[idx_0].name = data.pets[idx_0].name;
        if (data.pets && data.pets[idx_0] && typeof data.pets[idx_0].canMeow !== 'undefined') entity.pets[idx_0].canMeow = data.pets[idx_0].canMeow === null ? null : !!data.pets[idx_0].canMeow;
      } else if (data.pets[idx_0] === null) {
        entity.pets[idx_0] = null;
      }
    });
  }
}"
`;

exports[`polymorphic embeddables in sqlite diffing 2`] = `
"function(entity) {
  const ret = {};
  if (typeof entity.id !== 'undefined') {
    ret.id = entity.id;
  }

  if (typeof entity.name !== 'undefined') {
    ret.name = entity.name;
  }

  if (entity.pet != null) {
    if (typeof entity.pet.canBark !== 'undefined') ret.pet_canBark = clone(entity.pet.canBark);
    if (typeof entity.pet.type !== 'undefined') ret.pet_type = clone(entity.pet.type);
    if (typeof entity.pet.name !== 'undefined') ret.pet_name = clone(entity.pet.name);
    if (typeof entity.pet.canMeow !== 'undefined') ret.pet_canMeow = clone(entity.pet.canMeow);
  }

  if (entity.pet2 === null) ret.pet2 = null;
  if (entity.pet2 != null) {
    ret.pet2 = {};
    if (typeof entity.pet2.canBark !== 'undefined') ret.pet2.canBark = clone(entity.pet2.canBark);
    if (typeof entity.pet2.type !== 'undefined') ret.pet2.type = clone(entity.pet2.type);
    if (typeof entity.pet2.name !== 'undefined') ret.pet2.name = clone(entity.pet2.name);
    if (typeof entity.pet2.canMeow !== 'undefined') ret.pet2.canMeow = clone(entity.pet2.canMeow);
    ret.pet2 = cloneEmbeddable(ret.pet2);
  }

  if (Array.isArray(entity.pets)) {
    ret.pets = [];
    entity.pets.forEach((_, idx_0) => {

      if (entity.pets[idx_0] === null) ret.pets[idx_0] = null;
      if (entity.pets[idx_0] != null) {
        ret.pets[idx_0] = {};
        if (typeof entity.pets[idx_0].canBark !== 'undefined') ret.pets[idx_0].canBark = clone(entity.pets[idx_0].canBark);
        if (typeof entity.pets[idx_0].type !== 'undefined') ret.pets[idx_0].type = clone(entity.pets[idx_0].type);
        if (typeof entity.pets[idx_0].name !== 'undefined') ret.pets[idx_0].name = clone(entity.pets[idx_0].name);
        if (typeof entity.pets[idx_0].canMeow !== 'undefined') ret.pets[idx_0].canMeow = clone(entity.pets[idx_0].canMeow);
      }
    });
    ret.pets = cloneEmbeddable(ret.pets);
  }

  return ret;
}"
`;

exports[`polymorphic embeddables in sqlite schema 1`] = `
"create table \`owner\` (\`id\` integer not null primary key autoincrement, \`name\` text not null, \`pet_can_bark\` integer null, \`pet_type\` integer not null, \`pet_name\` text not null, \`pet_can_meow\` integer null, \`pet2\` json not null, \`pets\` json not null);
create index \`owner_pet_type_index\` on \`owner\` (\`pet_type\`);

"
`;

exports[`polymorphic embeddables in sqlite schema 2`] = `""`;

exports[`polymorphic embeddables in sqlite schema 3`] = `
"drop table if exists \`owner\`;

"
`;
