// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`embedded entities in postgres diffing 1`] = `
"function(entity) {
  const ret = {};
  if (typeof entity.id !== 'undefined' && entity.id != null) {
    ret.id = entity.id;
  }

  if (typeof entity.name !== 'undefined') {
    ret.name = entity.name;
  }

  if (entity.profile1 != null) {
    ret.profile1_username = clone(entity.profile1.username);

    if (entity.profile1.identity != null) {
      ret.profile1_identity_email = clone(entity.profile1.identity.email);

      if (entity.profile1.identity.meta != null) {
        ret.profile1_identity_meta_foo = clone(entity.profile1.identity.meta.foo);
        ret.profile1_identity_meta_bar = clone(entity.profile1.identity.meta.bar);
      }

      if (Array.isArray(entity.profile1.identity.links)) {
        ret.profile1_identity_links = [];
        entity.profile1.identity.links.forEach((_, idx_0) => {

          if (entity.profile1.identity.links[idx_0] != null) {
            ret.profile1_identity_links[idx_0] = {};
            ret.profile1_identity_links[idx_0].url = clone(entity.profile1.identity.links[idx_0].url);
            ret.profile1_identity_links[idx_0].createdAt = clone(entity.profile1.identity.links[idx_0].createdAt);

            if (entity.profile1.identity.links[idx_0].meta != null) {
              ret.profile1_identity_links[idx_0].meta = {};
              ret.profile1_identity_links[idx_0].meta.foo = clone(entity.profile1.identity.links[idx_0].meta.foo);
              ret.profile1_identity_links[idx_0].meta.bar = clone(entity.profile1.identity.links[idx_0].meta.bar);
            }

            if (Array.isArray(entity.profile1.identity.links[idx_0].metas)) {
              ret.profile1_identity_links[idx_0].metas = [];
              entity.profile1.identity.links[idx_0].metas.forEach((_, idx_1) => {

                if (entity.profile1.identity.links[idx_0].metas[idx_1] != null) {
                  ret.profile1_identity_links[idx_0].metas[idx_1] = {};
                  ret.profile1_identity_links[idx_0].metas[idx_1].foo = clone(entity.profile1.identity.links[idx_0].metas[idx_1].foo);
                  ret.profile1_identity_links[idx_0].metas[idx_1].bar = clone(entity.profile1.identity.links[idx_0].metas[idx_1].bar);
                }
              });
            }

          }
        });
        ret.profile1_identity_links = cloneEmbeddable(ret.profile1_identity_links);
      }

    }

  }

  if (entity.profile2 != null) {
    ret.profile2 = {};
    ret.profile2.username = clone(entity.profile2.username);

    if (entity.profile2.identity != null) {
      ret.profile2.identity = {};
      ret.profile2.identity.email = clone(entity.profile2.identity.email);

      if (entity.profile2.identity.meta != null) {
        ret.profile2.identity.meta = {};
        ret.profile2.identity.meta.foo = clone(entity.profile2.identity.meta.foo);
        ret.profile2.identity.meta.bar = clone(entity.profile2.identity.meta.bar);
      }

      if (Array.isArray(entity.profile2.identity.links)) {
        ret.profile2.identity.links = [];
        entity.profile2.identity.links.forEach((_, idx_2) => {

          if (entity.profile2.identity.links[idx_2] != null) {
            ret.profile2.identity.links[idx_2] = {};
            ret.profile2.identity.links[idx_2].url = clone(entity.profile2.identity.links[idx_2].url);
            ret.profile2.identity.links[idx_2].createdAt = clone(entity.profile2.identity.links[idx_2].createdAt);

            if (entity.profile2.identity.links[idx_2].meta != null) {
              ret.profile2.identity.links[idx_2].meta = {};
              ret.profile2.identity.links[idx_2].meta.foo = clone(entity.profile2.identity.links[idx_2].meta.foo);
              ret.profile2.identity.links[idx_2].meta.bar = clone(entity.profile2.identity.links[idx_2].meta.bar);
            }

            if (Array.isArray(entity.profile2.identity.links[idx_2].metas)) {
              ret.profile2.identity.links[idx_2].metas = [];
              entity.profile2.identity.links[idx_2].metas.forEach((_, idx_3) => {

                if (entity.profile2.identity.links[idx_2].metas[idx_3] != null) {
                  ret.profile2.identity.links[idx_2].metas[idx_3] = {};
                  ret.profile2.identity.links[idx_2].metas[idx_3].foo = clone(entity.profile2.identity.links[idx_2].metas[idx_3].foo);
                  ret.profile2.identity.links[idx_2].metas[idx_3].bar = clone(entity.profile2.identity.links[idx_2].metas[idx_3].bar);
                }
              });
            }

          }
        });
      }

    }

    ret.profile2 = cloneEmbeddable(ret.profile2);
  }

  return ret;
}"
`;

exports[`embedded entities in postgres schema: nested embeddables 1 1`] = `
"create table \\"user\\" (\\"id\\" serial primary key, \\"name\\" varchar(255) not null, \\"profile1_username\\" varchar(255) not null, \\"profile1_identity_email\\" varchar(255) not null, \\"profile1_identity_meta_foo\\" varchar(255) null, \\"profile1_identity_links\\" jsonb not null, \\"profile1_identity_meta_bar\\" varchar(255) null, \\"profile2\\" jsonb not null);

"
`;

exports[`embedded entities in postgres schema: nested embeddables 2 1`] = `""`;

exports[`embedded entities in postgres schema: nested embeddables 3 1`] = `
"drop table if exists \\"user\\" cascade;

"
`;
