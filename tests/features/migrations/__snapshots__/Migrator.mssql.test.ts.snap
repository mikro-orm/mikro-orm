// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Migrator (mssql) generate initial migration: initial-migration-dump 1`] = `
{
  "code": "import { Migration } from '@mikro-orm/migrations';

export class Migration20191013214813 extends Migration {

  async up(): Promise<void> {
    this.addSql('if (schema_id(\\'custom\\') is null) begin exec (\\'create schema [custom] authorization [dbo]\\') end;');
    this.addSql('CREATE TABLE [custom].[book_tag2] ([id] bigint identity(1,1) not null primary key, [name] nvarchar(50) not null);');

    this.addSql('CREATE TABLE [custom].[foo_baz2] ([id] int identity(1,1) not null primary key, [name] nvarchar(255) not null, [code] varchar(255) not null, [version] datetime2(3) not null CONSTRAINT [foo_baz2_version_default] DEFAULT current_timestamp);');

    this.addSql('CREATE TABLE [custom].[foo_bar2] ([id] int identity(1,1) not null primary key, [name] nvarchar(255) not null, [baz_id] int null, [foo_bar_id] int null, [version] datetime2(0) not null CONSTRAINT [foo_bar2_version_default] DEFAULT current_timestamp, [blob] varbinary(max) null, [array] text null, [object] nvarchar(max) null);');
    this.addSql('CREATE UNIQUE INDEX [foo_bar2_baz_id_unique] ON [custom].[foo_bar2] ([baz_id]) WHERE [baz_id] IS NOT NULL;');
    this.addSql('CREATE UNIQUE INDEX [foo_bar2_foo_bar_id_unique] ON [custom].[foo_bar2] ([foo_bar_id]) WHERE [foo_bar_id] IS NOT NULL;');

    this.addSql('CREATE TABLE [custom].[foo_param2] ([bar_id] int not null, [baz_id] int not null, [value] nvarchar(255) not null, CONSTRAINT [foo_param2_pkey] PRIMARY KEY ([bar_id], [baz_id]));');

    this.addSql('CREATE TABLE [custom].[publisher2] ([id] int identity(1,1) not null primary key, [name] nvarchar(255) not null CONSTRAINT [publisher2_name_default] DEFAULT \\'asd\\', [type] nvarchar(100) check ([type] in (\\'local\\', \\'global\\')) not null CONSTRAINT [publisher2_type_default] DEFAULT \\'local\\', [type2] nvarchar(100) check ([type2] in (\\'LOCAL\\', \\'GLOBAL\\')) not null CONSTRAINT [publisher2_type2_default] DEFAULT \\'LOCAL\\', [enum1] tinyint null, [enum2] tinyint null, [enum3] tinyint null, [enum4] nvarchar(100) check ([enum4] in (\\'a\\', \\'b\\', \\'c\\')) null);');

    this.addSql('CREATE TABLE [custom].[author2] ([id] int identity(1,1) not null primary key, [created_at] datetime2(3) not null CONSTRAINT [author2_created_at_default] DEFAULT current_timestamp, [updated_at] datetime2(3) not null CONSTRAINT [author2_updated_at_default] DEFAULT current_timestamp, [name] nvarchar(255) not null, [email] nvarchar(255) not null, [age] int null, [terms_accepted] bit not null CONSTRAINT [author2_terms_accepted_default] DEFAULT 0, [optional] bit null, [identities] text null, [born] date null, [born_time] time null, [favourite_book_uuid_pk] uniqueidentifier null, [favourite_author_id] int null);');
    this.addSql('CREATE INDEX [custom_email_index_name] ON [custom].[author2] ([email]);');
    this.addSql('CREATE UNIQUE INDEX [custom_email_unique_name] ON [custom].[author2] ([email]) WHERE [email] IS NOT NULL;');
    this.addSql('CREATE INDEX [author2_terms_accepted_index] ON [custom].[author2] ([terms_accepted]);');
    this.addSql('CREATE INDEX [author2_born_index] ON [custom].[author2] ([born]);');
    this.addSql('CREATE INDEX [born_time_idx] ON [custom].[author2] ([born_time]);');
    this.addSql('CREATE INDEX [custom_idx_name_123] ON [custom].[author2] ([name]);');
    this.addSql('CREATE INDEX [author2_name_age_index] ON [custom].[author2] ([name], [age]);');
    this.addSql('CREATE UNIQUE INDEX [author2_name_email_unique] ON [custom].[author2] ([name], [email]) WHERE [name] IS NOT NULL AND [email] IS NOT NULL;');

    this.addSql('CREATE TABLE [custom].[book2] ([uuid_pk] uniqueidentifier not null, [created_at] datetime2(3) not null CONSTRAINT [book2_created_at_default] DEFAULT current_timestamp, [isbn] nchar(13) null, [title] nvarchar(255) null CONSTRAINT [book2_title_default] DEFAULT \\'\\', [perex] text null, [price] numeric(8,2) null, [double] float(53) null, [meta] nvarchar(max) null, [author_id] int not null, [publisher_id] int null, CONSTRAINT [book2_pkey] PRIMARY KEY ([uuid_pk]));');
    this.addSql('CREATE UNIQUE INDEX [book2_isbn_unique] ON [custom].[book2] ([isbn]) WHERE [isbn] IS NOT NULL;');

    this.addSql('CREATE TABLE [custom].[book2_tags] ([order] int identity(1,1) not null primary key, [book2_uuid_pk] uniqueidentifier not null, [book_tag2_id] bigint not null);');

    this.addSql('CREATE TABLE [custom].[book_to_tag_unordered] ([book2_uuid_pk] uniqueidentifier not null, [book_tag2_id] bigint not null, CONSTRAINT [book_to_tag_unordered_pkey] PRIMARY KEY ([book2_uuid_pk], [book_tag2_id]));');

    this.addSql('CREATE TABLE [custom].[author2_following] ([author2_1_id] int not null, [author2_2_id] int not null, CONSTRAINT [author2_following_pkey] PRIMARY KEY ([author2_1_id], [author2_2_id]));');

    this.addSql('CREATE TABLE [custom].[author_to_friend] ([author2_1_id] int not null, [author2_2_id] int not null, CONSTRAINT [author_to_friend_pkey] PRIMARY KEY ([author2_1_id], [author2_2_id]));');

    this.addSql('CREATE TABLE [custom].[address2] ([author_id] int not null, [value] nvarchar(255) not null, CONSTRAINT [address2_pkey] PRIMARY KEY ([author_id]));');
    this.addSql('IF EXISTS(SELECT * FROM sys.fn_listextendedproperty(N\\'MS_Description\\', N\\'Schema\\', N\\'custom\\', N\\'Table\\', N\\'address2\\', NULL, NULL))');
    this.addSql('  EXEC sys.sp_updateextendedproperty N\\'MS_Description\\', N\\'This is address table\\', N\\'Schema\\', N\\'custom\\', N\\'Table\\', N\\'address2\\'');
    this.addSql('ELSE');
    this.addSql('  EXEC sys.sp_addextendedproperty N\\'MS_Description\\', N\\'This is address table\\', N\\'Schema\\', N\\'custom\\', N\\'Table\\', N\\'address2\\';');
    this.addSql('IF EXISTS(SELECT * FROM sys.fn_listextendedproperty(N\\'MS_Description\\', N\\'Schema\\', N\\'custom\\', N\\'Table\\', N\\'address2\\', N\\'Column\\', N\\'value\\'))');
    this.addSql('  EXEC sys.sp_updateextendedproperty N\\'MS_Description\\', N\\'This is address property\\', N\\'Schema\\', N\\'custom\\', N\\'Table\\', N\\'address2\\', N\\'Column\\', N\\'value\\'');
    this.addSql('ELSE');
    this.addSql('  EXEC sys.sp_addextendedproperty N\\'MS_Description\\', N\\'This is address property\\', N\\'Schema\\', N\\'custom\\', N\\'Table\\', N\\'address2\\', N\\'Column\\', N\\'value\\';');

    this.addSql('CREATE TABLE [custom].[test2] ([id] int identity(1,1) not null primary key, [name] nvarchar(255) null, [book_uuid_pk] uniqueidentifier null, [version] int not null CONSTRAINT [test2_version_default] DEFAULT 1);');
    this.addSql('CREATE UNIQUE INDEX [test2_book_uuid_pk_unique] ON [custom].[test2] ([book_uuid_pk]) WHERE [book_uuid_pk] IS NOT NULL;');

    this.addSql('CREATE TABLE [custom].[publisher2_tests] ([id] int identity(1,1) not null primary key, [publisher2_id] int not null, [test2_id] int not null);');

    this.addSql('CREATE TABLE [custom].[configuration2] ([property] nvarchar(255) not null, [test_id] int not null, [value] nvarchar(255) not null, CONSTRAINT [configuration2_pkey] PRIMARY KEY ([property], [test_id]));');

    this.addSql('alter table [custom].[foo_bar2] add constraint [foo_bar2_baz_id_foreign] foreign key ([baz_id]) references [custom].[foo_baz2] ([id]) on update cascade on delete set null;');
    this.addSql('alter table [custom].[foo_bar2] add constraint [foo_bar2_foo_bar_id_foreign] foreign key ([foo_bar_id]) references [custom].[foo_bar2] ([id]);');

    this.addSql('alter table [custom].[foo_param2] add constraint [foo_param2_bar_id_foreign] foreign key ([bar_id]) references [custom].[foo_bar2] ([id]) on update cascade;');
    this.addSql('alter table [custom].[foo_param2] add constraint [foo_param2_baz_id_foreign] foreign key ([baz_id]) references [custom].[foo_baz2] ([id]) on update no action on delete no action;');

    this.addSql('alter table [custom].[author2] add constraint [author2_favourite_book_uuid_pk_foreign] foreign key ([favourite_book_uuid_pk]) references [custom].[book2] ([uuid_pk]) on update no action on delete cascade;');
    this.addSql('alter table [custom].[author2] add constraint [author2_favourite_author_id_foreign] foreign key ([favourite_author_id]) references [custom].[author2] ([id]);');

    this.addSql('alter table [custom].[book2] add constraint [book2_author_id_foreign] foreign key ([author_id]) references [custom].[author2] ([id]);');
    this.addSql('alter table [custom].[book2] add constraint [book2_publisher_id_foreign] foreign key ([publisher_id]) references [custom].[publisher2] ([id]) on update cascade on delete cascade;');

    this.addSql('alter table [custom].[book2_tags] add constraint [book2_tags_book2_uuid_pk_foreign] foreign key ([book2_uuid_pk]) references [custom].[book2] ([uuid_pk]) on update cascade on delete cascade;');
    this.addSql('alter table [custom].[book2_tags] add constraint [book2_tags_book_tag2_id_foreign] foreign key ([book_tag2_id]) references [custom].[book_tag2] ([id]) on update cascade on delete cascade;');

    this.addSql('alter table [custom].[book_to_tag_unordered] add constraint [book_to_tag_unordered_book2_uuid_pk_foreign] foreign key ([book2_uuid_pk]) references [custom].[book2] ([uuid_pk]) on update cascade on delete cascade;');
    this.addSql('alter table [custom].[book_to_tag_unordered] add constraint [book_to_tag_unordered_book_tag2_id_foreign] foreign key ([book_tag2_id]) references [custom].[book_tag2] ([id]) on update cascade on delete cascade;');

    this.addSql('alter table [custom].[author2_following] add constraint [author2_following_author2_1_id_foreign] foreign key ([author2_1_id]) references [custom].[author2] ([id]) on update no action on delete no action;');
    this.addSql('alter table [custom].[author2_following] add constraint [author2_following_author2_2_id_foreign] foreign key ([author2_2_id]) references [custom].[author2] ([id]) on update no action on delete no action;');

    this.addSql('alter table [custom].[author_to_friend] add constraint [author_to_friend_author2_1_id_foreign] foreign key ([author2_1_id]) references [custom].[author2] ([id]) on update no action on delete no action;');
    this.addSql('alter table [custom].[author_to_friend] add constraint [author_to_friend_author2_2_id_foreign] foreign key ([author2_2_id]) references [custom].[author2] ([id]) on update no action on delete no action;');

    this.addSql('alter table [custom].[address2] add constraint [address2_author_id_foreign] foreign key ([author_id]) references [custom].[author2] ([id]) on update cascade on delete cascade;');

    this.addSql('alter table [custom].[test2] add constraint [test2_book_uuid_pk_foreign] foreign key ([book_uuid_pk]) references [custom].[book2] ([uuid_pk]) on delete no action;');

    this.addSql('alter table [custom].[publisher2_tests] add constraint [publisher2_tests_publisher2_id_foreign] foreign key ([publisher2_id]) references [custom].[publisher2] ([id]) on update cascade on delete cascade;');
    this.addSql('alter table [custom].[publisher2_tests] add constraint [publisher2_tests_test2_id_foreign] foreign key ([test2_id]) references [custom].[test2] ([id]) on update cascade on delete cascade;');

    this.addSql('alter table [custom].[configuration2] add constraint [configuration2_test_id_foreign] foreign key ([test_id]) references [custom].[test2] ([id]) on update cascade;');
  }

}
",
  "diff": {
    "down": [],
    "up": [
      "if (schema_id('custom') is null) begin exec ('create schema [custom] authorization [dbo]') end;",
      "CREATE TABLE [custom].[book_tag2] ([id] bigint identity(1,1) not null primary key, [name] nvarchar(50) not null);",
      "",
      "CREATE TABLE [custom].[foo_baz2] ([id] int identity(1,1) not null primary key, [name] nvarchar(255) not null, [code] varchar(255) not null, [version] datetime2(3) not null CONSTRAINT [foo_baz2_version_default] DEFAULT current_timestamp);",
      "",
      "CREATE TABLE [custom].[foo_bar2] ([id] int identity(1,1) not null primary key, [name] nvarchar(255) not null, [baz_id] int null, [foo_bar_id] int null, [version] datetime2(0) not null CONSTRAINT [foo_bar2_version_default] DEFAULT current_timestamp, [blob] varbinary(max) null, [array] text null, [object] nvarchar(max) null);",
      "CREATE UNIQUE INDEX [foo_bar2_baz_id_unique] ON [custom].[foo_bar2] ([baz_id]) WHERE [baz_id] IS NOT NULL;",
      "CREATE UNIQUE INDEX [foo_bar2_foo_bar_id_unique] ON [custom].[foo_bar2] ([foo_bar_id]) WHERE [foo_bar_id] IS NOT NULL;",
      "",
      "CREATE TABLE [custom].[foo_param2] ([bar_id] int not null, [baz_id] int not null, [value] nvarchar(255) not null, CONSTRAINT [foo_param2_pkey] PRIMARY KEY ([bar_id], [baz_id]));",
      "",
      "CREATE TABLE [custom].[publisher2] ([id] int identity(1,1) not null primary key, [name] nvarchar(255) not null CONSTRAINT [publisher2_name_default] DEFAULT 'asd', [type] nvarchar(100) check ([type] in ('local', 'global')) not null CONSTRAINT [publisher2_type_default] DEFAULT 'local', [type2] nvarchar(100) check ([type2] in ('LOCAL', 'GLOBAL')) not null CONSTRAINT [publisher2_type2_default] DEFAULT 'LOCAL', [enum1] tinyint null, [enum2] tinyint null, [enum3] tinyint null, [enum4] nvarchar(100) check ([enum4] in ('a', 'b', 'c')) null);",
      "",
      "CREATE TABLE [custom].[author2] ([id] int identity(1,1) not null primary key, [created_at] datetime2(3) not null CONSTRAINT [author2_created_at_default] DEFAULT current_timestamp, [updated_at] datetime2(3) not null CONSTRAINT [author2_updated_at_default] DEFAULT current_timestamp, [name] nvarchar(255) not null, [email] nvarchar(255) not null, [age] int null, [terms_accepted] bit not null CONSTRAINT [author2_terms_accepted_default] DEFAULT 0, [optional] bit null, [identities] text null, [born] date null, [born_time] time null, [favourite_book_uuid_pk] uniqueidentifier null, [favourite_author_id] int null);",
      "CREATE INDEX [custom_email_index_name] ON [custom].[author2] ([email]);",
      "CREATE UNIQUE INDEX [custom_email_unique_name] ON [custom].[author2] ([email]) WHERE [email] IS NOT NULL;",
      "CREATE INDEX [author2_terms_accepted_index] ON [custom].[author2] ([terms_accepted]);",
      "CREATE INDEX [author2_born_index] ON [custom].[author2] ([born]);",
      "CREATE INDEX [born_time_idx] ON [custom].[author2] ([born_time]);",
      "CREATE INDEX [custom_idx_name_123] ON [custom].[author2] ([name]);",
      "CREATE INDEX [author2_name_age_index] ON [custom].[author2] ([name], [age]);",
      "CREATE UNIQUE INDEX [author2_name_email_unique] ON [custom].[author2] ([name], [email]) WHERE [name] IS NOT NULL AND [email] IS NOT NULL;",
      "",
      "CREATE TABLE [custom].[book2] ([uuid_pk] uniqueidentifier not null, [created_at] datetime2(3) not null CONSTRAINT [book2_created_at_default] DEFAULT current_timestamp, [isbn] nchar(13) null, [title] nvarchar(255) null CONSTRAINT [book2_title_default] DEFAULT '', [perex] text null, [price] numeric(8,2) null, [double] float(53) null, [meta] nvarchar(max) null, [author_id] int not null, [publisher_id] int null, CONSTRAINT [book2_pkey] PRIMARY KEY ([uuid_pk]));",
      "CREATE UNIQUE INDEX [book2_isbn_unique] ON [custom].[book2] ([isbn]) WHERE [isbn] IS NOT NULL;",
      "",
      "CREATE TABLE [custom].[book2_tags] ([order] int identity(1,1) not null primary key, [book2_uuid_pk] uniqueidentifier not null, [book_tag2_id] bigint not null);",
      "",
      "CREATE TABLE [custom].[book_to_tag_unordered] ([book2_uuid_pk] uniqueidentifier not null, [book_tag2_id] bigint not null, CONSTRAINT [book_to_tag_unordered_pkey] PRIMARY KEY ([book2_uuid_pk], [book_tag2_id]));",
      "",
      "CREATE TABLE [custom].[author2_following] ([author2_1_id] int not null, [author2_2_id] int not null, CONSTRAINT [author2_following_pkey] PRIMARY KEY ([author2_1_id], [author2_2_id]));",
      "",
      "CREATE TABLE [custom].[author_to_friend] ([author2_1_id] int not null, [author2_2_id] int not null, CONSTRAINT [author_to_friend_pkey] PRIMARY KEY ([author2_1_id], [author2_2_id]));",
      "",
      "CREATE TABLE [custom].[address2] ([author_id] int not null, [value] nvarchar(255) not null, CONSTRAINT [address2_pkey] PRIMARY KEY ([author_id]));",
      "IF EXISTS(SELECT * FROM sys.fn_listextendedproperty(N'MS_Description', N'Schema', N'custom', N'Table', N'address2', NULL, NULL))",
      "  EXEC sys.sp_updateextendedproperty N'MS_Description', N'This is address table', N'Schema', N'custom', N'Table', N'address2'",
      "ELSE",
      "  EXEC sys.sp_addextendedproperty N'MS_Description', N'This is address table', N'Schema', N'custom', N'Table', N'address2';",
      "IF EXISTS(SELECT * FROM sys.fn_listextendedproperty(N'MS_Description', N'Schema', N'custom', N'Table', N'address2', N'Column', N'value'))",
      "  EXEC sys.sp_updateextendedproperty N'MS_Description', N'This is address property', N'Schema', N'custom', N'Table', N'address2', N'Column', N'value'",
      "ELSE",
      "  EXEC sys.sp_addextendedproperty N'MS_Description', N'This is address property', N'Schema', N'custom', N'Table', N'address2', N'Column', N'value';",
      "",
      "CREATE TABLE [custom].[test2] ([id] int identity(1,1) not null primary key, [name] nvarchar(255) null, [book_uuid_pk] uniqueidentifier null, [version] int not null CONSTRAINT [test2_version_default] DEFAULT 1);",
      "CREATE UNIQUE INDEX [test2_book_uuid_pk_unique] ON [custom].[test2] ([book_uuid_pk]) WHERE [book_uuid_pk] IS NOT NULL;",
      "",
      "CREATE TABLE [custom].[publisher2_tests] ([id] int identity(1,1) not null primary key, [publisher2_id] int not null, [test2_id] int not null);",
      "",
      "CREATE TABLE [custom].[configuration2] ([property] nvarchar(255) not null, [test_id] int not null, [value] nvarchar(255) not null, CONSTRAINT [configuration2_pkey] PRIMARY KEY ([property], [test_id]));",
      "",
      "alter table [custom].[foo_bar2] add constraint [foo_bar2_baz_id_foreign] foreign key ([baz_id]) references [custom].[foo_baz2] ([id]) on update cascade on delete set null;",
      "alter table [custom].[foo_bar2] add constraint [foo_bar2_foo_bar_id_foreign] foreign key ([foo_bar_id]) references [custom].[foo_bar2] ([id]);",
      "",
      "alter table [custom].[foo_param2] add constraint [foo_param2_bar_id_foreign] foreign key ([bar_id]) references [custom].[foo_bar2] ([id]) on update cascade;",
      "alter table [custom].[foo_param2] add constraint [foo_param2_baz_id_foreign] foreign key ([baz_id]) references [custom].[foo_baz2] ([id]) on update no action on delete no action;",
      "",
      "alter table [custom].[author2] add constraint [author2_favourite_book_uuid_pk_foreign] foreign key ([favourite_book_uuid_pk]) references [custom].[book2] ([uuid_pk]) on update no action on delete cascade;",
      "alter table [custom].[author2] add constraint [author2_favourite_author_id_foreign] foreign key ([favourite_author_id]) references [custom].[author2] ([id]);",
      "",
      "alter table [custom].[book2] add constraint [book2_author_id_foreign] foreign key ([author_id]) references [custom].[author2] ([id]);",
      "alter table [custom].[book2] add constraint [book2_publisher_id_foreign] foreign key ([publisher_id]) references [custom].[publisher2] ([id]) on update cascade on delete cascade;",
      "",
      "alter table [custom].[book2_tags] add constraint [book2_tags_book2_uuid_pk_foreign] foreign key ([book2_uuid_pk]) references [custom].[book2] ([uuid_pk]) on update cascade on delete cascade;",
      "alter table [custom].[book2_tags] add constraint [book2_tags_book_tag2_id_foreign] foreign key ([book_tag2_id]) references [custom].[book_tag2] ([id]) on update cascade on delete cascade;",
      "",
      "alter table [custom].[book_to_tag_unordered] add constraint [book_to_tag_unordered_book2_uuid_pk_foreign] foreign key ([book2_uuid_pk]) references [custom].[book2] ([uuid_pk]) on update cascade on delete cascade;",
      "alter table [custom].[book_to_tag_unordered] add constraint [book_to_tag_unordered_book_tag2_id_foreign] foreign key ([book_tag2_id]) references [custom].[book_tag2] ([id]) on update cascade on delete cascade;",
      "",
      "alter table [custom].[author2_following] add constraint [author2_following_author2_1_id_foreign] foreign key ([author2_1_id]) references [custom].[author2] ([id]) on update no action on delete no action;",
      "alter table [custom].[author2_following] add constraint [author2_following_author2_2_id_foreign] foreign key ([author2_2_id]) references [custom].[author2] ([id]) on update no action on delete no action;",
      "",
      "alter table [custom].[author_to_friend] add constraint [author_to_friend_author2_1_id_foreign] foreign key ([author2_1_id]) references [custom].[author2] ([id]) on update no action on delete no action;",
      "alter table [custom].[author_to_friend] add constraint [author_to_friend_author2_2_id_foreign] foreign key ([author2_2_id]) references [custom].[author2] ([id]) on update no action on delete no action;",
      "",
      "alter table [custom].[address2] add constraint [address2_author_id_foreign] foreign key ([author_id]) references [custom].[author2] ([id]) on update cascade on delete cascade;",
      "",
      "alter table [custom].[test2] add constraint [test2_book_uuid_pk_foreign] foreign key ([book_uuid_pk]) references [custom].[book2] ([uuid_pk]) on delete no action;",
      "",
      "alter table [custom].[publisher2_tests] add constraint [publisher2_tests_publisher2_id_foreign] foreign key ([publisher2_id]) references [custom].[publisher2] ([id]) on update cascade on delete cascade;",
      "alter table [custom].[publisher2_tests] add constraint [publisher2_tests_test2_id_foreign] foreign key ([test2_id]) references [custom].[test2] ([id]) on update cascade on delete cascade;",
      "",
      "alter table [custom].[configuration2] add constraint [configuration2_test_id_foreign] foreign key ([test_id]) references [custom].[test2] ([id]) on update cascade;",
    ],
  },
  "fileName": "Migration20191013214813.ts",
}
`;

exports[`Migrator (mssql) generate initial migration: initial-migration-dump 2`] = `
{
  "code": "import { Migration } from '@mikro-orm/migrations';

export class Migration20191013214813 extends Migration {

  async up(): Promise<void> {
    this.addSql('if (schema_id(\\'custom\\') is null) begin exec (\\'create schema [custom] authorization [dbo]\\') end;');
    this.addSql('CREATE TABLE [custom].[book_tag2] ([id] bigint identity(1,1) not null primary key, [name] nvarchar(50) not null);');

    this.addSql('CREATE TABLE [custom].[foo_baz2] ([id] int identity(1,1) not null primary key, [name] nvarchar(255) not null, [code] varchar(255) not null, [version] datetime2(3) not null CONSTRAINT [foo_baz2_version_default] DEFAULT current_timestamp);');

    this.addSql('CREATE TABLE [custom].[foo_bar2] ([id] int identity(1,1) not null primary key, [name] nvarchar(255) not null, [baz_id] int null, [foo_bar_id] int null, [version] datetime2(0) not null CONSTRAINT [foo_bar2_version_default] DEFAULT current_timestamp, [blob] varbinary(max) null, [array] text null, [object] nvarchar(max) null);');
    this.addSql('CREATE UNIQUE INDEX [foo_bar2_baz_id_unique] ON [custom].[foo_bar2] ([baz_id]) WHERE [baz_id] IS NOT NULL;');
    this.addSql('CREATE UNIQUE INDEX [foo_bar2_foo_bar_id_unique] ON [custom].[foo_bar2] ([foo_bar_id]) WHERE [foo_bar_id] IS NOT NULL;');

    this.addSql('CREATE TABLE [custom].[foo_param2] ([bar_id] int not null, [baz_id] int not null, [value] nvarchar(255) not null, CONSTRAINT [foo_param2_pkey] PRIMARY KEY ([bar_id], [baz_id]));');

    this.addSql('CREATE TABLE [custom].[publisher2] ([id] int identity(1,1) not null primary key, [name] nvarchar(255) not null CONSTRAINT [publisher2_name_default] DEFAULT \\'asd\\', [type] nvarchar(100) check ([type] in (\\'local\\', \\'global\\')) not null CONSTRAINT [publisher2_type_default] DEFAULT \\'local\\', [type2] nvarchar(100) check ([type2] in (\\'LOCAL\\', \\'GLOBAL\\')) not null CONSTRAINT [publisher2_type2_default] DEFAULT \\'LOCAL\\', [enum1] tinyint null, [enum2] tinyint null, [enum3] tinyint null, [enum4] nvarchar(100) check ([enum4] in (\\'a\\', \\'b\\', \\'c\\')) null);');

    this.addSql('CREATE TABLE [custom].[author2] ([id] int identity(1,1) not null primary key, [created_at] datetime2(3) not null CONSTRAINT [author2_created_at_default] DEFAULT current_timestamp, [updated_at] datetime2(3) not null CONSTRAINT [author2_updated_at_default] DEFAULT current_timestamp, [name] nvarchar(255) not null, [email] nvarchar(255) not null, [age] int null, [terms_accepted] bit not null CONSTRAINT [author2_terms_accepted_default] DEFAULT 0, [optional] bit null, [identities] text null, [born] date null, [born_time] time null, [favourite_book_uuid_pk] uniqueidentifier null, [favourite_author_id] int null);');
    this.addSql('CREATE INDEX [custom_email_index_name] ON [custom].[author2] ([email]);');
    this.addSql('CREATE UNIQUE INDEX [custom_email_unique_name] ON [custom].[author2] ([email]) WHERE [email] IS NOT NULL;');
    this.addSql('CREATE INDEX [author2_terms_accepted_index] ON [custom].[author2] ([terms_accepted]);');
    this.addSql('CREATE INDEX [author2_born_index] ON [custom].[author2] ([born]);');
    this.addSql('CREATE INDEX [born_time_idx] ON [custom].[author2] ([born_time]);');
    this.addSql('CREATE INDEX [custom_idx_name_123] ON [custom].[author2] ([name]);');
    this.addSql('CREATE INDEX [author2_name_age_index] ON [custom].[author2] ([name], [age]);');
    this.addSql('CREATE UNIQUE INDEX [author2_name_email_unique] ON [custom].[author2] ([name], [email]) WHERE [name] IS NOT NULL AND [email] IS NOT NULL;');

    this.addSql('CREATE TABLE [custom].[book2] ([uuid_pk] uniqueidentifier not null, [created_at] datetime2(3) not null CONSTRAINT [book2_created_at_default] DEFAULT current_timestamp, [isbn] nchar(13) null, [title] nvarchar(255) null CONSTRAINT [book2_title_default] DEFAULT \\'\\', [perex] text null, [price] numeric(8,2) null, [double] float(53) null, [meta] nvarchar(max) null, [author_id] int not null, [publisher_id] int null, CONSTRAINT [book2_pkey] PRIMARY KEY ([uuid_pk]));');
    this.addSql('CREATE UNIQUE INDEX [book2_isbn_unique] ON [custom].[book2] ([isbn]) WHERE [isbn] IS NOT NULL;');

    this.addSql('CREATE TABLE [custom].[book2_tags] ([order] int identity(1,1) not null primary key, [book2_uuid_pk] uniqueidentifier not null, [book_tag2_id] bigint not null);');

    this.addSql('CREATE TABLE [custom].[book_to_tag_unordered] ([book2_uuid_pk] uniqueidentifier not null, [book_tag2_id] bigint not null, CONSTRAINT [book_to_tag_unordered_pkey] PRIMARY KEY ([book2_uuid_pk], [book_tag2_id]));');

    this.addSql('CREATE TABLE [custom].[author2_following] ([author2_1_id] int not null, [author2_2_id] int not null, CONSTRAINT [author2_following_pkey] PRIMARY KEY ([author2_1_id], [author2_2_id]));');

    this.addSql('CREATE TABLE [custom].[author_to_friend] ([author2_1_id] int not null, [author2_2_id] int not null, CONSTRAINT [author_to_friend_pkey] PRIMARY KEY ([author2_1_id], [author2_2_id]));');

    this.addSql('CREATE TABLE [custom].[address2] ([author_id] int not null, [value] nvarchar(255) not null, CONSTRAINT [address2_pkey] PRIMARY KEY ([author_id]));');
    this.addSql('IF EXISTS(SELECT * FROM sys.fn_listextendedproperty(N\\'MS_Description\\', N\\'Schema\\', N\\'custom\\', N\\'Table\\', N\\'address2\\', NULL, NULL))');
    this.addSql('  EXEC sys.sp_updateextendedproperty N\\'MS_Description\\', N\\'This is address table\\', N\\'Schema\\', N\\'custom\\', N\\'Table\\', N\\'address2\\'');
    this.addSql('ELSE');
    this.addSql('  EXEC sys.sp_addextendedproperty N\\'MS_Description\\', N\\'This is address table\\', N\\'Schema\\', N\\'custom\\', N\\'Table\\', N\\'address2\\';');
    this.addSql('IF EXISTS(SELECT * FROM sys.fn_listextendedproperty(N\\'MS_Description\\', N\\'Schema\\', N\\'custom\\', N\\'Table\\', N\\'address2\\', N\\'Column\\', N\\'value\\'))');
    this.addSql('  EXEC sys.sp_updateextendedproperty N\\'MS_Description\\', N\\'This is address property\\', N\\'Schema\\', N\\'custom\\', N\\'Table\\', N\\'address2\\', N\\'Column\\', N\\'value\\'');
    this.addSql('ELSE');
    this.addSql('  EXEC sys.sp_addextendedproperty N\\'MS_Description\\', N\\'This is address property\\', N\\'Schema\\', N\\'custom\\', N\\'Table\\', N\\'address2\\', N\\'Column\\', N\\'value\\';');

    this.addSql('CREATE TABLE [custom].[test2] ([id] int identity(1,1) not null primary key, [name] nvarchar(255) null, [book_uuid_pk] uniqueidentifier null, [version] int not null CONSTRAINT [test2_version_default] DEFAULT 1);');
    this.addSql('CREATE UNIQUE INDEX [test2_book_uuid_pk_unique] ON [custom].[test2] ([book_uuid_pk]) WHERE [book_uuid_pk] IS NOT NULL;');

    this.addSql('CREATE TABLE [custom].[publisher2_tests] ([id] int identity(1,1) not null primary key, [publisher2_id] int not null, [test2_id] int not null);');

    this.addSql('CREATE TABLE [custom].[configuration2] ([property] nvarchar(255) not null, [test_id] int not null, [value] nvarchar(255) not null, CONSTRAINT [configuration2_pkey] PRIMARY KEY ([property], [test_id]));');

    this.addSql('alter table [custom].[foo_bar2] add constraint [foo_bar2_baz_id_foreign] foreign key ([baz_id]) references [custom].[foo_baz2] ([id]) on update cascade on delete set null;');
    this.addSql('alter table [custom].[foo_bar2] add constraint [foo_bar2_foo_bar_id_foreign] foreign key ([foo_bar_id]) references [custom].[foo_bar2] ([id]);');

    this.addSql('alter table [custom].[foo_param2] add constraint [foo_param2_bar_id_foreign] foreign key ([bar_id]) references [custom].[foo_bar2] ([id]) on update cascade;');
    this.addSql('alter table [custom].[foo_param2] add constraint [foo_param2_baz_id_foreign] foreign key ([baz_id]) references [custom].[foo_baz2] ([id]) on update no action on delete no action;');

    this.addSql('alter table [custom].[author2] add constraint [author2_favourite_book_uuid_pk_foreign] foreign key ([favourite_book_uuid_pk]) references [custom].[book2] ([uuid_pk]) on update no action on delete cascade;');
    this.addSql('alter table [custom].[author2] add constraint [author2_favourite_author_id_foreign] foreign key ([favourite_author_id]) references [custom].[author2] ([id]);');

    this.addSql('alter table [custom].[book2] add constraint [book2_author_id_foreign] foreign key ([author_id]) references [custom].[author2] ([id]);');
    this.addSql('alter table [custom].[book2] add constraint [book2_publisher_id_foreign] foreign key ([publisher_id]) references [custom].[publisher2] ([id]) on update cascade on delete cascade;');

    this.addSql('alter table [custom].[book2_tags] add constraint [book2_tags_book2_uuid_pk_foreign] foreign key ([book2_uuid_pk]) references [custom].[book2] ([uuid_pk]) on update cascade on delete cascade;');
    this.addSql('alter table [custom].[book2_tags] add constraint [book2_tags_book_tag2_id_foreign] foreign key ([book_tag2_id]) references [custom].[book_tag2] ([id]) on update cascade on delete cascade;');

    this.addSql('alter table [custom].[book_to_tag_unordered] add constraint [book_to_tag_unordered_book2_uuid_pk_foreign] foreign key ([book2_uuid_pk]) references [custom].[book2] ([uuid_pk]) on update cascade on delete cascade;');
    this.addSql('alter table [custom].[book_to_tag_unordered] add constraint [book_to_tag_unordered_book_tag2_id_foreign] foreign key ([book_tag2_id]) references [custom].[book_tag2] ([id]) on update cascade on delete cascade;');

    this.addSql('alter table [custom].[author2_following] add constraint [author2_following_author2_1_id_foreign] foreign key ([author2_1_id]) references [custom].[author2] ([id]) on update no action on delete no action;');
    this.addSql('alter table [custom].[author2_following] add constraint [author2_following_author2_2_id_foreign] foreign key ([author2_2_id]) references [custom].[author2] ([id]) on update no action on delete no action;');

    this.addSql('alter table [custom].[author_to_friend] add constraint [author_to_friend_author2_1_id_foreign] foreign key ([author2_1_id]) references [custom].[author2] ([id]) on update no action on delete no action;');
    this.addSql('alter table [custom].[author_to_friend] add constraint [author_to_friend_author2_2_id_foreign] foreign key ([author2_2_id]) references [custom].[author2] ([id]) on update no action on delete no action;');

    this.addSql('alter table [custom].[address2] add constraint [address2_author_id_foreign] foreign key ([author_id]) references [custom].[author2] ([id]) on update cascade on delete cascade;');

    this.addSql('alter table [custom].[test2] add constraint [test2_book_uuid_pk_foreign] foreign key ([book_uuid_pk]) references [custom].[book2] ([uuid_pk]) on delete no action;');

    this.addSql('alter table [custom].[publisher2_tests] add constraint [publisher2_tests_publisher2_id_foreign] foreign key ([publisher2_id]) references [custom].[publisher2] ([id]) on update cascade on delete cascade;');
    this.addSql('alter table [custom].[publisher2_tests] add constraint [publisher2_tests_test2_id_foreign] foreign key ([test2_id]) references [custom].[test2] ([id]) on update cascade on delete cascade;');

    this.addSql('alter table [custom].[configuration2] add constraint [configuration2_test_id_foreign] foreign key ([test_id]) references [custom].[test2] ([id]) on update cascade;');
  }

}
",
  "diff": {
    "down": [],
    "up": [
      "if (schema_id('custom') is null) begin exec ('create schema [custom] authorization [dbo]') end;",
      "CREATE TABLE [custom].[book_tag2] ([id] bigint identity(1,1) not null primary key, [name] nvarchar(50) not null);",
      "",
      "CREATE TABLE [custom].[foo_baz2] ([id] int identity(1,1) not null primary key, [name] nvarchar(255) not null, [code] varchar(255) not null, [version] datetime2(3) not null CONSTRAINT [foo_baz2_version_default] DEFAULT current_timestamp);",
      "",
      "CREATE TABLE [custom].[foo_bar2] ([id] int identity(1,1) not null primary key, [name] nvarchar(255) not null, [baz_id] int null, [foo_bar_id] int null, [version] datetime2(0) not null CONSTRAINT [foo_bar2_version_default] DEFAULT current_timestamp, [blob] varbinary(max) null, [array] text null, [object] nvarchar(max) null);",
      "CREATE UNIQUE INDEX [foo_bar2_baz_id_unique] ON [custom].[foo_bar2] ([baz_id]) WHERE [baz_id] IS NOT NULL;",
      "CREATE UNIQUE INDEX [foo_bar2_foo_bar_id_unique] ON [custom].[foo_bar2] ([foo_bar_id]) WHERE [foo_bar_id] IS NOT NULL;",
      "",
      "CREATE TABLE [custom].[foo_param2] ([bar_id] int not null, [baz_id] int not null, [value] nvarchar(255) not null, CONSTRAINT [foo_param2_pkey] PRIMARY KEY ([bar_id], [baz_id]));",
      "",
      "CREATE TABLE [custom].[publisher2] ([id] int identity(1,1) not null primary key, [name] nvarchar(255) not null CONSTRAINT [publisher2_name_default] DEFAULT 'asd', [type] nvarchar(100) check ([type] in ('local', 'global')) not null CONSTRAINT [publisher2_type_default] DEFAULT 'local', [type2] nvarchar(100) check ([type2] in ('LOCAL', 'GLOBAL')) not null CONSTRAINT [publisher2_type2_default] DEFAULT 'LOCAL', [enum1] tinyint null, [enum2] tinyint null, [enum3] tinyint null, [enum4] nvarchar(100) check ([enum4] in ('a', 'b', 'c')) null);",
      "",
      "CREATE TABLE [custom].[author2] ([id] int identity(1,1) not null primary key, [created_at] datetime2(3) not null CONSTRAINT [author2_created_at_default] DEFAULT current_timestamp, [updated_at] datetime2(3) not null CONSTRAINT [author2_updated_at_default] DEFAULT current_timestamp, [name] nvarchar(255) not null, [email] nvarchar(255) not null, [age] int null, [terms_accepted] bit not null CONSTRAINT [author2_terms_accepted_default] DEFAULT 0, [optional] bit null, [identities] text null, [born] date null, [born_time] time null, [favourite_book_uuid_pk] uniqueidentifier null, [favourite_author_id] int null);",
      "CREATE INDEX [custom_email_index_name] ON [custom].[author2] ([email]);",
      "CREATE UNIQUE INDEX [custom_email_unique_name] ON [custom].[author2] ([email]) WHERE [email] IS NOT NULL;",
      "CREATE INDEX [author2_terms_accepted_index] ON [custom].[author2] ([terms_accepted]);",
      "CREATE INDEX [author2_born_index] ON [custom].[author2] ([born]);",
      "CREATE INDEX [born_time_idx] ON [custom].[author2] ([born_time]);",
      "CREATE INDEX [custom_idx_name_123] ON [custom].[author2] ([name]);",
      "CREATE INDEX [author2_name_age_index] ON [custom].[author2] ([name], [age]);",
      "CREATE UNIQUE INDEX [author2_name_email_unique] ON [custom].[author2] ([name], [email]) WHERE [name] IS NOT NULL AND [email] IS NOT NULL;",
      "",
      "CREATE TABLE [custom].[book2] ([uuid_pk] uniqueidentifier not null, [created_at] datetime2(3) not null CONSTRAINT [book2_created_at_default] DEFAULT current_timestamp, [isbn] nchar(13) null, [title] nvarchar(255) null CONSTRAINT [book2_title_default] DEFAULT '', [perex] text null, [price] numeric(8,2) null, [double] float(53) null, [meta] nvarchar(max) null, [author_id] int not null, [publisher_id] int null, CONSTRAINT [book2_pkey] PRIMARY KEY ([uuid_pk]));",
      "CREATE UNIQUE INDEX [book2_isbn_unique] ON [custom].[book2] ([isbn]) WHERE [isbn] IS NOT NULL;",
      "",
      "CREATE TABLE [custom].[book2_tags] ([order] int identity(1,1) not null primary key, [book2_uuid_pk] uniqueidentifier not null, [book_tag2_id] bigint not null);",
      "",
      "CREATE TABLE [custom].[book_to_tag_unordered] ([book2_uuid_pk] uniqueidentifier not null, [book_tag2_id] bigint not null, CONSTRAINT [book_to_tag_unordered_pkey] PRIMARY KEY ([book2_uuid_pk], [book_tag2_id]));",
      "",
      "CREATE TABLE [custom].[author2_following] ([author2_1_id] int not null, [author2_2_id] int not null, CONSTRAINT [author2_following_pkey] PRIMARY KEY ([author2_1_id], [author2_2_id]));",
      "",
      "CREATE TABLE [custom].[author_to_friend] ([author2_1_id] int not null, [author2_2_id] int not null, CONSTRAINT [author_to_friend_pkey] PRIMARY KEY ([author2_1_id], [author2_2_id]));",
      "",
      "CREATE TABLE [custom].[address2] ([author_id] int not null, [value] nvarchar(255) not null, CONSTRAINT [address2_pkey] PRIMARY KEY ([author_id]));",
      "IF EXISTS(SELECT * FROM sys.fn_listextendedproperty(N'MS_Description', N'Schema', N'custom', N'Table', N'address2', NULL, NULL))",
      "  EXEC sys.sp_updateextendedproperty N'MS_Description', N'This is address table', N'Schema', N'custom', N'Table', N'address2'",
      "ELSE",
      "  EXEC sys.sp_addextendedproperty N'MS_Description', N'This is address table', N'Schema', N'custom', N'Table', N'address2';",
      "IF EXISTS(SELECT * FROM sys.fn_listextendedproperty(N'MS_Description', N'Schema', N'custom', N'Table', N'address2', N'Column', N'value'))",
      "  EXEC sys.sp_updateextendedproperty N'MS_Description', N'This is address property', N'Schema', N'custom', N'Table', N'address2', N'Column', N'value'",
      "ELSE",
      "  EXEC sys.sp_addextendedproperty N'MS_Description', N'This is address property', N'Schema', N'custom', N'Table', N'address2', N'Column', N'value';",
      "",
      "CREATE TABLE [custom].[test2] ([id] int identity(1,1) not null primary key, [name] nvarchar(255) null, [book_uuid_pk] uniqueidentifier null, [version] int not null CONSTRAINT [test2_version_default] DEFAULT 1);",
      "CREATE UNIQUE INDEX [test2_book_uuid_pk_unique] ON [custom].[test2] ([book_uuid_pk]) WHERE [book_uuid_pk] IS NOT NULL;",
      "",
      "CREATE TABLE [custom].[publisher2_tests] ([id] int identity(1,1) not null primary key, [publisher2_id] int not null, [test2_id] int not null);",
      "",
      "CREATE TABLE [custom].[configuration2] ([property] nvarchar(255) not null, [test_id] int not null, [value] nvarchar(255) not null, CONSTRAINT [configuration2_pkey] PRIMARY KEY ([property], [test_id]));",
      "",
      "alter table [custom].[foo_bar2] add constraint [foo_bar2_baz_id_foreign] foreign key ([baz_id]) references [custom].[foo_baz2] ([id]) on update cascade on delete set null;",
      "alter table [custom].[foo_bar2] add constraint [foo_bar2_foo_bar_id_foreign] foreign key ([foo_bar_id]) references [custom].[foo_bar2] ([id]);",
      "",
      "alter table [custom].[foo_param2] add constraint [foo_param2_bar_id_foreign] foreign key ([bar_id]) references [custom].[foo_bar2] ([id]) on update cascade;",
      "alter table [custom].[foo_param2] add constraint [foo_param2_baz_id_foreign] foreign key ([baz_id]) references [custom].[foo_baz2] ([id]) on update no action on delete no action;",
      "",
      "alter table [custom].[author2] add constraint [author2_favourite_book_uuid_pk_foreign] foreign key ([favourite_book_uuid_pk]) references [custom].[book2] ([uuid_pk]) on update no action on delete cascade;",
      "alter table [custom].[author2] add constraint [author2_favourite_author_id_foreign] foreign key ([favourite_author_id]) references [custom].[author2] ([id]);",
      "",
      "alter table [custom].[book2] add constraint [book2_author_id_foreign] foreign key ([author_id]) references [custom].[author2] ([id]);",
      "alter table [custom].[book2] add constraint [book2_publisher_id_foreign] foreign key ([publisher_id]) references [custom].[publisher2] ([id]) on update cascade on delete cascade;",
      "",
      "alter table [custom].[book2_tags] add constraint [book2_tags_book2_uuid_pk_foreign] foreign key ([book2_uuid_pk]) references [custom].[book2] ([uuid_pk]) on update cascade on delete cascade;",
      "alter table [custom].[book2_tags] add constraint [book2_tags_book_tag2_id_foreign] foreign key ([book_tag2_id]) references [custom].[book_tag2] ([id]) on update cascade on delete cascade;",
      "",
      "alter table [custom].[book_to_tag_unordered] add constraint [book_to_tag_unordered_book2_uuid_pk_foreign] foreign key ([book2_uuid_pk]) references [custom].[book2] ([uuid_pk]) on update cascade on delete cascade;",
      "alter table [custom].[book_to_tag_unordered] add constraint [book_to_tag_unordered_book_tag2_id_foreign] foreign key ([book_tag2_id]) references [custom].[book_tag2] ([id]) on update cascade on delete cascade;",
      "",
      "alter table [custom].[author2_following] add constraint [author2_following_author2_1_id_foreign] foreign key ([author2_1_id]) references [custom].[author2] ([id]) on update no action on delete no action;",
      "alter table [custom].[author2_following] add constraint [author2_following_author2_2_id_foreign] foreign key ([author2_2_id]) references [custom].[author2] ([id]) on update no action on delete no action;",
      "",
      "alter table [custom].[author_to_friend] add constraint [author_to_friend_author2_1_id_foreign] foreign key ([author2_1_id]) references [custom].[author2] ([id]) on update no action on delete no action;",
      "alter table [custom].[author_to_friend] add constraint [author_to_friend_author2_2_id_foreign] foreign key ([author2_2_id]) references [custom].[author2] ([id]) on update no action on delete no action;",
      "",
      "alter table [custom].[address2] add constraint [address2_author_id_foreign] foreign key ([author_id]) references [custom].[author2] ([id]) on update cascade on delete cascade;",
      "",
      "alter table [custom].[test2] add constraint [test2_book_uuid_pk_foreign] foreign key ([book_uuid_pk]) references [custom].[book2] ([uuid_pk]) on delete no action;",
      "",
      "alter table [custom].[publisher2_tests] add constraint [publisher2_tests_publisher2_id_foreign] foreign key ([publisher2_id]) references [custom].[publisher2] ([id]) on update cascade on delete cascade;",
      "alter table [custom].[publisher2_tests] add constraint [publisher2_tests_test2_id_foreign] foreign key ([test2_id]) references [custom].[test2] ([id]) on update cascade on delete cascade;",
      "",
      "alter table [custom].[configuration2] add constraint [configuration2_test_id_foreign] foreign key ([test_id]) references [custom].[test2] ([id]) on update cascade;",
    ],
  },
  "fileName": "Migration20191013214813.ts",
}
`;

exports[`Migrator (mssql) generate js schema migration: migration-js-dump 1`] = `
{
  "code": "'use strict';
Object.defineProperty(exports, '__esModule', { value: true });
const { Migration } = require('@mikro-orm/migrations');

class Migration20191013214813 extends Migration {

  async up() {
    this.addSql('alter table [custom].[book2] alter column [double] nvarchar(max);');

    this.addSql('declare @constraint0 varchar(100) = (select default_constraints.name from sys.all_columns join sys.tables on all_columns.object_id = tables.object_id join sys.schemas on tables.schema_id = schemas.schema_id join sys.default_constraints on all_columns.default_object_id = default_constraints.object_id where schemas.name = \\'custom\\' and tables.name = \\'book2\\' and all_columns.name = \\'foo\\') if @constraint0 is not null exec(\\'alter table [custom].[book2] drop constraint \\' + @constraint0);');
    this.addSql('alter table [custom].[book2] drop column [foo];');

    this.addSql('alter table [custom].[book2] alter column [double] float(53);');

    this.addSql('declare @constraint0 varchar(100) = (select default_constraints.name from sys.all_columns join sys.tables on all_columns.object_id = tables.object_id join sys.schemas on tables.schema_id = schemas.schema_id join sys.default_constraints on all_columns.default_object_id = default_constraints.object_id where schemas.name = \\'custom\\' and tables.name = \\'test2\\' and all_columns.name = \\'path\\') if @constraint0 is not null exec(\\'alter table [custom].[test2] drop constraint \\' + @constraint0);');
    this.addSql('alter table [custom].[test2] drop column [path];');
  }

  async down() {
    this.addSql('alter table [custom].[book2] alter column [double] nvarchar(max);');

    this.addSql('alter table [custom].[book2] add [foo] varchar(1) null CONSTRAINT [book2_foo_default] DEFAULT \\'lol\\';');
    this.addSql('alter table [custom].[book2] alter column [double] numeric(18,0);');

    this.addSql('alter table [custom].[test2] add [path] text(2147483647) null CONSTRAINT [test2_path_default] DEFAULT \\'NULL\\';');
  }

}
exports.Migration20191013214813 = Migration20191013214813;
",
  "diff": {
    "down": [
      "alter table [custom].[book2] alter column [double] nvarchar(max);",
      "",
      "alter table [custom].[book2] add [foo] varchar(1) null CONSTRAINT [book2_foo_default] DEFAULT 'lol';",
      "alter table [custom].[book2] alter column [double] numeric(18,0);",
      "",
      "alter table [custom].[test2] add [path] text(2147483647) null CONSTRAINT [test2_path_default] DEFAULT 'NULL';",
    ],
    "up": [
      "alter table [custom].[book2] alter column [double] nvarchar(max);",
      "",
      "declare @constraint0 varchar(100) = (select default_constraints.name from sys.all_columns join sys.tables on all_columns.object_id = tables.object_id join sys.schemas on tables.schema_id = schemas.schema_id join sys.default_constraints on all_columns.default_object_id = default_constraints.object_id where schemas.name = 'custom' and tables.name = 'book2' and all_columns.name = 'foo') if @constraint0 is not null exec('alter table [custom].[book2] drop constraint ' + @constraint0);",
      "alter table [custom].[book2] drop column [foo];",
      "",
      "alter table [custom].[book2] alter column [double] float(53);",
      "",
      "declare @constraint0 varchar(100) = (select default_constraints.name from sys.all_columns join sys.tables on all_columns.object_id = tables.object_id join sys.schemas on tables.schema_id = schemas.schema_id join sys.default_constraints on all_columns.default_object_id = default_constraints.object_id where schemas.name = 'custom' and tables.name = 'test2' and all_columns.name = 'path') if @constraint0 is not null exec('alter table [custom].[test2] drop constraint ' + @constraint0);",
      "alter table [custom].[test2] drop column [path];",
    ],
  },
  "fileName": "Migration20191013214813.js",
}
`;

exports[`Migrator (mssql) generate migration with custom migrator: migration-ts-dump 1`] = `
{
  "code": "// this file was generated via custom migration generator

import { Migration } from '@mikro-orm/migrations';

export class Migration20191013214813 extends Migration {

  async up(): Promise<void> {
    this.addSql('alter table [custom].[book2] alter column [double] nvarchar(max);');

    this.addSql('declare @constraint0 varchar(100) = (select default_constraints.name from sys.all_columns join sys.tables on all_columns.object_id = tables.object_id join sys.schemas on tables.schema_id = schemas.schema_id join sys.default_constraints on all_columns.default_object_id = default_constraints.object_id where schemas.name = \\'custom\\' and tables.name = \\'book2\\' and all_columns.name = \\'foo\\') if @constraint0 is not null exec(\\'alter table [custom].[book2] drop constraint \\' + @constraint0);');
    this.addSql('alter table [custom].[book2] drop column [foo];');

    this.addSql('alter table [custom].[book2] alter column [double] float(53);');

    this.addSql('declare @constraint0 varchar(100) = (select default_constraints.name from sys.all_columns join sys.tables on all_columns.object_id = tables.object_id join sys.schemas on tables.schema_id = schemas.schema_id join sys.default_constraints on all_columns.default_object_id = default_constraints.object_id where schemas.name = \\'custom\\' and tables.name = \\'test2\\' and all_columns.name = \\'path\\') if @constraint0 is not null exec(\\'alter table [custom].[test2] drop constraint \\' + @constraint0);');
    this.addSql('alter table [custom].[test2] drop column [path];');
  }

  async down(): Promise<void> {
    this.addSql('alter table [custom].[book2] alter column [double] nvarchar(max);');

    this.addSql('alter table [custom].[book2] add [foo] varchar(1) null CONSTRAINT [book2_foo_default] DEFAULT \\'lol\\';');
    this.addSql('alter table [custom].[book2] alter column [double] numeric(18,0);');

    this.addSql('alter table [custom].[test2] add [path] text(2147483647) null CONSTRAINT [test2_path_default] DEFAULT \\'NULL\\';');
  }

}
",
  "diff": {
    "down": [
      "alter table [custom].[book2] alter column [double] nvarchar(max);",
      "",
      "alter table [custom].[book2] add [foo] varchar(1) null CONSTRAINT [book2_foo_default] DEFAULT 'lol';",
      "alter table [custom].[book2] alter column [double] numeric(18,0);",
      "",
      "alter table [custom].[test2] add [path] text(2147483647) null CONSTRAINT [test2_path_default] DEFAULT 'NULL';",
    ],
    "up": [
      "alter table [custom].[book2] alter column [double] nvarchar(max);",
      "",
      "declare @constraint0 varchar(100) = (select default_constraints.name from sys.all_columns join sys.tables on all_columns.object_id = tables.object_id join sys.schemas on tables.schema_id = schemas.schema_id join sys.default_constraints on all_columns.default_object_id = default_constraints.object_id where schemas.name = 'custom' and tables.name = 'book2' and all_columns.name = 'foo') if @constraint0 is not null exec('alter table [custom].[book2] drop constraint ' + @constraint0);",
      "alter table [custom].[book2] drop column [foo];",
      "",
      "alter table [custom].[book2] alter column [double] float(53);",
      "",
      "declare @constraint0 varchar(100) = (select default_constraints.name from sys.all_columns join sys.tables on all_columns.object_id = tables.object_id join sys.schemas on tables.schema_id = schemas.schema_id join sys.default_constraints on all_columns.default_object_id = default_constraints.object_id where schemas.name = 'custom' and tables.name = 'test2' and all_columns.name = 'path') if @constraint0 is not null exec('alter table [custom].[test2] drop constraint ' + @constraint0);",
      "alter table [custom].[test2] drop column [path];",
    ],
  },
  "fileName": "Migration20191013214813.ts",
}
`;

exports[`Migrator (mssql) generate migration with custom name with name option: migration-dump 1`] = `
{
  "code": "import { Migration } from '@mikro-orm/migrations';

export class Migration20191013214813_custom_name extends Migration {

  async up(): Promise<void> {
    this.addSql('alter table [custom].[book2] alter column [double] nvarchar(max);');

    this.addSql('declare @constraint0 varchar(100) = (select default_constraints.name from sys.all_columns join sys.tables on all_columns.object_id = tables.object_id join sys.schemas on tables.schema_id = schemas.schema_id join sys.default_constraints on all_columns.default_object_id = default_constraints.object_id where schemas.name = \\'custom\\' and tables.name = \\'book2\\' and all_columns.name = \\'foo\\') if @constraint0 is not null exec(\\'alter table [custom].[book2] drop constraint \\' + @constraint0);');
    this.addSql('alter table [custom].[book2] drop column [foo];');

    this.addSql('alter table [custom].[book2] alter column [double] float(53);');

    this.addSql('declare @constraint0 varchar(100) = (select default_constraints.name from sys.all_columns join sys.tables on all_columns.object_id = tables.object_id join sys.schemas on tables.schema_id = schemas.schema_id join sys.default_constraints on all_columns.default_object_id = default_constraints.object_id where schemas.name = \\'custom\\' and tables.name = \\'test2\\' and all_columns.name = \\'path\\') if @constraint0 is not null exec(\\'alter table [custom].[test2] drop constraint \\' + @constraint0);');
    this.addSql('alter table [custom].[test2] drop column [path];');
  }

  async down(): Promise<void> {
    this.addSql('alter table [custom].[book2] alter column [double] nvarchar(max);');

    this.addSql('alter table [custom].[book2] add [foo] varchar(1) null CONSTRAINT [book2_foo_default] DEFAULT \\'lol\\';');
    this.addSql('alter table [custom].[book2] alter column [double] numeric(18,0);');

    this.addSql('alter table [custom].[test2] add [path] text(2147483647) null CONSTRAINT [test2_path_default] DEFAULT \\'NULL\\';');
  }

}
",
  "diff": {
    "down": [
      "alter table [custom].[book2] alter column [double] nvarchar(max);",
      "",
      "alter table [custom].[book2] add [foo] varchar(1) null CONSTRAINT [book2_foo_default] DEFAULT 'lol';",
      "alter table [custom].[book2] alter column [double] numeric(18,0);",
      "",
      "alter table [custom].[test2] add [path] text(2147483647) null CONSTRAINT [test2_path_default] DEFAULT 'NULL';",
    ],
    "up": [
      "alter table [custom].[book2] alter column [double] nvarchar(max);",
      "",
      "declare @constraint0 varchar(100) = (select default_constraints.name from sys.all_columns join sys.tables on all_columns.object_id = tables.object_id join sys.schemas on tables.schema_id = schemas.schema_id join sys.default_constraints on all_columns.default_object_id = default_constraints.object_id where schemas.name = 'custom' and tables.name = 'book2' and all_columns.name = 'foo') if @constraint0 is not null exec('alter table [custom].[book2] drop constraint ' + @constraint0);",
      "alter table [custom].[book2] drop column [foo];",
      "",
      "alter table [custom].[book2] alter column [double] float(53);",
      "",
      "declare @constraint0 varchar(100) = (select default_constraints.name from sys.all_columns join sys.tables on all_columns.object_id = tables.object_id join sys.schemas on tables.schema_id = schemas.schema_id join sys.default_constraints on all_columns.default_object_id = default_constraints.object_id where schemas.name = 'custom' and tables.name = 'test2' and all_columns.name = 'path') if @constraint0 is not null exec('alter table [custom].[test2] drop constraint ' + @constraint0);",
      "alter table [custom].[test2] drop column [path];",
    ],
  },
  "fileName": "migration20191013214813_custom_name.ts",
}
`;

exports[`Migrator (mssql) generate migration with custom name: migration-dump 1`] = `
{
  "code": "import { Migration } from '@mikro-orm/migrations';

export class Migration20191013214813 extends Migration {

  async up(): Promise<void> {
    this.addSql('alter table [custom].[book2] alter column [double] nvarchar(max);');

    this.addSql('declare @constraint0 varchar(100) = (select default_constraints.name from sys.all_columns join sys.tables on all_columns.object_id = tables.object_id join sys.schemas on tables.schema_id = schemas.schema_id join sys.default_constraints on all_columns.default_object_id = default_constraints.object_id where schemas.name = \\'custom\\' and tables.name = \\'book2\\' and all_columns.name = \\'foo\\') if @constraint0 is not null exec(\\'alter table [custom].[book2] drop constraint \\' + @constraint0);');
    this.addSql('alter table [custom].[book2] drop column [foo];');

    this.addSql('alter table [custom].[book2] alter column [double] float(53);');

    this.addSql('declare @constraint0 varchar(100) = (select default_constraints.name from sys.all_columns join sys.tables on all_columns.object_id = tables.object_id join sys.schemas on tables.schema_id = schemas.schema_id join sys.default_constraints on all_columns.default_object_id = default_constraints.object_id where schemas.name = \\'custom\\' and tables.name = \\'test2\\' and all_columns.name = \\'path\\') if @constraint0 is not null exec(\\'alter table [custom].[test2] drop constraint \\' + @constraint0);');
    this.addSql('alter table [custom].[test2] drop column [path];');
  }

  async down(): Promise<void> {
    this.addSql('alter table [custom].[book2] alter column [double] nvarchar(max);');

    this.addSql('alter table [custom].[book2] add [foo] varchar(1) null CONSTRAINT [book2_foo_default] DEFAULT \\'lol\\';');
    this.addSql('alter table [custom].[book2] alter column [double] numeric(18,0);');

    this.addSql('alter table [custom].[test2] add [path] text(2147483647) null CONSTRAINT [test2_path_default] DEFAULT \\'NULL\\';');
  }

}
",
  "diff": {
    "down": [
      "alter table [custom].[book2] alter column [double] nvarchar(max);",
      "",
      "alter table [custom].[book2] add [foo] varchar(1) null CONSTRAINT [book2_foo_default] DEFAULT 'lol';",
      "alter table [custom].[book2] alter column [double] numeric(18,0);",
      "",
      "alter table [custom].[test2] add [path] text(2147483647) null CONSTRAINT [test2_path_default] DEFAULT 'NULL';",
    ],
    "up": [
      "alter table [custom].[book2] alter column [double] nvarchar(max);",
      "",
      "declare @constraint0 varchar(100) = (select default_constraints.name from sys.all_columns join sys.tables on all_columns.object_id = tables.object_id join sys.schemas on tables.schema_id = schemas.schema_id join sys.default_constraints on all_columns.default_object_id = default_constraints.object_id where schemas.name = 'custom' and tables.name = 'book2' and all_columns.name = 'foo') if @constraint0 is not null exec('alter table [custom].[book2] drop constraint ' + @constraint0);",
      "alter table [custom].[book2] drop column [foo];",
      "",
      "alter table [custom].[book2] alter column [double] float(53);",
      "",
      "declare @constraint0 varchar(100) = (select default_constraints.name from sys.all_columns join sys.tables on all_columns.object_id = tables.object_id join sys.schemas on tables.schema_id = schemas.schema_id join sys.default_constraints on all_columns.default_object_id = default_constraints.object_id where schemas.name = 'custom' and tables.name = 'test2' and all_columns.name = 'path') if @constraint0 is not null exec('alter table [custom].[test2] drop constraint ' + @constraint0);",
      "alter table [custom].[test2] drop column [path];",
    ],
  },
  "fileName": "migration-20191013214813.ts",
}
`;

exports[`Migrator (mssql) generate migration with snapshot: migration-snapshot-dump-1 1`] = `
{
  "code": "import { Migration } from '@mikro-orm/migrations';

export class Migration20191013214813 extends Migration {

  async up(): Promise<void> {
    this.addSql('alter table [custom].[book2] alter column [double] nvarchar(max);');

    this.addSql('declare @constraint0 varchar(100) = (select default_constraints.name from sys.all_columns join sys.tables on all_columns.object_id = tables.object_id join sys.schemas on tables.schema_id = schemas.schema_id join sys.default_constraints on all_columns.default_object_id = default_constraints.object_id where schemas.name = \\'custom\\' and tables.name = \\'book2\\' and all_columns.name = \\'foo\\') if @constraint0 is not null exec(\\'alter table [custom].[book2] drop constraint \\' + @constraint0);');
    this.addSql('alter table [custom].[book2] drop column [foo];');

    this.addSql('alter table [custom].[book2] alter column [double] float(53);');

    this.addSql('declare @constraint0 varchar(100) = (select default_constraints.name from sys.all_columns join sys.tables on all_columns.object_id = tables.object_id join sys.schemas on tables.schema_id = schemas.schema_id join sys.default_constraints on all_columns.default_object_id = default_constraints.object_id where schemas.name = \\'custom\\' and tables.name = \\'test2\\' and all_columns.name = \\'path\\') if @constraint0 is not null exec(\\'alter table [custom].[test2] drop constraint \\' + @constraint0);');
    this.addSql('alter table [custom].[test2] drop column [path];');
  }

  async down(): Promise<void> {
    this.addSql('alter table [custom].[book2] alter column [double] nvarchar(max);');

    this.addSql('alter table [custom].[book2] add [foo] varchar(1) null CONSTRAINT [book2_foo_default] DEFAULT \\'lol\\';');
    this.addSql('alter table [custom].[book2] alter column [double] numeric(18,0);');

    this.addSql('alter table [custom].[test2] add [path] text(2147483647) null CONSTRAINT [test2_path_default] DEFAULT \\'NULL\\';');
  }

}
",
  "diff": {
    "down": [
      "alter table [custom].[book2] alter column [double] nvarchar(max);",
      "",
      "alter table [custom].[book2] add [foo] varchar(1) null CONSTRAINT [book2_foo_default] DEFAULT 'lol';",
      "alter table [custom].[book2] alter column [double] numeric(18,0);",
      "",
      "alter table [custom].[test2] add [path] text(2147483647) null CONSTRAINT [test2_path_default] DEFAULT 'NULL';",
    ],
    "up": [
      "alter table [custom].[book2] alter column [double] nvarchar(max);",
      "",
      "declare @constraint0 varchar(100) = (select default_constraints.name from sys.all_columns join sys.tables on all_columns.object_id = tables.object_id join sys.schemas on tables.schema_id = schemas.schema_id join sys.default_constraints on all_columns.default_object_id = default_constraints.object_id where schemas.name = 'custom' and tables.name = 'book2' and all_columns.name = 'foo') if @constraint0 is not null exec('alter table [custom].[book2] drop constraint ' + @constraint0);",
      "alter table [custom].[book2] drop column [foo];",
      "",
      "alter table [custom].[book2] alter column [double] float(53);",
      "",
      "declare @constraint0 varchar(100) = (select default_constraints.name from sys.all_columns join sys.tables on all_columns.object_id = tables.object_id join sys.schemas on tables.schema_id = schemas.schema_id join sys.default_constraints on all_columns.default_object_id = default_constraints.object_id where schemas.name = 'custom' and tables.name = 'test2' and all_columns.name = 'path') if @constraint0 is not null exec('alter table [custom].[test2] drop constraint ' + @constraint0);",
      "alter table [custom].[test2] drop column [path];",
    ],
  },
  "fileName": "Migration20191013214813.ts",
}
`;

exports[`Migrator (mssql) generate migration with snapshot: migration-snapshot-dump-2 1`] = `
{
  "code": "",
  "diff": {
    "down": [],
    "up": [],
  },
  "fileName": "",
}
`;

exports[`Migrator (mssql) generate schema migration: migration-dump 1`] = `
{
  "code": "import { Migration } from '@mikro-orm/migrations';

export class Migration20191013214813 extends Migration {

  async up(): Promise<void> {
    this.addSql('alter table [custom].[book2] alter column [double] nvarchar(max);');

    this.addSql('declare @constraint0 varchar(100) = (select default_constraints.name from sys.all_columns join sys.tables on all_columns.object_id = tables.object_id join sys.schemas on tables.schema_id = schemas.schema_id join sys.default_constraints on all_columns.default_object_id = default_constraints.object_id where schemas.name = \\'custom\\' and tables.name = \\'book2\\' and all_columns.name = \\'foo\\') if @constraint0 is not null exec(\\'alter table [custom].[book2] drop constraint \\' + @constraint0);');
    this.addSql('alter table [custom].[book2] drop column [foo];');

    this.addSql('alter table [custom].[book2] alter column [double] float(53);');

    this.addSql('declare @constraint0 varchar(100) = (select default_constraints.name from sys.all_columns join sys.tables on all_columns.object_id = tables.object_id join sys.schemas on tables.schema_id = schemas.schema_id join sys.default_constraints on all_columns.default_object_id = default_constraints.object_id where schemas.name = \\'custom\\' and tables.name = \\'test2\\' and all_columns.name = \\'path\\') if @constraint0 is not null exec(\\'alter table [custom].[test2] drop constraint \\' + @constraint0);');
    this.addSql('alter table [custom].[test2] drop column [path];');
  }

  async down(): Promise<void> {
    this.addSql('alter table [custom].[book2] alter column [double] nvarchar(max);');

    this.addSql('alter table [custom].[book2] add [foo] varchar(1) null CONSTRAINT [book2_foo_default] DEFAULT \\'lol\\';');
    this.addSql('alter table [custom].[book2] alter column [double] numeric(18,0);');

    this.addSql('alter table [custom].[test2] add [path] text(2147483647) null CONSTRAINT [test2_path_default] DEFAULT \\'NULL\\';');
  }

}
",
  "diff": {
    "down": [
      "alter table [custom].[book2] alter column [double] nvarchar(max);",
      "",
      "alter table [custom].[book2] add [foo] varchar(1) null CONSTRAINT [book2_foo_default] DEFAULT 'lol';",
      "alter table [custom].[book2] alter column [double] numeric(18,0);",
      "",
      "alter table [custom].[test2] add [path] text(2147483647) null CONSTRAINT [test2_path_default] DEFAULT 'NULL';",
    ],
    "up": [
      "alter table [custom].[book2] alter column [double] nvarchar(max);",
      "",
      "declare @constraint0 varchar(100) = (select default_constraints.name from sys.all_columns join sys.tables on all_columns.object_id = tables.object_id join sys.schemas on tables.schema_id = schemas.schema_id join sys.default_constraints on all_columns.default_object_id = default_constraints.object_id where schemas.name = 'custom' and tables.name = 'book2' and all_columns.name = 'foo') if @constraint0 is not null exec('alter table [custom].[book2] drop constraint ' + @constraint0);",
      "alter table [custom].[book2] drop column [foo];",
      "",
      "alter table [custom].[book2] alter column [double] float(53);",
      "",
      "declare @constraint0 varchar(100) = (select default_constraints.name from sys.all_columns join sys.tables on all_columns.object_id = tables.object_id join sys.schemas on tables.schema_id = schemas.schema_id join sys.default_constraints on all_columns.default_object_id = default_constraints.object_id where schemas.name = 'custom' and tables.name = 'test2' and all_columns.name = 'path') if @constraint0 is not null exec('alter table [custom].[test2] drop constraint ' + @constraint0);",
      "alter table [custom].[test2] drop column [path];",
    ],
  },
  "fileName": "Migration20191013214813.ts",
}
`;

exports[`Migrator (mssql) up/down params [all or nothing disabled]: all-or-nothing-disabled 1`] = `
[
  "select 1 from sys.databases where name = N'mikro_orm_test_migrations'",
  "select t.name as table_name, schema_name(t2.schema_id) schema_name, ep.value as table_comment from sysobjects t inner join sys.tables t2 on t2.object_id = t.id left join sys.extended_properties ep on ep.major_id = t.id and ep.name = 'MS_Description' and ep.minor_id = 0",
  "select name as schema_name from sys.schemas order by name",
  "create table [custom].[mikro_orm_migrations] ([id] int identity(1,1) not null primary key, [name] nvarchar(255), [executed_at] datetime2 constraint [mikro_orm_migrations_executed_at_default] default current_timestamp)",
  "select * from [custom].[mikro_orm_migrations] order by [id] asc",
  "begin",
  "select 1",
  "commit",
  "insert into [custom].[mikro_orm_migrations] ([name]) values (@p0)",
  "select t.name as table_name, schema_name(t2.schema_id) schema_name, ep.value as table_comment from sysobjects t inner join sys.tables t2 on t2.object_id = t.id left join sys.extended_properties ep on ep.major_id = t.id and ep.name = 'MS_Description' and ep.minor_id = 0",
  "select * from [custom].[mikro_orm_migrations] order by [id] asc",
  "begin",
  "select 1",
  "commit",
  "delete from [custom].[mikro_orm_migrations] where [name] in (@p0, @p1, @p2, @p3);select @@rowcount",
  "select t.name as table_name, schema_name(t2.schema_id) schema_name, ep.value as table_comment from sysobjects t inner join sys.tables t2 on t2.object_id = t.id left join sys.extended_properties ep on ep.major_id = t.id and ep.name = 'MS_Description' and ep.minor_id = 0",
  "select * from [custom].[mikro_orm_migrations] order by [id] asc",
  "begin",
  "select 1",
  "commit",
  "insert into [custom].[mikro_orm_migrations] ([name]) values (@p0)",
  "select t.name as table_name, schema_name(t2.schema_id) schema_name, ep.value as table_comment from sysobjects t inner join sys.tables t2 on t2.object_id = t.id left join sys.extended_properties ep on ep.major_id = t.id and ep.name = 'MS_Description' and ep.minor_id = 0",
  "select * from [custom].[mikro_orm_migrations] order by [id] asc",
  "begin",
  "select 1",
  "commit",
  "delete from [custom].[mikro_orm_migrations] where [name] in (@p0, @p1, @p2, @p3);select @@rowcount",
  "select t.name as table_name, schema_name(t2.schema_id) schema_name, ep.value as table_comment from sysobjects t inner join sys.tables t2 on t2.object_id = t.id left join sys.extended_properties ep on ep.major_id = t.id and ep.name = 'MS_Description' and ep.minor_id = 0",
  "select * from [custom].[mikro_orm_migrations] order by [id] asc",
  "begin",
  "select 1",
  "commit",
  "insert into [custom].[mikro_orm_migrations] ([name]) values (@p0)",
  "select t.name as table_name, schema_name(t2.schema_id) schema_name, ep.value as table_comment from sysobjects t inner join sys.tables t2 on t2.object_id = t.id left join sys.extended_properties ep on ep.major_id = t.id and ep.name = 'MS_Description' and ep.minor_id = 0",
  "select * from [custom].[mikro_orm_migrations] order by [id] asc",
  "select t.name as table_name, schema_name(t2.schema_id) schema_name, ep.value as table_comment from sysobjects t inner join sys.tables t2 on t2.object_id = t.id left join sys.extended_properties ep on ep.major_id = t.id and ep.name = 'MS_Description' and ep.minor_id = 0",
  "select * from [custom].[mikro_orm_migrations] order by [id] asc",
  "begin",
  "select 1",
  "commit",
  "delete from [custom].[mikro_orm_migrations] where [name] in (@p0, @p1, @p2, @p3);select @@rowcount",
]
`;

exports[`Migrator (mssql) up/down params [all or nothing enabled]: all-or-nothing 1`] = `
[
  "select 1 from sys.databases where name = N'mikro_orm_test_migrations'",
  "select t.name as table_name, schema_name(t2.schema_id) schema_name, ep.value as table_comment from sysobjects t inner join sys.tables t2 on t2.object_id = t.id left join sys.extended_properties ep on ep.major_id = t.id and ep.name = 'MS_Description' and ep.minor_id = 0",
  "select name as schema_name from sys.schemas order by name",
  "create table [custom].[mikro_orm_migrations] ([id] int identity(1,1) not null primary key, [name] nvarchar(255), [executed_at] datetime2 constraint [mikro_orm_migrations_executed_at_default] default current_timestamp)",
  "begin",
  "select * from [custom].[mikro_orm_migrations] order by [id] asc",
  "save transaction [trx_xx]",
  "select 1",
  "commit",
  "insert into [custom].[mikro_orm_migrations] ([name]) values (@p0)",
  "commit",
  "select t.name as table_name, schema_name(t2.schema_id) schema_name, ep.value as table_comment from sysobjects t inner join sys.tables t2 on t2.object_id = t.id left join sys.extended_properties ep on ep.major_id = t.id and ep.name = 'MS_Description' and ep.minor_id = 0",
  "begin",
  "select * from [custom].[mikro_orm_migrations] order by [id] asc",
  "save transaction [trx_xx]",
  "select 1",
  "commit",
  "delete from [custom].[mikro_orm_migrations] where [name] in (@p0, @p1, @p2, @p3);select @@rowcount",
  "commit",
  "select t.name as table_name, schema_name(t2.schema_id) schema_name, ep.value as table_comment from sysobjects t inner join sys.tables t2 on t2.object_id = t.id left join sys.extended_properties ep on ep.major_id = t.id and ep.name = 'MS_Description' and ep.minor_id = 0",
  "begin",
  "select * from [custom].[mikro_orm_migrations] order by [id] asc",
  "save transaction [trx_xx]",
  "select 1",
  "commit",
  "insert into [custom].[mikro_orm_migrations] ([name]) values (@p0)",
  "commit",
  "select t.name as table_name, schema_name(t2.schema_id) schema_name, ep.value as table_comment from sysobjects t inner join sys.tables t2 on t2.object_id = t.id left join sys.extended_properties ep on ep.major_id = t.id and ep.name = 'MS_Description' and ep.minor_id = 0",
  "begin",
  "select * from [custom].[mikro_orm_migrations] order by [id] asc",
  "save transaction [trx_xx]",
  "select 1",
  "commit",
  "delete from [custom].[mikro_orm_migrations] where [name] in (@p0, @p1, @p2, @p3);select @@rowcount",
  "commit",
  "select t.name as table_name, schema_name(t2.schema_id) schema_name, ep.value as table_comment from sysobjects t inner join sys.tables t2 on t2.object_id = t.id left join sys.extended_properties ep on ep.major_id = t.id and ep.name = 'MS_Description' and ep.minor_id = 0",
  "begin",
  "select * from [custom].[mikro_orm_migrations] order by [id] asc",
  "save transaction [trx_xx]",
  "select 1",
  "commit",
  "insert into [custom].[mikro_orm_migrations] ([name]) values (@p0)",
  "commit",
  "select t.name as table_name, schema_name(t2.schema_id) schema_name, ep.value as table_comment from sysobjects t inner join sys.tables t2 on t2.object_id = t.id left join sys.extended_properties ep on ep.major_id = t.id and ep.name = 'MS_Description' and ep.minor_id = 0",
  "begin",
  "select * from [custom].[mikro_orm_migrations] order by [id] asc",
  "commit",
  "select t.name as table_name, schema_name(t2.schema_id) schema_name, ep.value as table_comment from sysobjects t inner join sys.tables t2 on t2.object_id = t.id left join sys.extended_properties ep on ep.major_id = t.id and ep.name = 'MS_Description' and ep.minor_id = 0",
  "begin",
  "select * from [custom].[mikro_orm_migrations] order by [id] asc",
  "save transaction [trx_xx]",
  "select 1",
  "commit",
  "delete from [custom].[mikro_orm_migrations] where [name] in (@p0, @p1, @p2, @p3);select @@rowcount",
  "commit",
]
`;

exports[`Migrator (mssql) up/down with explicit transaction: explicit-tx 1`] = `
[
  "begin",
  "select 1 from sys.databases where name = N'mikro_orm_test_migrations'",
  "select t.name as table_name, schema_name(t2.schema_id) schema_name, ep.value as table_comment from sysobjects t inner join sys.tables t2 on t2.object_id = t.id left join sys.extended_properties ep on ep.major_id = t.id and ep.name = 'MS_Description' and ep.minor_id = 0",
  "select name as schema_name from sys.schemas order by name",
  "create table [custom].[mikro_orm_migrations] ([id] int identity(1,1) not null primary key, [name] nvarchar(255), [executed_at] datetime2 constraint [mikro_orm_migrations_executed_at_default] default current_timestamp)",
  "select * from [custom].[mikro_orm_migrations] order by [id] asc",
  "save transaction [trx_xx]",
  "select 1",
  "commit",
  "insert into [custom].[mikro_orm_migrations] ([name]) values (@p0)",
  "save transaction [trx_xx]",
  "select 1",
  "commit",
  "insert into [custom].[mikro_orm_migrations] ([name]) values (@p0)",
  "select t.name as table_name, schema_name(t2.schema_id) schema_name, ep.value as table_comment from sysobjects t inner join sys.tables t2 on t2.object_id = t.id left join sys.extended_properties ep on ep.major_id = t.id and ep.name = 'MS_Description' and ep.minor_id = 0",
  "select * from [custom].[mikro_orm_migrations] order by [id] asc",
  "save transaction [trx_xx]",
  "select 1",
  "commit",
  "delete from [custom].[mikro_orm_migrations] where [name] in (@p0, @p1, @p2, @p3);select @@rowcount",
  "select t.name as table_name, schema_name(t2.schema_id) schema_name, ep.value as table_comment from sysobjects t inner join sys.tables t2 on t2.object_id = t.id left join sys.extended_properties ep on ep.major_id = t.id and ep.name = 'MS_Description' and ep.minor_id = 0",
  "select * from [custom].[mikro_orm_migrations] order by [id] asc",
  "save transaction [trx_xx]",
  "select 1",
  "commit",
  "delete from [custom].[mikro_orm_migrations] where [name] in (@p0, @p1, @p2, @p3);select @@rowcount",
  "select t.name as table_name, schema_name(t2.schema_id) schema_name, ep.value as table_comment from sysobjects t inner join sys.tables t2 on t2.object_id = t.id left join sys.extended_properties ep on ep.major_id = t.id and ep.name = 'MS_Description' and ep.minor_id = 0",
  "select * from [custom].[mikro_orm_migrations] order by [id] asc",
  "commit",
]
`;
