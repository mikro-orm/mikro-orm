// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`EntityGenerator enum with default value [postgres]: postgres-entity-dump-enum-default-value 1`] = `
[
  "import { Entity, Enum, type Opt, PrimaryKey, Property } from '@mikro-orm/core';

@Entity()
export class Publisher2 {

  @PrimaryKey()
  id!: number;

  @Property({ type: 'string', nullable: true })
  test?: string & Opt = '123';

  @Enum({ items: () => Publisher2Type })
  type: Publisher2Type & Opt = Publisher2Type.LOCAL;

  @Enum({ items: () => Publisher2Type2, nullable: true })
  type2?: Publisher2Type2 & Opt = Publisher2Type2.LOCAL;

}

export enum Publisher2Type {
  LOCAL = 'local',
  GLOBAL = 'global',
}

export enum Publisher2Type2 {
  LOCAL = 'LOCAL',
  GLOBAL = 'GLOBAL',
}
",
]
`;

exports[`EntityGenerator generate entities from schema [postgres]: postgres-entity-dump 1`] = `
[
  "import { Entity, OneToOne, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Author2 } from './Author2';

@Entity()
export class Address2 {

  [PrimaryKeyProp]?: 'author';

  @OneToOne({ entity: () => Author2, updateRule: 'cascade', deleteRule: 'cascade', primary: true })
  author!: Author2;

  @Property({ length: 255 })
  value!: string;

}
",
  "import { Collection, Entity, Index, ManyToMany, ManyToOne, type Opt, PrimaryKey, Property, Unique } from '@mikro-orm/core';
import { Book2 } from './Book2';

@Entity()
@Index({ name: 'author2_name_age_index', properties: ['name', 'age'] })
@Unique({ name: 'author2_name_email_unique', properties: ['name', 'email'] })
export class Author2 {

  @PrimaryKey()
  id!: number;

  @Property({ type: 'Date', length: 3, defaultRaw: \`current_timestamp(3)\` })
  createdAt!: Date & Opt;

  @Property({ type: 'Date', length: 3, defaultRaw: \`current_timestamp(3)\` })
  updatedAt!: Date & Opt;

  @Index({ name: 'custom_idx_name_123' })
  @Property({ length: 255 })
  name!: string;

  @Index({ name: 'custom_email_index_name' })
  @Unique({ name: 'custom_email_unique_name' })
  @Property({ length: 255 })
  email!: string;

  @Property({ nullable: true })
  age?: number;

  @Index({ name: 'author2_terms_accepted_index' })
  @Property({ type: 'boolean' })
  termsAccepted: boolean & Opt = false;

  @Property({ nullable: true })
  optional?: boolean;

  @Property({ nullable: true })
  identities?: string[];

  @Index({ name: 'author2_born_index' })
  @Property({ columnType: 'date', nullable: true })
  born?: string;

  @Index({ name: 'born_time_idx' })
  @Property({ columnType: 'time(0)', nullable: true })
  bornTime?: string;

  @ManyToOne({ entity: () => Book2, deleteRule: 'cascade', nullable: true })
  favouriteBook?: Book2;

  @ManyToOne({ entity: () => Author2, updateRule: 'cascade', deleteRule: 'set null', nullable: true })
  favouriteAuthor?: Author2;

  @Property({ columnType: 'jsonb', nullable: true })
  identity?: any;

  @ManyToMany({ entity: () => Author2, pivotTable: 'author_to_friend', joinColumn: 'author2_1_id', inverseJoinColumn: 'author2_2_id' })
  authorToFriend = new Collection<Author2>(this);

  @ManyToMany({ entity: () => Author2, joinColumn: 'author2_1_id', inverseJoinColumn: 'author2_2_id' })
  following = new Collection<Author2>(this);

}
",
  "import { Entity, PrimaryKey, Property } from '@mikro-orm/core';

@Entity()
export class BookTag2 {

  @PrimaryKey()
  id!: bigint;

  @Property({ length: 50 })
  name!: string;

}
",
  "import { Collection, Entity, ManyToMany, ManyToOne, type Opt, PrimaryKey, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Author2 } from './Author2';
import { BookTag2 } from './BookTag2';
import { Publisher2 } from './Publisher2';

@Entity()
export class Book2 {

  [PrimaryKeyProp]?: 'uuidPk';

  @PrimaryKey({ columnType: 'uuid' })
  uuidPk!: string;

  @Property({ type: 'Date', length: 3, defaultRaw: \`current_timestamp(3)\` })
  createdAt!: Date & Opt;

  @Property({ type: 'string', length: 255, nullable: true })
  title?: string & Opt = '';

  @Property({ columnType: 'text', nullable: true })
  perex?: string;

  @Property({ columnType: 'numeric(8,2)', nullable: true })
  price?: string;

  @Property({ columnType: 'numeric(10,0)', nullable: true })
  double?: string;

  @Property({ columnType: 'jsonb', nullable: true })
  meta?: any;

  @ManyToOne({ entity: () => Author2 })
  author!: Author2;

  @ManyToOne({ entity: () => Publisher2, updateRule: 'cascade', deleteRule: 'cascade', nullable: true })
  publisher?: Publisher2;

  @Property({ type: 'string', length: 255, nullable: true })
  foo?: string & Opt = 'lol';

  @ManyToMany({ entity: () => BookTag2, pivotTable: 'book_to_tag_unordered', joinColumn: 'book2_uuid_pk', inverseJoinColumn: 'book_tag2_id' })
  bookToTagUnordered = new Collection<BookTag2>(this);

}
",
  "import { Entity, ManyToOne, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';
import { Book2 } from './Book2';
import { BookTag2 } from './BookTag2';

@Entity({ tableName: 'book2_tags' })
export class Book2Tags {

  [PrimaryKeyProp]?: 'order';

  @PrimaryKey()
  order!: number;

  @ManyToOne({ entity: () => Book2, updateRule: 'cascade', deleteRule: 'cascade' })
  book2!: Book2;

  @ManyToOne({ entity: () => BookTag2, updateRule: 'cascade', deleteRule: 'cascade' })
  bookTag2!: BookTag2;

}
",
  "import { Entity, ManyToOne, PrimaryKey, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Test2 } from './Test2';

@Entity()
export class Configuration2 {

  [PrimaryKeyProp]?: ['property', 'test'];

  @PrimaryKey({ length: 255 })
  property!: string;

  @ManyToOne({ entity: () => Test2, updateRule: 'cascade', primary: true })
  test!: Test2;

  @Property({ length: 255 })
  value!: string;

}
",
  "import { Entity, OneToOne, type Opt, PrimaryKey, Property } from '@mikro-orm/core';
import { FooBaz2 } from './FooBaz2';

@Entity()
export class FooBar2 {

  @PrimaryKey()
  id!: number;

  @Property({ length: 255 })
  name!: string;

  @Property({ fieldName: 'name with space', length: 255, nullable: true })
  nameWithSpace?: string;

  @OneToOne({ entity: () => FooBaz2, updateRule: 'cascade', deleteRule: 'set null', nullable: true })
  baz?: FooBaz2;

  @OneToOne({ entity: () => FooBar2, updateRule: 'cascade', deleteRule: 'set null', nullable: true })
  fooBar?: FooBar2;

  @Property({ type: 'Date', length: 0, defaultRaw: \`current_timestamp(0)\` })
  version!: Date & Opt;

  @Property({ nullable: true })
  blob?: Buffer;

  @Property({ nullable: true })
  blob2?: Buffer;

  @Property({ nullable: true })
  array?: string[];

  @Property({ columnType: 'jsonb', nullable: true })
  objectProperty?: any;

}
",
  "import { Entity, type Opt, PrimaryKey, Property } from '@mikro-orm/core';

@Entity()
export class FooBaz2 {

  @PrimaryKey()
  id!: number;

  @Property({ length: 255 })
  name!: string;

  @Property({ type: 'Date', length: 3, defaultRaw: \`current_timestamp(3)\` })
  version!: Date & Opt;

}
",
  "import { Entity, ManyToOne, type Opt, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { FooBar2 } from './FooBar2';
import { FooBaz2 } from './FooBaz2';

@Entity()
export class FooParam2 {

  [PrimaryKeyProp]?: ['bar', 'baz'];

  @ManyToOne({ entity: () => FooBar2, updateRule: 'cascade', primary: true })
  bar!: FooBar2;

  @ManyToOne({ entity: () => FooBaz2, updateRule: 'cascade', primary: true })
  baz!: FooBaz2;

  @Property({ length: 255 })
  value!: string;

  @Property({ type: 'Date', length: 3, defaultRaw: \`current_timestamp(3)\` })
  version!: Date & Opt;

}
",
  "import { Entity, PrimaryKey, Property } from '@mikro-orm/core';

@Entity()
export class Label2 {

  @PrimaryKey({ columnType: 'uuid' })
  uuid!: string;

  @Property({ length: 255 })
  name!: string;

}
",
  "import { Entity, ManyToOne, PrimaryKey } from '@mikro-orm/core';
import { Label2 } from './Label2';
import { Test2 } from './Test2';

@Entity({ tableName: 'label2_tests', schema: 'label_schema' })
export class Label2Tests {

  @PrimaryKey()
  id!: number;

  @ManyToOne({ entity: () => Label2, updateRule: 'cascade', deleteRule: 'cascade' })
  label2!: Label2;

  @ManyToOne({ entity: () => Test2, updateRule: 'cascade', deleteRule: 'cascade' })
  test2!: Test2;

}
",
  "import { Entity, Enum, PrimaryKey, Property } from '@mikro-orm/core';

@Entity()
export class Publisher2 {

  @PrimaryKey()
  id!: number;

  @Property({ length: 255 })
  name!: string;

  @Enum({ items: () => Publisher2Type })
  type!: Publisher2Type;

  @Enum({ items: () => Publisher2Type2 })
  type2!: Publisher2Type2;

  @Property({ columnType: 'smallint', nullable: true })
  enum1?: number;

  @Property({ columnType: 'smallint', nullable: true })
  enum2?: number;

  @Property({ columnType: 'smallint', nullable: true })
  enum3?: number;

  @Enum({ items: () => Publisher2Enum4, nullable: true })
  enum4?: Publisher2Enum4;

  @Enum({ items: () => Publisher2Enum5, nullable: true })
  enum5?: Publisher2Enum5;

}

export enum Publisher2Type {
  LOCAL = 'local',
  GLOBAL = 'global',
}

export enum Publisher2Type2 {
  LOCAL = 'LOCAL',
  GLOBAL = 'GLOBAL',
}

export enum Publisher2Enum4 {
  A = 'a',
  B = 'b',
  C = 'c',
}

export enum Publisher2Enum5 {
  A = 'a',
}
",
  "import { Entity, ManyToOne, PrimaryKey } from '@mikro-orm/core';
import { Publisher2 } from './Publisher2';
import { Test2 } from './Test2';

@Entity({ tableName: 'publisher2_tests' })
export class Publisher2Tests {

  @PrimaryKey()
  id!: number;

  @ManyToOne({ entity: () => Publisher2, updateRule: 'cascade', deleteRule: 'cascade' })
  publisher2!: Publisher2;

  @ManyToOne({ entity: () => Test2, updateRule: 'cascade', deleteRule: 'cascade' })
  test2!: Test2;

}
",
  "import { Collection, Entity, ManyToMany, ManyToOne, OneToOne, type Opt, PrimaryKey, Property } from '@mikro-orm/core';
import { Book2 } from './Book2';
import { FooBar2 } from './FooBar2';

@Entity()
export class Test2 {

  @PrimaryKey()
  id!: number;

  @Property({ length: 255, nullable: true })
  name?: string;

  @OneToOne({ entity: () => Book2, deleteRule: 'set null', nullable: true })
  book?: Book2;

  @ManyToOne({ entity: () => Test2, updateRule: 'cascade', deleteRule: 'set null', nullable: true })
  parent?: Test2;

  @Property({ type: 'number' })
  version: number & Opt = 1;

  @Property({ columnType: 'polygon', nullable: true })
  path?: unknown;

  @ManyToMany({ entity: () => FooBar2, joinColumn: 'test2_id', inverseJoinColumn: 'foo_bar2_id' })
  bars = new Collection<FooBar2>(this);

}
",
]
`;

exports[`EntityGenerator skipTables [postgres]: postgres-entity-dump-skipTables 1`] = `
[
  "import { Entity, OneToOne, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Author2 } from './Author2';

@Entity()
export class Address2 {

  [PrimaryKeyProp]?: 'author';

  @OneToOne({ entity: () => Author2, updateRule: 'cascade', deleteRule: 'cascade', primary: true })
  author!: Author2;

  @Property({ length: 255 })
  value!: string;

}
",
  "import { Collection, Entity, Index, ManyToMany, ManyToOne, type Opt, PrimaryKey, Property, Unique } from '@mikro-orm/core';
import { Book2 } from './Book2';

@Entity()
@Index({ name: 'author2_name_age_index', properties: ['name', 'age'] })
@Unique({ name: 'author2_name_email_unique', properties: ['name', 'email'] })
export class Author2 {

  @PrimaryKey()
  id!: number;

  @Property({ type: 'Date', length: 3, defaultRaw: \`current_timestamp(3)\` })
  createdAt!: Date & Opt;

  @Property({ type: 'Date', length: 3, defaultRaw: \`current_timestamp(3)\` })
  updatedAt!: Date & Opt;

  @Index({ name: 'custom_idx_name_123' })
  @Property({ length: 255 })
  name!: string;

  @Index({ name: 'custom_email_index_name' })
  @Unique({ name: 'custom_email_unique_name' })
  @Property({ length: 255 })
  email!: string;

  @Property({ nullable: true })
  age?: number;

  @Index({ name: 'author2_terms_accepted_index' })
  @Property({ type: 'boolean' })
  termsAccepted: boolean & Opt = false;

  @Property({ nullable: true })
  optional?: boolean;

  @Property({ nullable: true })
  identities?: string[];

  @Index({ name: 'author2_born_index' })
  @Property({ columnType: 'date', nullable: true })
  born?: string;

  @Index({ name: 'born_time_idx' })
  @Property({ columnType: 'time(0)', nullable: true })
  bornTime?: string;

  @ManyToOne({ entity: () => Book2, deleteRule: 'cascade', nullable: true })
  favouriteBook?: Book2;

  @ManyToOne({ entity: () => Author2, updateRule: 'cascade', deleteRule: 'set null', nullable: true })
  favouriteAuthor?: Author2;

  @Property({ columnType: 'jsonb', nullable: true })
  identity?: any;

  @ManyToMany({ entity: () => Author2, pivotTable: 'author_to_friend', joinColumn: 'author2_1_id', inverseJoinColumn: 'author2_2_id' })
  authorToFriend = new Collection<Author2>(this);

  @ManyToMany({ entity: () => Author2, joinColumn: 'author2_1_id', inverseJoinColumn: 'author2_2_id' })
  following = new Collection<Author2>(this);

}
",
  "import { Entity, PrimaryKey, Property } from '@mikro-orm/core';

@Entity()
export class BookTag2 {

  @PrimaryKey()
  id!: bigint;

  @Property({ length: 50 })
  name!: string;

}
",
  "import { Collection, Entity, ManyToMany, ManyToOne, type Opt, PrimaryKey, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Author2 } from './Author2';
import { BookTag2 } from './BookTag2';
import { Publisher2 } from './Publisher2';

@Entity()
export class Book2 {

  [PrimaryKeyProp]?: 'uuidPk';

  @PrimaryKey({ columnType: 'uuid' })
  uuidPk!: string;

  @Property({ type: 'Date', length: 3, defaultRaw: \`current_timestamp(3)\` })
  createdAt!: Date & Opt;

  @Property({ type: 'string', length: 255, nullable: true })
  title?: string & Opt = '';

  @Property({ columnType: 'text', nullable: true })
  perex?: string;

  @Property({ columnType: 'numeric(10,0)', nullable: true })
  double?: string;

  @Property({ columnType: 'jsonb', nullable: true })
  meta?: any;

  @ManyToOne({ entity: () => Author2 })
  author!: Author2;

  @ManyToOne({ entity: () => Publisher2, updateRule: 'cascade', deleteRule: 'cascade', nullable: true })
  publisher?: Publisher2;

  @Property({ type: 'string', length: 255, nullable: true })
  foo?: string & Opt = 'lol';

  @ManyToMany({ entity: () => BookTag2, pivotTable: 'book_to_tag_unordered', joinColumn: 'book2_uuid_pk', inverseJoinColumn: 'book_tag2_id' })
  bookToTagUnordered = new Collection<BookTag2>(this);

}
",
  "import { Entity, ManyToOne, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';
import { Book2 } from './Book2';
import { BookTag2 } from './BookTag2';

@Entity({ tableName: 'book2_tags' })
export class Book2Tags {

  [PrimaryKeyProp]?: 'order';

  @PrimaryKey()
  order!: number;

  @ManyToOne({ entity: () => Book2, updateRule: 'cascade', deleteRule: 'cascade' })
  book2!: Book2;

  @ManyToOne({ entity: () => BookTag2, updateRule: 'cascade', deleteRule: 'cascade' })
  bookTag2!: BookTag2;

}
",
  "import { Entity, ManyToOne, PrimaryKey, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Test2 } from './Test2';

@Entity()
export class Configuration2 {

  [PrimaryKeyProp]?: ['property', 'test'];

  @PrimaryKey({ length: 255 })
  property!: string;

  @ManyToOne({ entity: () => Test2, updateRule: 'cascade', primary: true })
  test!: Test2;

  @Property({ length: 255 })
  value!: string;

}
",
  "import { Entity, OneToOne, type Opt, PrimaryKey, Property } from '@mikro-orm/core';
import { FooBaz2 } from './FooBaz2';

@Entity()
export class FooBar2 {

  @PrimaryKey()
  id!: number;

  @Property({ length: 255 })
  name!: string;

  @Property({ fieldName: 'name with space', length: 255, nullable: true })
  nameWithSpace?: string;

  @OneToOne({ entity: () => FooBaz2, updateRule: 'cascade', deleteRule: 'set null', nullable: true })
  baz?: FooBaz2;

  @OneToOne({ entity: () => FooBar2, updateRule: 'cascade', deleteRule: 'set null', nullable: true })
  fooBar?: FooBar2;

  @Property({ type: 'Date', length: 0, defaultRaw: \`current_timestamp(0)\` })
  version!: Date & Opt;

  @Property({ nullable: true })
  blob?: Buffer;

  @Property({ nullable: true })
  blob2?: Buffer;

  @Property({ nullable: true })
  array?: string[];

  @Property({ columnType: 'jsonb', nullable: true })
  objectProperty?: any;

}
",
  "import { Entity, type Opt, PrimaryKey, Property } from '@mikro-orm/core';

@Entity()
export class FooBaz2 {

  @PrimaryKey()
  id!: number;

  @Property({ length: 255 })
  name!: string;

  @Property({ type: 'Date', length: 3, defaultRaw: \`current_timestamp(3)\` })
  version!: Date & Opt;

}
",
  "import { Entity, ManyToOne, type Opt, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { FooBar2 } from './FooBar2';
import { FooBaz2 } from './FooBaz2';

@Entity()
export class FooParam2 {

  [PrimaryKeyProp]?: ['bar', 'baz'];

  @ManyToOne({ entity: () => FooBar2, updateRule: 'cascade', primary: true })
  bar!: FooBar2;

  @ManyToOne({ entity: () => FooBaz2, updateRule: 'cascade', primary: true })
  baz!: FooBaz2;

  @Property({ length: 255 })
  value!: string;

  @Property({ type: 'Date', length: 3, defaultRaw: \`current_timestamp(3)\` })
  version!: Date & Opt;

}
",
  "import { Entity, PrimaryKey, Property } from '@mikro-orm/core';

@Entity()
export class Label2 {

  @PrimaryKey({ columnType: 'uuid' })
  uuid!: string;

  @Property({ length: 255 })
  name!: string;

}
",
  "import { Entity, ManyToOne, PrimaryKey } from '@mikro-orm/core';
import { Label2 } from './Label2';
import { Test2 } from './Test2';

@Entity({ tableName: 'label2_tests', schema: 'label_schema' })
export class Label2Tests {

  @PrimaryKey()
  id!: number;

  @ManyToOne({ entity: () => Label2, updateRule: 'cascade', deleteRule: 'cascade' })
  label2!: Label2;

  @ManyToOne({ entity: () => Test2, updateRule: 'cascade', deleteRule: 'cascade' })
  test2!: Test2;

}
",
  "import { Entity, Enum, PrimaryKey, Property } from '@mikro-orm/core';

@Entity()
export class Publisher2 {

  @PrimaryKey()
  id!: number;

  @Property({ length: 255 })
  name!: string;

  @Enum({ items: () => Publisher2Type })
  type!: Publisher2Type;

  @Enum({ items: () => Publisher2Type2 })
  type2!: Publisher2Type2;

  @Property({ columnType: 'smallint', nullable: true })
  enum1?: number;

  @Property({ columnType: 'smallint', nullable: true })
  enum2?: number;

  @Property({ columnType: 'smallint', nullable: true })
  enum3?: number;

  @Enum({ items: () => Publisher2Enum4, nullable: true })
  enum4?: Publisher2Enum4;

  @Enum({ items: () => Publisher2Enum5, nullable: true })
  enum5?: Publisher2Enum5;

}

export enum Publisher2Type {
  LOCAL = 'local',
  GLOBAL = 'global',
}

export enum Publisher2Type2 {
  LOCAL = 'LOCAL',
  GLOBAL = 'GLOBAL',
}

export enum Publisher2Enum4 {
  A = 'a',
  B = 'b',
  C = 'c',
}

export enum Publisher2Enum5 {
  A = 'a',
}
",
  "import { Entity, ManyToOne, PrimaryKey } from '@mikro-orm/core';
import { Publisher2 } from './Publisher2';
import { Test2 } from './Test2';

@Entity({ tableName: 'publisher2_tests' })
export class Publisher2Tests {

  @PrimaryKey()
  id!: number;

  @ManyToOne({ entity: () => Publisher2, updateRule: 'cascade', deleteRule: 'cascade' })
  publisher2!: Publisher2;

  @ManyToOne({ entity: () => Test2, updateRule: 'cascade', deleteRule: 'cascade' })
  test2!: Test2;

}
",
]
`;
