// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ScalarPropsForFks generate entities with columns for all composite foreign key properties [mysql]: mysql-entity-composite-fk-prop-always-dump 1`] = `
[
  "import { Entity, OneToOne, PrimaryKey, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Author2 } from './Author2';

@Entity()
export class Address2 {

  [PrimaryKeyProp]?: ['authorId', 'author'];

  @PrimaryKey()
  authorId!: number;

  @Property({ length: 255 })
  value!: string;

  @OneToOne({ entity: () => Author2, updateRule: 'cascade', deleteRule: 'cascade', primary: true })
  author!: Author2;

}
",
  "import { Collection, Entity, Index, ManyToMany, ManyToOne, OptionalProps, PrimaryKey, Property, Unique } from '@mikro-orm/core';
import { Book2 } from './Book2';

@Entity()
@Index({ name: 'author2_name_age_index', properties: ['name', 'age'] })
@Unique({ name: 'author2_name_email_unique', properties: ['name', 'email'] })
export class Author2 {

  [OptionalProps]?: 'createdAt' | 'termsAccepted' | 'updatedAt';

  @PrimaryKey()
  id!: number;

  @Property({ length: 3, defaultRaw: \`current_timestamp(3)\` })
  createdAt!: Date;

  @Property({ length: 3, defaultRaw: \`current_timestamp(3)\` })
  updatedAt!: Date;

  @Index({ name: 'custom_idx_name_123' })
  @Property({ length: 255 })
  name!: string;

  @Index({ name: 'custom_email_index_name' })
  @Unique({ name: 'custom_email_unique_name' })
  @Property({ length: 255 })
  email!: string;

  @Property({ nullable: true })
  age?: number;

  @Index({ name: 'author2_terms_accepted_index' })
  @Property({ default: false })
  termsAccepted: boolean = false;

  @Property({ nullable: true })
  optional?: boolean;

  @Property({ columnType: 'text', nullable: true })
  identities?: string;

  @Index({ name: 'author2_born_index' })
  @Property({ columnType: 'date', nullable: true })
  born?: string;

  @Index({ name: 'born_time_idx' })
  @Property({ columnType: 'time', nullable: true })
  bornTime?: string;

  @Index({ name: 'author2_favourite_book_uuid_pk_index' })
  @Property({ length: 36, nullable: true })
  favouriteBookUuidPk?: string;

  @Index({ name: 'author2_favourite_author_id_index' })
  @Property({ nullable: true })
  favouriteAuthorId?: number;

  @Property({ columnType: 'json', nullable: true })
  identity?: any;

  @ManyToOne({ entity: () => Author2, updateRule: 'cascade', deleteRule: 'set null', nullable: true })
  favouriteAuthor?: Author2;

  @ManyToOne({ entity: () => Book2, deleteRule: 'cascade', nullable: true })
  favouriteBook?: Book2;

  @ManyToMany({ entity: () => Author2, pivotTable: 'author_to_friend', joinColumn: 'author2_1_id', inverseJoinColumn: 'author2_2_id' })
  authorToFriend = new Collection<Author2>(this);

  @ManyToMany({ entity: () => Author2, joinColumn: 'author2_1_id', inverseJoinColumn: 'author2_2_id' })
  following = new Collection<Author2>(this);

}
",
  "import { Entity, Enum, Index, ManyToOne, OneToOne, PrimaryKey, Property, Unique } from '@mikro-orm/core';

@Entity()
export class BaseUser2 {

  @PrimaryKey()
  id!: number;

  @Property({ length: 100 })
  firstName!: string;

  @Property({ length: 100 })
  lastName!: string;

  @Index({ name: 'base_user2_type_index' })
  @Enum({ items: () => BaseUser2Type })
  type!: BaseUser2Type;

  @Property({ length: 255, nullable: true })
  ownerProp?: string;

  @Index({ name: 'base_user2_favourite_employee_id_index' })
  @Property({ nullable: true })
  favouriteEmployeeId?: number;

  @Unique({ name: 'base_user2_favourite_manager_id_unique' })
  @Property({ nullable: true })
  favouriteManagerId?: number;

  @Property({ nullable: true })
  employeeProp?: number;

  @Property({ length: 255, nullable: true })
  managerProp?: string;

  @ManyToOne({ entity: () => BaseUser2, updateRule: 'cascade', deleteRule: 'set null', nullable: true })
  favouriteEmployee?: BaseUser2;

  @OneToOne({ entity: () => BaseUser2, updateRule: 'cascade', deleteRule: 'set null', nullable: true })
  favouriteManager?: BaseUser2;

}

export enum BaseUser2Type {
  EMPLOYEE = 'employee',
  MANAGER = 'manager',
  OWNER = 'owner',
}
",
  "import { Entity, PrimaryKey, Property } from '@mikro-orm/core';

@Entity()
export class BookTag2 {

  @PrimaryKey()
  id!: bigint;

  @Property({ length: 50 })
  name!: string;

}
",
  "import { Collection, Entity, Index, ManyToMany, ManyToOne, OptionalProps, PrimaryKey, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Author2 } from './Author2';
import { BookTag2 } from './BookTag2';
import { Publisher2 } from './Publisher2';

@Entity()
export class Book2 {

  [PrimaryKeyProp]?: 'uuidPk';

  [OptionalProps]?: 'createdAt';

  @PrimaryKey({ length: 36 })
  uuidPk!: string;

  @Property({ length: 3, defaultRaw: \`current_timestamp(3)\` })
  createdAt!: Date;

  @Index({ name: 'book2_title_index' })
  @Property({ length: 255, nullable: true })
  title?: string;

  @Property({ columnType: 'text', nullable: true })
  perex?: string;

  @Property({ columnType: 'numeric(8,2)', nullable: true })
  price?: string;

  @Property({ columnType: 'double', nullable: true })
  double?: string;

  @Property({ columnType: 'json', nullable: true })
  meta?: any;

  @Index({ name: 'book2_author_id_index' })
  @Property()
  authorId!: number;

  @Index({ name: 'book2_publisher_id_index' })
  @Property({ nullable: true })
  publisherId?: number;

  @Property({ length: 255, nullable: true, default: 'lol' })
  foo?: string;

  @ManyToOne({ entity: () => Author2 })
  author!: Author2;

  @ManyToOne({ entity: () => Publisher2, updateRule: 'cascade', deleteRule: 'cascade', nullable: true })
  publisher?: Publisher2;

  @ManyToMany({ entity: () => BookTag2, pivotTable: 'book_to_tag_unordered', joinColumn: 'book2_uuid_pk', inverseJoinColumn: 'book_tag2_id' })
  bookToTagUnordered = new Collection<BookTag2>(this);

}
",
  "import { Entity, Index, ManyToOne, PrimaryKey, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Book2 } from './Book2';
import { BookTag2 } from './BookTag2';

@Entity({ tableName: 'book2_tags' })
export class Book2Tags {

  [PrimaryKeyProp]?: 'order';

  @PrimaryKey()
  order!: number;

  @Index({ name: 'book2_tags_book2_uuid_pk_index' })
  @Property({ fieldName: 'book2_uuid_pk', length: 36 })
  book2UuidPk!: string;

  @Index({ name: 'book2_tags_book_tag2_id_index' })
  @Property({ fieldName: 'book_tag2_id' })
  bookTag2Id!: bigint;

  @ManyToOne({ entity: () => Book2, updateRule: 'cascade', deleteRule: 'cascade' })
  book2!: Book2;

  @ManyToOne({ entity: () => BookTag2, updateRule: 'cascade', deleteRule: 'cascade' })
  bookTag2!: BookTag2;

}
",
  "import { Entity, ManyToOne, PrimaryKey, Property } from '@mikro-orm/core';
import { Car2 } from './Car2';

@Entity()
export class CarOwner2 {

  @PrimaryKey()
  id!: number;

  @Property({ length: 255 })
  name!: string;

  @Property({ length: 100 })
  carName!: string;

  @Property()
  carYear!: number;

  @ManyToOne({ entity: () => Car2, updateRule: 'cascade' })
  car!: Car2;

}
",
  "import { Collection, Entity, Index, ManyToMany, PrimaryKey, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { User2 } from './User2';

@Entity()
export class Car2 {

  [PrimaryKeyProp]?: ['name', 'year'];

  @Index({ name: 'car2_name_index' })
  @PrimaryKey({ length: 100 })
  name!: string;

  @Index({ name: 'car2_year_index' })
  @PrimaryKey()
  year!: number;

  @Property()
  price!: number;

  @ManyToMany({ entity: () => User2, pivotTable: 'user2_cars', joinColumns: ['car2_name', 'car2_year'], inverseJoinColumns: ['user2_first_name', 'user2_last_name'] })
  user2Cars = new Collection<User2>(this);

}
",
  "import { Entity, Index, ManyToOne, PrimaryKey, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Test2 } from './Test2';

@Entity()
export class Configuration2 {

  [PrimaryKeyProp]?: ['property', 'testId', 'test'];

  @PrimaryKey({ length: 255 })
  property!: string;

  @Index({ name: 'configuration2_test_id_index' })
  @PrimaryKey()
  testId!: number;

  @Property({ length: 255 })
  value!: string;

  @ManyToOne({ entity: () => Test2, updateRule: 'cascade', primary: true })
  test!: Test2;

}
",
  "import { Entity, PrimaryKey } from '@mikro-orm/core';

@Entity()
export class Dummy2 {

  @PrimaryKey()
  id!: number;

}
",
  "import { Collection, Entity, ManyToMany, OneToOne, OptionalProps, PrimaryKey, Property, Unique } from '@mikro-orm/core';
import { FooBaz2 } from './FooBaz2';
import { Test2 } from './Test2';

@Entity()
export class FooBar2 {

  [OptionalProps]?: 'version';

  @PrimaryKey()
  id!: number;

  @Property({ length: 255 })
  name!: string;

  @Property({ fieldName: 'name with space', length: 255, nullable: true })
  nameWithSpace?: string;

  @Unique({ name: 'foo_bar2_baz_id_unique' })
  @Property({ nullable: true })
  bazId?: number;

  @Unique({ name: 'foo_bar2_foo_bar_id_unique' })
  @Property({ nullable: true })
  fooBarId?: number;

  @Property({ length: 0, defaultRaw: \`CURRENT_TIMESTAMP\` })
  version!: Date;

  @Property({ length: 65535, nullable: true })
  blob?: Buffer;

  @Property({ length: 65535, nullable: true })
  blob2?: Buffer;

  @Property({ columnType: 'text', nullable: true })
  array?: string;

  @Property({ columnType: 'json', nullable: true })
  objectProperty?: any;

  @OneToOne({ entity: () => FooBaz2, updateRule: 'cascade', deleteRule: 'set null', nullable: true })
  baz?: FooBaz2;

  @OneToOne({ entity: () => FooBar2, updateRule: 'cascade', deleteRule: 'set null', nullable: true })
  fooBar?: FooBar2;

  @ManyToMany({ entity: () => Test2, pivotTable: 'test2_bars', joinColumn: 'foo_bar2_id', inverseJoinColumn: 'test2_id' })
  test2Bars = new Collection<Test2>(this);

}
",
  "import { Entity, OptionalProps, PrimaryKey, Property } from '@mikro-orm/core';

@Entity()
export class FooBaz2 {

  [OptionalProps]?: 'version';

  @PrimaryKey()
  id!: number;

  @Property({ length: 255 })
  name!: string;

  @Property({ length: 3, defaultRaw: \`current_timestamp(3)\` })
  version!: Date;

}
",
  "import { Entity, Index, ManyToOne, OptionalProps, PrimaryKey, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { FooBar2 } from './FooBar2';
import { FooBaz2 } from './FooBaz2';

@Entity()
export class FooParam2 {

  [PrimaryKeyProp]?: ['barId', 'bazId', 'bar', 'baz'];

  [OptionalProps]?: 'version';

  @Index({ name: 'foo_param2_bar_id_index' })
  @PrimaryKey()
  barId!: number;

  @Index({ name: 'foo_param2_baz_id_index' })
  @PrimaryKey()
  bazId!: number;

  @Property({ length: 255 })
  value!: string;

  @Property({ length: 3, defaultRaw: \`current_timestamp(3)\` })
  version!: Date;

  @ManyToOne({ entity: () => FooBar2, updateRule: 'cascade', primary: true })
  bar!: FooBar2;

  @ManyToOne({ entity: () => FooBaz2, updateRule: 'cascade', primary: true })
  baz!: FooBaz2;

}
",
  "import { Entity, Enum, OptionalProps, PrimaryKey, Property } from '@mikro-orm/core';

@Entity()
export class Publisher2 {

  [OptionalProps]?: 'name' | 'type' | 'type2';

  @PrimaryKey()
  id!: number;

  @Property({ length: 255, default: 'asd' })
  name!: string;

  @Enum({ items: () => Publisher2Type, default: 'local' })
  type: Publisher2Type = Publisher2Type.LOCAL;

  @Enum({ items: () => Publisher2Type2, default: 'LOCAL' })
  type2: Publisher2Type2 = Publisher2Type2.LOCAL;

  @Property({ columnType: 'tinyint', nullable: true })
  enum1?: number;

  @Property({ columnType: 'tinyint', nullable: true })
  enum2?: number;

  @Property({ columnType: 'tinyint', nullable: true })
  enum3?: number;

  @Enum({ items: () => Publisher2Enum4, nullable: true })
  enum4?: Publisher2Enum4;

  @Enum({ items: () => Publisher2Enum5, nullable: true })
  enum5?: Publisher2Enum5;

}

export enum Publisher2Type {
  LOCAL = 'local',
  GLOBAL = 'global',
}

export enum Publisher2Type2 {
  LOCAL = 'LOCAL',
  GLOBAL = 'GLOBAL',
}

export enum Publisher2Enum4 {
  A = 'a',
  B = 'b',
  C = 'c',
}

export enum Publisher2Enum5 {
  A = 'a',
}
",
  "import { Entity, Index, ManyToOne, PrimaryKey, Property } from '@mikro-orm/core';
import { Publisher2 } from './Publisher2';
import { Test2 } from './Test2';

@Entity({ tableName: 'publisher2_tests' })
export class Publisher2Tests {

  @PrimaryKey()
  id!: number;

  @Index({ name: 'publisher2_tests_publisher2_id_index' })
  @Property({ fieldName: 'publisher2_id' })
  publisher2Id!: number;

  @Index({ name: 'publisher2_tests_test2_id_index' })
  @Property({ fieldName: 'test2_id' })
  test2Id!: number;

  @ManyToOne({ entity: () => Publisher2, updateRule: 'cascade', deleteRule: 'cascade' })
  publisher2!: Publisher2;

  @ManyToOne({ entity: () => Test2, updateRule: 'cascade', deleteRule: 'cascade' })
  test2!: Test2;

}
",
  "import { Collection, Entity, ManyToMany, PrimaryKey, Property } from '@mikro-orm/core';
import { User2 } from './User2';

@Entity()
export class Sandwich {

  @PrimaryKey()
  id!: number;

  @Property({ length: 255 })
  name!: string;

  @Property()
  price!: number;

  @ManyToMany({ entity: () => User2, pivotTable: 'user2_sandwiches', joinColumn: 'sandwich_id', inverseJoinColumns: ['user2_first_name', 'user2_last_name'] })
  user2Sandwiches = new Collection<User2>(this);

}
",
  "import { Entity, Index, ManyToOne, OneToOne, OptionalProps, PrimaryKey, Property, Unique } from '@mikro-orm/core';
import { Book2 } from './Book2';
import { FooBar2 } from './FooBar2';

@Entity()
export class Test2 {

  [OptionalProps]?: 'version';

  @PrimaryKey()
  id!: number;

  @Property({ length: 255, nullable: true })
  name?: string;

  @Unique({ name: 'test2_book_uuid_pk_unique' })
  @Property({ length: 36, nullable: true })
  bookUuidPk?: string;

  @Index({ name: 'test2_parent_id_index' })
  @Property({ nullable: true })
  parentId?: number;

  @Property({ default: 1 })
  version: number = 1;

  @OneToOne({ entity: () => FooBar2, fieldName: 'foo___bar', updateRule: 'cascade', deleteRule: 'set null', nullable: true })
  fooBar?: FooBar2;

  @Property({ fieldName: 'foo___baz', nullable: true })
  fooBaz?: number;

  @OneToOne({ entity: () => Book2, deleteRule: 'set null', nullable: true })
  book?: Book2;

  @ManyToOne({ entity: () => Test2, updateRule: 'cascade', deleteRule: 'set null', nullable: true })
  parent?: Test2;

}
",
  "import { Entity, OneToOne, PrimaryKey, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Car2 } from './Car2';

@Entity()
export class User2 {

  [PrimaryKeyProp]?: ['firstName', 'lastName'];

  @PrimaryKey({ length: 100 })
  firstName!: string;

  @PrimaryKey({ length: 100 })
  lastName!: string;

  @Property({ nullable: true })
  foo?: number;

  @Property({ length: 100, nullable: true })
  favouriteCarName?: string;

  @Property({ nullable: true })
  favouriteCarYear?: number;

  @OneToOne({ entity: () => Car2, updateRule: 'cascade', deleteRule: 'set null', nullable: true })
  favouriteCar?: Car2;

}
",
]
`;

exports[`ScalarPropsForFks generate entities with columns for some composite foreign key properties [mysql]: mysql-entity-composite-fk-prop-smart-dump 1`] = `
[
  "import { Entity, OneToOne, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Author2 } from './Author2';

@Entity()
export class Address2 {

  [PrimaryKeyProp]?: 'author';

  @OneToOne({ entity: () => Author2, updateRule: 'cascade', deleteRule: 'cascade', primary: true })
  author!: Author2;

  @Property({ length: 255 })
  value!: string;

}
",
  "import { Collection, Entity, Index, ManyToMany, ManyToOne, OptionalProps, PrimaryKey, Property, Unique } from '@mikro-orm/core';
import { Book2 } from './Book2';

@Entity()
@Index({ name: 'author2_name_age_index', properties: ['name', 'age'] })
@Unique({ name: 'author2_name_email_unique', properties: ['name', 'email'] })
export class Author2 {

  [OptionalProps]?: 'createdAt' | 'termsAccepted' | 'updatedAt';

  @PrimaryKey()
  id!: number;

  @Property({ length: 3, defaultRaw: \`current_timestamp(3)\` })
  createdAt!: Date;

  @Property({ length: 3, defaultRaw: \`current_timestamp(3)\` })
  updatedAt!: Date;

  @Index({ name: 'custom_idx_name_123' })
  @Property({ length: 255 })
  name!: string;

  @Index({ name: 'custom_email_index_name' })
  @Unique({ name: 'custom_email_unique_name' })
  @Property({ length: 255 })
  email!: string;

  @Property({ nullable: true })
  age?: number;

  @Index({ name: 'author2_terms_accepted_index' })
  @Property({ default: false })
  termsAccepted: boolean = false;

  @Property({ nullable: true })
  optional?: boolean;

  @Property({ columnType: 'text', nullable: true })
  identities?: string;

  @Index({ name: 'author2_born_index' })
  @Property({ columnType: 'date', nullable: true })
  born?: string;

  @Index({ name: 'born_time_idx' })
  @Property({ columnType: 'time', nullable: true })
  bornTime?: string;

  @ManyToOne({ entity: () => Book2, deleteRule: 'cascade', nullable: true })
  favouriteBook?: Book2;

  @ManyToOne({ entity: () => Author2, updateRule: 'cascade', deleteRule: 'set null', nullable: true })
  favouriteAuthor?: Author2;

  @Property({ columnType: 'json', nullable: true })
  identity?: any;

  @ManyToMany({ entity: () => Author2, pivotTable: 'author_to_friend', joinColumn: 'author2_1_id', inverseJoinColumn: 'author2_2_id' })
  authorToFriend = new Collection<Author2>(this);

  @ManyToMany({ entity: () => Author2, joinColumn: 'author2_1_id', inverseJoinColumn: 'author2_2_id' })
  following = new Collection<Author2>(this);

}
",
  "import { Entity, Enum, Index, ManyToOne, OneToOne, PrimaryKey, Property } from '@mikro-orm/core';

@Entity()
export class BaseUser2 {

  @PrimaryKey()
  id!: number;

  @Property({ length: 100 })
  firstName!: string;

  @Property({ length: 100 })
  lastName!: string;

  @Index({ name: 'base_user2_type_index' })
  @Enum({ items: () => BaseUser2Type })
  type!: BaseUser2Type;

  @Property({ length: 255, nullable: true })
  ownerProp?: string;

  @ManyToOne({ entity: () => BaseUser2, updateRule: 'cascade', deleteRule: 'set null', nullable: true })
  favouriteEmployee?: BaseUser2;

  @OneToOne({ entity: () => BaseUser2, updateRule: 'cascade', deleteRule: 'set null', nullable: true })
  favouriteManager?: BaseUser2;

  @Property({ nullable: true })
  employeeProp?: number;

  @Property({ length: 255, nullable: true })
  managerProp?: string;

}

export enum BaseUser2Type {
  EMPLOYEE = 'employee',
  MANAGER = 'manager',
  OWNER = 'owner',
}
",
  "import { Entity, PrimaryKey, Property } from '@mikro-orm/core';

@Entity()
export class BookTag2 {

  @PrimaryKey()
  id!: bigint;

  @Property({ length: 50 })
  name!: string;

}
",
  "import { Collection, Entity, Index, ManyToMany, ManyToOne, OptionalProps, PrimaryKey, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Author2 } from './Author2';
import { BookTag2 } from './BookTag2';
import { Publisher2 } from './Publisher2';

@Entity()
export class Book2 {

  [PrimaryKeyProp]?: 'uuidPk';

  [OptionalProps]?: 'createdAt';

  @PrimaryKey({ length: 36 })
  uuidPk!: string;

  @Property({ length: 3, defaultRaw: \`current_timestamp(3)\` })
  createdAt!: Date;

  @Index({ name: 'book2_title_index' })
  @Property({ length: 255, nullable: true })
  title?: string;

  @Property({ columnType: 'text', nullable: true })
  perex?: string;

  @Property({ columnType: 'numeric(8,2)', nullable: true })
  price?: string;

  @Property({ columnType: 'double', nullable: true })
  double?: string;

  @Property({ columnType: 'json', nullable: true })
  meta?: any;

  @ManyToOne({ entity: () => Author2 })
  author!: Author2;

  @ManyToOne({ entity: () => Publisher2, updateRule: 'cascade', deleteRule: 'cascade', nullable: true })
  publisher?: Publisher2;

  @Property({ length: 255, nullable: true, default: 'lol' })
  foo?: string;

  @ManyToMany({ entity: () => BookTag2, pivotTable: 'book_to_tag_unordered', joinColumn: 'book2_uuid_pk', inverseJoinColumn: 'book_tag2_id' })
  bookToTagUnordered = new Collection<BookTag2>(this);

}
",
  "import { Entity, ManyToOne, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';
import { Book2 } from './Book2';
import { BookTag2 } from './BookTag2';

@Entity({ tableName: 'book2_tags' })
export class Book2Tags {

  [PrimaryKeyProp]?: 'order';

  @PrimaryKey()
  order!: number;

  @ManyToOne({ entity: () => Book2, updateRule: 'cascade', deleteRule: 'cascade' })
  book2!: Book2;

  @ManyToOne({ entity: () => BookTag2, updateRule: 'cascade', deleteRule: 'cascade' })
  bookTag2!: BookTag2;

}
",
  "import { Entity, ManyToOne, PrimaryKey, Property } from '@mikro-orm/core';
import { Car2 } from './Car2';

@Entity()
export class CarOwner2 {

  @PrimaryKey()
  id!: number;

  @Property({ length: 255 })
  name!: string;

  @ManyToOne({ entity: () => Car2, updateRule: 'cascade' })
  car!: Car2;

}
",
  "import { Entity, Index, PrimaryKey, PrimaryKeyProp, Property } from '@mikro-orm/core';

@Entity()
export class Car2 {

  [PrimaryKeyProp]?: ['name', 'year'];

  @Index({ name: 'car2_name_index' })
  @PrimaryKey({ length: 100 })
  name!: string;

  @Index({ name: 'car2_year_index' })
  @PrimaryKey()
  year!: number;

  @Property()
  price!: number;

}
",
  "import { Entity, ManyToOne, PrimaryKey, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Test2 } from './Test2';

@Entity()
export class Configuration2 {

  [PrimaryKeyProp]?: ['property', 'test'];

  @PrimaryKey({ length: 255 })
  property!: string;

  @ManyToOne({ entity: () => Test2, updateRule: 'cascade', primary: true })
  test!: Test2;

  @Property({ length: 255 })
  value!: string;

}
",
  "import { Entity, PrimaryKey } from '@mikro-orm/core';

@Entity()
export class Dummy2 {

  @PrimaryKey()
  id!: number;

}
",
  "import { Entity, OneToOne, OptionalProps, PrimaryKey, Property } from '@mikro-orm/core';
import { FooBaz2 } from './FooBaz2';

@Entity()
export class FooBar2 {

  [OptionalProps]?: 'version';

  @PrimaryKey()
  id!: number;

  @Property({ length: 255 })
  name!: string;

  @Property({ fieldName: 'name with space', length: 255, nullable: true })
  nameWithSpace?: string;

  @OneToOne({ entity: () => FooBaz2, updateRule: 'cascade', deleteRule: 'set null', nullable: true })
  baz?: FooBaz2;

  @OneToOne({ entity: () => FooBar2, updateRule: 'cascade', deleteRule: 'set null', nullable: true })
  fooBar?: FooBar2;

  @Property({ length: 0, defaultRaw: \`CURRENT_TIMESTAMP\` })
  version!: Date;

  @Property({ length: 65535, nullable: true })
  blob?: Buffer;

  @Property({ length: 65535, nullable: true })
  blob2?: Buffer;

  @Property({ columnType: 'text', nullable: true })
  array?: string;

  @Property({ columnType: 'json', nullable: true })
  objectProperty?: any;

}
",
  "import { Entity, OptionalProps, PrimaryKey, Property } from '@mikro-orm/core';

@Entity()
export class FooBaz2 {

  [OptionalProps]?: 'version';

  @PrimaryKey()
  id!: number;

  @Property({ length: 255 })
  name!: string;

  @Property({ length: 3, defaultRaw: \`current_timestamp(3)\` })
  version!: Date;

}
",
  "import { Entity, ManyToOne, OptionalProps, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { FooBar2 } from './FooBar2';
import { FooBaz2 } from './FooBaz2';

@Entity()
export class FooParam2 {

  [PrimaryKeyProp]?: ['bar', 'baz'];

  [OptionalProps]?: 'version';

  @ManyToOne({ entity: () => FooBar2, updateRule: 'cascade', primary: true })
  bar!: FooBar2;

  @ManyToOne({ entity: () => FooBaz2, updateRule: 'cascade', primary: true })
  baz!: FooBaz2;

  @Property({ length: 255 })
  value!: string;

  @Property({ length: 3, defaultRaw: \`current_timestamp(3)\` })
  version!: Date;

}
",
  "import { Entity, Enum, OptionalProps, PrimaryKey, Property } from '@mikro-orm/core';

@Entity()
export class Publisher2 {

  [OptionalProps]?: 'name' | 'type' | 'type2';

  @PrimaryKey()
  id!: number;

  @Property({ length: 255, default: 'asd' })
  name!: string;

  @Enum({ items: () => Publisher2Type, default: 'local' })
  type: Publisher2Type = Publisher2Type.LOCAL;

  @Enum({ items: () => Publisher2Type2, default: 'LOCAL' })
  type2: Publisher2Type2 = Publisher2Type2.LOCAL;

  @Property({ columnType: 'tinyint', nullable: true })
  enum1?: number;

  @Property({ columnType: 'tinyint', nullable: true })
  enum2?: number;

  @Property({ columnType: 'tinyint', nullable: true })
  enum3?: number;

  @Enum({ items: () => Publisher2Enum4, nullable: true })
  enum4?: Publisher2Enum4;

  @Enum({ items: () => Publisher2Enum5, nullable: true })
  enum5?: Publisher2Enum5;

}

export enum Publisher2Type {
  LOCAL = 'local',
  GLOBAL = 'global',
}

export enum Publisher2Type2 {
  LOCAL = 'LOCAL',
  GLOBAL = 'GLOBAL',
}

export enum Publisher2Enum4 {
  A = 'a',
  B = 'b',
  C = 'c',
}

export enum Publisher2Enum5 {
  A = 'a',
}
",
  "import { Entity, ManyToOne, PrimaryKey } from '@mikro-orm/core';
import { Publisher2 } from './Publisher2';
import { Test2 } from './Test2';

@Entity({ tableName: 'publisher2_tests' })
export class Publisher2Tests {

  @PrimaryKey()
  id!: number;

  @ManyToOne({ entity: () => Publisher2, updateRule: 'cascade', deleteRule: 'cascade' })
  publisher2!: Publisher2;

  @ManyToOne({ entity: () => Test2, updateRule: 'cascade', deleteRule: 'cascade' })
  test2!: Test2;

}
",
  "import { Entity, PrimaryKey, Property } from '@mikro-orm/core';

@Entity()
export class Sandwich {

  @PrimaryKey()
  id!: number;

  @Property({ length: 255 })
  name!: string;

  @Property()
  price!: number;

}
",
  "import { Collection, Entity, ManyToMany, ManyToOne, OneToOne, OptionalProps, PrimaryKey, Property } from '@mikro-orm/core';
import { Book2 } from './Book2';
import { FooBar2 } from './FooBar2';

@Entity()
export class Test2 {

  [OptionalProps]?: 'version';

  @PrimaryKey()
  id!: number;

  @Property({ length: 255, nullable: true })
  name?: string;

  @OneToOne({ entity: () => Book2, deleteRule: 'set null', nullable: true })
  book?: Book2;

  @ManyToOne({ entity: () => Test2, updateRule: 'cascade', deleteRule: 'set null', nullable: true })
  parent?: Test2;

  @Property({ default: 1 })
  version: number = 1;

  @OneToOne({ entity: () => FooBar2, fieldName: 'foo___bar', updateRule: 'cascade', deleteRule: 'set null', nullable: true })
  fooBar?: FooBar2;

  @Property({ fieldName: 'foo___baz', nullable: true })
  fooBaz?: number;

  @ManyToMany({ entity: () => FooBar2, joinColumn: 'test2_id', inverseJoinColumn: 'foo_bar2_id' })
  bars = new Collection<FooBar2>(this);

}
",
  "import { Collection, Entity, ManyToMany, OneToOne, PrimaryKey, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Car2 } from './Car2';
import { Sandwich } from './Sandwich';

@Entity()
export class User2 {

  [PrimaryKeyProp]?: ['firstName', 'lastName'];

  @PrimaryKey({ length: 100 })
  firstName!: string;

  @PrimaryKey({ length: 100 })
  lastName!: string;

  @Property({ nullable: true })
  foo?: number;

  @Property({ length: 100, nullable: true })
  favouriteCarName?: string;

  @Property({ nullable: true })
  favouriteCarYear?: number;

  @OneToOne({ entity: () => Car2, updateRule: 'cascade', deleteRule: 'set null', nullable: true })
  favouriteCar?: Car2;

  @ManyToMany({ entity: () => Car2, joinColumns: ['user2_first_name', 'user2_last_name'], inverseJoinColumns: ['car2_name', 'car2_year'] })
  cars = new Collection<Car2>(this);

  @ManyToMany({ entity: () => Sandwich, joinColumns: ['user2_first_name', 'user2_last_name'], inverseJoinColumn: 'sandwich_id' })
  sandwiches = new Collection<Sandwich>(this);

}
",
]
`;
