// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ambiguous_fk_example scalarPropertiesForRelations=always bidirectionalRelations=false identifiedReferences=false entitySchema=false: dump 1`] = `
[
  "import { Collection, Entity, ManyToMany, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { Products } from './Products';

@Entity()
export class Colors {

  [PrimaryKeyProp]?: 'colorId';

  @PrimaryKey()
  colorId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property()
  name!: string;

  @ManyToMany({ entity: () => Products, pivotTable: 'product_colors', pivotEntity: () => ProductColors, joinColumn: 'color_id', inverseJoinColumn: 'product_id' })
  productColors = new Collection<Products>(this);

}
",
  "import { Entity, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';

@Entity()
export class Countries {

  [PrimaryKeyProp]?: 'country';

  @PrimaryKey({ type: 'character', length: 2 })
  country!: string;

}
",
  "import { Entity, Index, ManyToOne, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Colors } from './Colors';
import { Products } from './Products';

@Entity()
export class ProductColors {

  [PrimaryKeyProp]?: ['color', 'product'];

  @ManyToOne({ entity: () => Colors, fieldName: 'color_id', primary: true })
  color!: Colors;

  @Property({ unsigned: true, persist: false })
  colorId!: number;

  @ManyToOne({ entity: () => Products, fieldName: 'product_id', primary: true, index: 'fk_product_colors_products1_idx' })
  product!: Products;

  @Index({ name: 'fk_product_colors_products1_idx' })
  @Property({ unsigned: true, autoincrement: true, persist: false })
  productId!: number;

}
",
  "import { Entity, Index, ManyToOne, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Countries } from './Countries';
import { ProductSizes } from './ProductSizes';

@Entity()
export class ProductCountries {

  [PrimaryKeyProp]?: ['product', 'countries'];

  @Property({ type: 'character', length: 2, persist: false })
  country!: string;

  @ManyToOne({ entity: () => ProductSizes, fieldName: 'product_id', primary: true, index: 'fk_product_countries_product_sizes1_idx' })
  product!: ProductSizes;

  @Index({ name: 'fk_product_countries_product_sizes1_idx' })
  @Property({ unsigned: true, persist: false })
  productId!: number;

  @ManyToOne({ entity: () => Countries, fieldName: 'country', primary: true })
  countries!: Countries;

}
",
  "import { Collection, Entity, ManyToMany, OneToOne, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { Countries } from './Countries';
import { ProductCountries } from './ProductCountries';
import { Products } from './Products';

@Entity()
@Unique({ name: 'size__product_id-UNIQUE', properties: ['size', 'productId'] })
export class ProductSizes {

  [PrimaryKeyProp]?: 'product';

  @OneToOne({ entity: () => Products, fieldName: 'product_id', primary: true })
  product!: Products;

  @Property({ unsigned: true, persist: false })
  productId!: number;

  @Property({ type: 'smallint', unsigned: true })
  size!: number;

  @ManyToMany({ entity: () => Countries, pivotTable: 'product_countries', pivotEntity: () => ProductCountries, joinColumn: 'product_id', inverseJoinColumn: 'country' })
  productCountries = new Collection<Countries>(this);

}
",
  "import { Entity, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';

@Entity()
export class Products {

  [PrimaryKeyProp]?: 'productId';

  @PrimaryKey()
  productId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property()
  name!: string;

}
",
  "import { Entity, Index, ManyToOne, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { ProductCountries } from './ProductCountries';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { SellerProducts } from './SellerProducts';

@Entity()
@Unique({ name: 'product_id__size__color_id-UNIQUE', properties: ['colorId', 'productSizes'] })
export class Sales {

  [PrimaryKeyProp]?: 'saleId';

  @PrimaryKey()
  saleId!: number;

  @Property({ type: 'character', length: 2, persist: false })
  country!: string;

  @Property({ unsigned: true, persist: false })
  sellerId!: number;

  @Index({ name: 'product_id_idx' })
  @Property({ unsigned: true, persist: false })
  productId!: number;

  @ManyToOne({ entity: () => ProductColors, fieldNames: ['color_id', 'product_id'], nullable: true, index: 'fk_sales_product_colors1_idx' })
  color?: ProductColors;

  @Property({ unsigned: true, nullable: true, persist: false })
  colorId?: number;

  @Property({ type: 'smallint', unsigned: true, nullable: true, persist: false })
  size?: number;

  @ManyToOne({ entity: () => SellerProducts, fieldNames: ['seller_id', 'exchanged_product_id'], nullable: true, index: 'fk_sales_seller_products2_idx' })
  exchanged?: SellerProducts;

  @Property({ unsigned: true, nullable: true, persist: false })
  exchangedProductId?: number;

  @ManyToOne({ entity: () => ProductCountries, fieldNames: ['country', 'product_id'], index: 'fk_sales_product_countries1_idx' })
  productCountries!: ProductCountries;

  @ManyToOne({ entity: () => ProductSizes, fieldNames: ['size', 'product_id'], nullable: true, index: 'fk_sales_product_sizes1_idx' })
  productSizes?: ProductSizes;

  @ManyToOne({ entity: () => SellerCountries, fieldNames: ['country', 'seller_id'], index: 'fk_sales_seller_countries1_idx' })
  sellerCountries!: SellerCountries;

  @ManyToOne({ entity: () => SellerProducts, fieldNames: ['seller_id', 'product_id'], index: 'fk_sales_seller_products1_idx' })
  fkSalesSellerProducts1!: SellerProducts;

}
",
  "import { Entity, Index, ManyToOne, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Sellers } from './Sellers';

@Entity()
export class SellerCountries {

  [PrimaryKeyProp]?: ['seller', 'countries'];

  @Property({ type: 'character', length: 2, persist: false })
  country!: string;

  @ManyToOne({ entity: () => Sellers, fieldName: 'seller_id', primary: true, index: 'fk_seller_countries_sellers1_idx' })
  seller!: Sellers;

  @Index({ name: 'fk_seller_countries_sellers1_idx' })
  @Property({ unsigned: true, persist: false })
  sellerId!: number;

  @ManyToOne({ entity: () => Countries, fieldName: 'country', primary: true })
  countries!: Countries;

}
",
  "import { Entity, Index, ManyToOne, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Products } from './Products';
import { Sellers } from './Sellers';

@Entity()
export class SellerProducts {

  [PrimaryKeyProp]?: ['seller', 'product'];

  @ManyToOne({ entity: () => Sellers, fieldName: 'seller_id', primary: true })
  seller!: Sellers;

  @Property({ unsigned: true, persist: false })
  sellerId!: number;

  @ManyToOne({ entity: () => Products, fieldName: 'product_id', primary: true, index: 'fk_seller_products_products1_idx' })
  product!: Products;

  @Index({ name: 'fk_seller_products_products1_idx' })
  @Property({ unsigned: true, persist: false })
  productId!: number;

}
",
  "import { Collection, Entity, ManyToMany, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Products } from './Products';
import { SellerCountries } from './SellerCountries';
import { SellerProducts } from './SellerProducts';

@Entity()
export class Sellers {

  [PrimaryKeyProp]?: 'sellerId';

  @PrimaryKey()
  sellerId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property()
  name!: string;

  @ManyToMany({ entity: () => Countries, pivotTable: 'seller_countries', pivotEntity: () => SellerCountries, joinColumn: 'seller_id', inverseJoinColumn: 'country' })
  sellerCountries = new Collection<Countries>(this);

  @ManyToMany({ entity: () => Products, pivotTable: 'seller_products', pivotEntity: () => SellerProducts, joinColumn: 'seller_id', inverseJoinColumn: 'product_id' })
  sellerProducts = new Collection<Products>(this);

}
",
]
`;

exports[`ambiguous_fk_example scalarPropertiesForRelations=always bidirectionalRelations=false identifiedReferences=false entitySchema=true: dump 1`] = `
[
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { Products } from './Products';

export class Colors {
  [PrimaryKeyProp]?: 'colorId';
  colorId!: number;
  name!: string;
  productColors = new Collection<Products>(this);
}

export const ColorsSchema = new EntitySchema({
  class: Colors,
  properties: {
    colorId: { primary: true, type: 'integer' },
    name: { type: 'string', unique: 'name_UNIQUE' },
    productColors: {
      kind: 'm:n',
      entity: () => Products,
      pivotTable: 'product_colors',
      pivotEntity: () => ProductColors,
      joinColumn: 'color_id',
      inverseJoinColumn: 'product_id',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Countries {
  [PrimaryKeyProp]?: 'country';
  country!: string;
}

export const CountriesSchema = new EntitySchema({
  class: Countries,
  properties: {
    country: { primary: true, type: 'character', length: 2 },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Colors } from './Colors';
import { Products } from './Products';

export class ProductColors {
  [PrimaryKeyProp]?: ['color', 'product'];
  color!: Colors;
  colorId!: number;
  product!: Products;
  productId!: number;
}

export const ProductColorsSchema = new EntitySchema({
  class: ProductColors,
  properties: {
    color: {
      primary: true,
      kind: 'm:1',
      entity: () => Colors,
      fieldName: 'color_id',
    },
    colorId: { type: 'integer', unsigned: true, persist: false },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => Products,
      fieldName: 'product_id',
      index: 'fk_product_colors_products1_idx',
    },
    productId: {
      type: 'integer',
      unsigned: true,
      autoincrement: true,
      persist: false,
      index: 'fk_product_colors_products1_idx',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Countries } from './Countries';
import { ProductSizes } from './ProductSizes';

export class ProductCountries {
  [PrimaryKeyProp]?: ['product', 'countries'];
  country!: string;
  product!: ProductSizes;
  productId!: number;
  countries!: Countries;
}

export const ProductCountriesSchema = new EntitySchema({
  class: ProductCountries,
  properties: {
    country: { type: 'character', length: 2, persist: false },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => ProductSizes,
      fieldName: 'product_id',
      index: 'fk_product_countries_product_sizes1_idx',
    },
    productId: {
      type: 'integer',
      unsigned: true,
      persist: false,
      index: 'fk_product_countries_product_sizes1_idx',
    },
    countries: {
      primary: true,
      kind: 'm:1',
      entity: () => Countries,
      fieldName: 'country',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Countries } from './Countries';
import { ProductCountries } from './ProductCountries';
import { Products } from './Products';

export class ProductSizes {
  [PrimaryKeyProp]?: 'product';
  product!: Products;
  productId!: number;
  size!: number;
  productCountries = new Collection<Countries>(this);
}

export const ProductSizesSchema = new EntitySchema({
  class: ProductSizes,
  uniques: [
    { name: 'size__product_id-UNIQUE', properties: ['size', 'productId'] },
  ],
  properties: {
    product: {
      primary: true,
      kind: '1:1',
      entity: () => Products,
      fieldName: 'product_id',
    },
    productId: { type: 'integer', unsigned: true, persist: false },
    size: { type: 'smallint', unsigned: true },
    productCountries: {
      kind: 'm:n',
      entity: () => Countries,
      pivotTable: 'product_countries',
      pivotEntity: () => ProductCountries,
      joinColumn: 'product_id',
      inverseJoinColumn: 'country',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Products {
  [PrimaryKeyProp]?: 'productId';
  productId!: number;
  name!: string;
}

export const ProductsSchema = new EntitySchema({
  class: Products,
  properties: {
    productId: { primary: true, type: 'integer' },
    name: { type: 'string', unique: 'name_UNIQUE' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { ProductCountries } from './ProductCountries';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { SellerProducts } from './SellerProducts';

export class Sales {
  [PrimaryKeyProp]?: 'saleId';
  saleId!: number;
  country!: string;
  sellerId!: number;
  productId!: number;
  color?: ProductColors;
  colorId?: number;
  size?: number;
  exchanged?: SellerProducts;
  exchangedProductId?: number;
  productCountries!: ProductCountries;
  productSizes?: ProductSizes;
  sellerCountries!: SellerCountries;
  fkSalesSellerProducts1!: SellerProducts;
}

export const SalesSchema = new EntitySchema({
  class: Sales,
  uniques: [
    {
      name: 'product_id__size__color_id-UNIQUE',
      properties: ['colorId', 'productSizes'],
    },
  ],
  properties: {
    saleId: { primary: true, type: 'integer' },
    country: { type: 'character', length: 2, persist: false },
    sellerId: { type: 'integer', unsigned: true, persist: false },
    productId: {
      type: 'integer',
      unsigned: true,
      persist: false,
      index: 'product_id_idx',
    },
    color: {
      kind: 'm:1',
      entity: () => ProductColors,
      fieldNames: ['color_id', 'product_id'],
      nullable: true,
      index: 'fk_sales_product_colors1_idx',
    },
    colorId: { type: 'integer', unsigned: true, nullable: true, persist: false },
    size: { type: 'smallint', unsigned: true, nullable: true, persist: false },
    exchanged: {
      kind: 'm:1',
      entity: () => SellerProducts,
      fieldNames: ['seller_id', 'exchanged_product_id'],
      nullable: true,
      index: 'fk_sales_seller_products2_idx',
    },
    exchangedProductId: {
      type: 'integer',
      unsigned: true,
      nullable: true,
      persist: false,
    },
    productCountries: {
      kind: 'm:1',
      entity: () => ProductCountries,
      fieldNames: ['country', 'product_id'],
      index: 'fk_sales_product_countries1_idx',
    },
    productSizes: {
      kind: 'm:1',
      entity: () => ProductSizes,
      fieldNames: ['size', 'product_id'],
      nullable: true,
      index: 'fk_sales_product_sizes1_idx',
    },
    sellerCountries: {
      kind: 'm:1',
      entity: () => SellerCountries,
      fieldNames: ['country', 'seller_id'],
      index: 'fk_sales_seller_countries1_idx',
    },
    fkSalesSellerProducts1: {
      kind: 'm:1',
      entity: () => SellerProducts,
      fieldNames: ['seller_id', 'product_id'],
      index: 'fk_sales_seller_products1_idx',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Sellers } from './Sellers';

export class SellerCountries {
  [PrimaryKeyProp]?: ['seller', 'countries'];
  country!: string;
  seller!: Sellers;
  sellerId!: number;
  countries!: Countries;
}

export const SellerCountriesSchema = new EntitySchema({
  class: SellerCountries,
  properties: {
    country: { type: 'character', length: 2, persist: false },
    seller: {
      primary: true,
      kind: 'm:1',
      entity: () => Sellers,
      fieldName: 'seller_id',
      index: 'fk_seller_countries_sellers1_idx',
    },
    sellerId: {
      type: 'integer',
      unsigned: true,
      persist: false,
      index: 'fk_seller_countries_sellers1_idx',
    },
    countries: {
      primary: true,
      kind: 'm:1',
      entity: () => Countries,
      fieldName: 'country',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Products } from './Products';
import { Sellers } from './Sellers';

export class SellerProducts {
  [PrimaryKeyProp]?: ['seller', 'product'];
  seller!: Sellers;
  sellerId!: number;
  product!: Products;
  productId!: number;
}

export const SellerProductsSchema = new EntitySchema({
  class: SellerProducts,
  properties: {
    seller: {
      primary: true,
      kind: 'm:1',
      entity: () => Sellers,
      fieldName: 'seller_id',
    },
    sellerId: { type: 'integer', unsigned: true, persist: false },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => Products,
      fieldName: 'product_id',
      index: 'fk_seller_products_products1_idx',
    },
    productId: {
      type: 'integer',
      unsigned: true,
      persist: false,
      index: 'fk_seller_products_products1_idx',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Products } from './Products';
import { SellerCountries } from './SellerCountries';
import { SellerProducts } from './SellerProducts';

export class Sellers {
  [PrimaryKeyProp]?: 'sellerId';
  sellerId!: number;
  name!: string;
  sellerCountries = new Collection<Countries>(this);
  sellerProducts = new Collection<Products>(this);
}

export const SellersSchema = new EntitySchema({
  class: Sellers,
  properties: {
    sellerId: { primary: true, type: 'integer' },
    name: { type: 'string', unique: 'name_UNIQUE' },
    sellerCountries: {
      kind: 'm:n',
      entity: () => Countries,
      pivotTable: 'seller_countries',
      pivotEntity: () => SellerCountries,
      joinColumn: 'seller_id',
      inverseJoinColumn: 'country',
    },
    sellerProducts: {
      kind: 'm:n',
      entity: () => Products,
      pivotTable: 'seller_products',
      pivotEntity: () => SellerProducts,
      joinColumn: 'seller_id',
      inverseJoinColumn: 'product_id',
    },
  },
});
",
]
`;

exports[`ambiguous_fk_example scalarPropertiesForRelations=always bidirectionalRelations=false identifiedReferences=true entitySchema=false: dump 1`] = `
[
  "import { Collection, Entity, ManyToMany, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { Products } from './Products';

@Entity()
export class Colors {

  [PrimaryKeyProp]?: 'colorId';

  @PrimaryKey()
  colorId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property()
  name!: string;

  @ManyToMany({ entity: () => Products, pivotTable: 'product_colors', pivotEntity: () => ProductColors, joinColumn: 'color_id', inverseJoinColumn: 'product_id' })
  productColors = new Collection<Products>(this);

}
",
  "import { Entity, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';

@Entity()
export class Countries {

  [PrimaryKeyProp]?: 'country';

  @PrimaryKey({ type: 'character', length: 2 })
  country!: string;

}
",
  "import { Entity, Index, ManyToOne, PrimaryKeyProp, Property, type Ref } from '@mikro-orm/core';
import { Colors } from './Colors';
import { Products } from './Products';

@Entity()
export class ProductColors {

  [PrimaryKeyProp]?: ['color', 'product'];

  @ManyToOne({ entity: () => Colors, ref: true, fieldName: 'color_id', primary: true })
  color!: Ref<Colors>;

  @Property({ unsigned: true, persist: false })
  colorId!: number;

  @ManyToOne({ entity: () => Products, ref: true, fieldName: 'product_id', primary: true, index: 'fk_product_colors_products1_idx' })
  product!: Ref<Products>;

  @Index({ name: 'fk_product_colors_products1_idx' })
  @Property({ unsigned: true, autoincrement: true, persist: false })
  productId!: number;

}
",
  "import { Entity, Index, ManyToOne, PrimaryKeyProp, Property, type Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { ProductSizes } from './ProductSizes';

@Entity()
export class ProductCountries {

  [PrimaryKeyProp]?: ['product', 'countries'];

  @Property({ type: 'character', length: 2, persist: false })
  country!: string;

  @ManyToOne({ entity: () => ProductSizes, ref: true, fieldName: 'product_id', primary: true, index: 'fk_product_countries_product_sizes1_idx' })
  product!: Ref<ProductSizes>;

  @Index({ name: 'fk_product_countries_product_sizes1_idx' })
  @Property({ unsigned: true, persist: false })
  productId!: number;

  @ManyToOne({ entity: () => Countries, ref: true, fieldName: 'country', primary: true })
  countries!: Ref<Countries>;

}
",
  "import { Collection, Entity, ManyToMany, OneToOne, PrimaryKeyProp, Property, type Ref, Unique } from '@mikro-orm/core';
import { Countries } from './Countries';
import { ProductCountries } from './ProductCountries';
import { Products } from './Products';

@Entity()
@Unique({ name: 'size__product_id-UNIQUE', properties: ['size', 'productId'] })
export class ProductSizes {

  [PrimaryKeyProp]?: 'product';

  @OneToOne({ entity: () => Products, ref: true, fieldName: 'product_id', primary: true })
  product!: Ref<Products>;

  @Property({ unsigned: true, persist: false })
  productId!: number;

  @Property({ type: 'smallint', unsigned: true })
  size!: number;

  @ManyToMany({ entity: () => Countries, pivotTable: 'product_countries', pivotEntity: () => ProductCountries, joinColumn: 'product_id', inverseJoinColumn: 'country' })
  productCountries = new Collection<Countries>(this);

}
",
  "import { Entity, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';

@Entity()
export class Products {

  [PrimaryKeyProp]?: 'productId';

  @PrimaryKey()
  productId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property()
  name!: string;

}
",
  "import { Entity, Index, ManyToOne, PrimaryKey, PrimaryKeyProp, Property, type Ref, Unique } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { ProductCountries } from './ProductCountries';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { SellerProducts } from './SellerProducts';

@Entity()
@Unique({ name: 'product_id__size__color_id-UNIQUE', properties: ['colorId', 'productSizes'] })
export class Sales {

  [PrimaryKeyProp]?: 'saleId';

  @PrimaryKey()
  saleId!: number;

  @Property({ type: 'character', length: 2, persist: false })
  country!: string;

  @Property({ unsigned: true, persist: false })
  sellerId!: number;

  @Index({ name: 'product_id_idx' })
  @Property({ unsigned: true, persist: false })
  productId!: number;

  @ManyToOne({ entity: () => ProductColors, ref: true, fieldNames: ['color_id', 'product_id'], nullable: true, index: 'fk_sales_product_colors1_idx' })
  color?: Ref<ProductColors>;

  @Property({ unsigned: true, nullable: true, persist: false })
  colorId?: number;

  @Property({ type: 'smallint', unsigned: true, nullable: true, persist: false })
  size?: number;

  @ManyToOne({ entity: () => SellerProducts, ref: true, fieldNames: ['seller_id', 'exchanged_product_id'], nullable: true, index: 'fk_sales_seller_products2_idx' })
  exchanged?: Ref<SellerProducts>;

  @Property({ unsigned: true, nullable: true, persist: false })
  exchangedProductId?: number;

  @ManyToOne({ entity: () => ProductCountries, ref: true, fieldNames: ['country', 'product_id'], index: 'fk_sales_product_countries1_idx' })
  productCountries!: Ref<ProductCountries>;

  @ManyToOne({ entity: () => ProductSizes, ref: true, fieldNames: ['size', 'product_id'], nullable: true, index: 'fk_sales_product_sizes1_idx' })
  productSizes?: Ref<ProductSizes>;

  @ManyToOne({ entity: () => SellerCountries, ref: true, fieldNames: ['country', 'seller_id'], index: 'fk_sales_seller_countries1_idx' })
  sellerCountries!: Ref<SellerCountries>;

  @ManyToOne({ entity: () => SellerProducts, ref: true, fieldNames: ['seller_id', 'product_id'], index: 'fk_sales_seller_products1_idx' })
  fkSalesSellerProducts1!: Ref<SellerProducts>;

}
",
  "import { Entity, Index, ManyToOne, PrimaryKeyProp, Property, type Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Sellers } from './Sellers';

@Entity()
export class SellerCountries {

  [PrimaryKeyProp]?: ['seller', 'countries'];

  @Property({ type: 'character', length: 2, persist: false })
  country!: string;

  @ManyToOne({ entity: () => Sellers, ref: true, fieldName: 'seller_id', primary: true, index: 'fk_seller_countries_sellers1_idx' })
  seller!: Ref<Sellers>;

  @Index({ name: 'fk_seller_countries_sellers1_idx' })
  @Property({ unsigned: true, persist: false })
  sellerId!: number;

  @ManyToOne({ entity: () => Countries, ref: true, fieldName: 'country', primary: true })
  countries!: Ref<Countries>;

}
",
  "import { Entity, Index, ManyToOne, PrimaryKeyProp, Property, type Ref } from '@mikro-orm/core';
import { Products } from './Products';
import { Sellers } from './Sellers';

@Entity()
export class SellerProducts {

  [PrimaryKeyProp]?: ['seller', 'product'];

  @ManyToOne({ entity: () => Sellers, ref: true, fieldName: 'seller_id', primary: true })
  seller!: Ref<Sellers>;

  @Property({ unsigned: true, persist: false })
  sellerId!: number;

  @ManyToOne({ entity: () => Products, ref: true, fieldName: 'product_id', primary: true, index: 'fk_seller_products_products1_idx' })
  product!: Ref<Products>;

  @Index({ name: 'fk_seller_products_products1_idx' })
  @Property({ unsigned: true, persist: false })
  productId!: number;

}
",
  "import { Collection, Entity, ManyToMany, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Products } from './Products';
import { SellerCountries } from './SellerCountries';
import { SellerProducts } from './SellerProducts';

@Entity()
export class Sellers {

  [PrimaryKeyProp]?: 'sellerId';

  @PrimaryKey()
  sellerId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property()
  name!: string;

  @ManyToMany({ entity: () => Countries, pivotTable: 'seller_countries', pivotEntity: () => SellerCountries, joinColumn: 'seller_id', inverseJoinColumn: 'country' })
  sellerCountries = new Collection<Countries>(this);

  @ManyToMany({ entity: () => Products, pivotTable: 'seller_products', pivotEntity: () => SellerProducts, joinColumn: 'seller_id', inverseJoinColumn: 'product_id' })
  sellerProducts = new Collection<Products>(this);

}
",
]
`;

exports[`ambiguous_fk_example scalarPropertiesForRelations=always bidirectionalRelations=false identifiedReferences=true entitySchema=true: dump 1`] = `
[
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { Products } from './Products';

export class Colors {
  [PrimaryKeyProp]?: 'colorId';
  colorId!: number;
  name!: string;
  productColors = new Collection<Products>(this);
}

export const ColorsSchema = new EntitySchema({
  class: Colors,
  properties: {
    colorId: { primary: true, type: 'integer' },
    name: { type: 'string', unique: 'name_UNIQUE' },
    productColors: {
      kind: 'm:n',
      entity: () => Products,
      pivotTable: 'product_colors',
      pivotEntity: () => ProductColors,
      joinColumn: 'color_id',
      inverseJoinColumn: 'product_id',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Countries {
  [PrimaryKeyProp]?: 'country';
  country!: string;
}

export const CountriesSchema = new EntitySchema({
  class: Countries,
  properties: {
    country: { primary: true, type: 'character', length: 2 },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, type Ref } from '@mikro-orm/core';
import { Colors } from './Colors';
import { Products } from './Products';

export class ProductColors {
  [PrimaryKeyProp]?: ['color', 'product'];
  color!: Ref<Colors>;
  colorId!: number;
  product!: Ref<Products>;
  productId!: number;
}

export const ProductColorsSchema = new EntitySchema({
  class: ProductColors,
  properties: {
    color: {
      primary: true,
      kind: 'm:1',
      entity: () => Colors,
      ref: true,
      fieldName: 'color_id',
    },
    colorId: { type: 'integer', unsigned: true, persist: false },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => Products,
      ref: true,
      fieldName: 'product_id',
      index: 'fk_product_colors_products1_idx',
    },
    productId: {
      type: 'integer',
      unsigned: true,
      autoincrement: true,
      persist: false,
      index: 'fk_product_colors_products1_idx',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, type Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { ProductSizes } from './ProductSizes';

export class ProductCountries {
  [PrimaryKeyProp]?: ['product', 'countries'];
  country!: string;
  product!: Ref<ProductSizes>;
  productId!: number;
  countries!: Ref<Countries>;
}

export const ProductCountriesSchema = new EntitySchema({
  class: ProductCountries,
  properties: {
    country: { type: 'character', length: 2, persist: false },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => ProductSizes,
      ref: true,
      fieldName: 'product_id',
      index: 'fk_product_countries_product_sizes1_idx',
    },
    productId: {
      type: 'integer',
      unsigned: true,
      persist: false,
      index: 'fk_product_countries_product_sizes1_idx',
    },
    countries: {
      primary: true,
      kind: 'm:1',
      entity: () => Countries,
      ref: true,
      fieldName: 'country',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp, type Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { ProductCountries } from './ProductCountries';
import { Products } from './Products';

export class ProductSizes {
  [PrimaryKeyProp]?: 'product';
  product!: Ref<Products>;
  productId!: number;
  size!: number;
  productCountries = new Collection<Countries>(this);
}

export const ProductSizesSchema = new EntitySchema({
  class: ProductSizes,
  uniques: [
    { name: 'size__product_id-UNIQUE', properties: ['size', 'productId'] },
  ],
  properties: {
    product: {
      primary: true,
      kind: '1:1',
      entity: () => Products,
      ref: true,
      fieldName: 'product_id',
    },
    productId: { type: 'integer', unsigned: true, persist: false },
    size: { type: 'smallint', unsigned: true },
    productCountries: {
      kind: 'm:n',
      entity: () => Countries,
      pivotTable: 'product_countries',
      pivotEntity: () => ProductCountries,
      joinColumn: 'product_id',
      inverseJoinColumn: 'country',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Products {
  [PrimaryKeyProp]?: 'productId';
  productId!: number;
  name!: string;
}

export const ProductsSchema = new EntitySchema({
  class: Products,
  properties: {
    productId: { primary: true, type: 'integer' },
    name: { type: 'string', unique: 'name_UNIQUE' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, type Ref } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { ProductCountries } from './ProductCountries';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { SellerProducts } from './SellerProducts';

export class Sales {
  [PrimaryKeyProp]?: 'saleId';
  saleId!: number;
  country!: string;
  sellerId!: number;
  productId!: number;
  color?: Ref<ProductColors>;
  colorId?: number;
  size?: number;
  exchanged?: Ref<SellerProducts>;
  exchangedProductId?: number;
  productCountries!: Ref<ProductCountries>;
  productSizes?: Ref<ProductSizes>;
  sellerCountries!: Ref<SellerCountries>;
  fkSalesSellerProducts1!: Ref<SellerProducts>;
}

export const SalesSchema = new EntitySchema({
  class: Sales,
  uniques: [
    {
      name: 'product_id__size__color_id-UNIQUE',
      properties: ['colorId', 'productSizes'],
    },
  ],
  properties: {
    saleId: { primary: true, type: 'integer' },
    country: { type: 'character', length: 2, persist: false },
    sellerId: { type: 'integer', unsigned: true, persist: false },
    productId: {
      type: 'integer',
      unsigned: true,
      persist: false,
      index: 'product_id_idx',
    },
    color: {
      kind: 'm:1',
      entity: () => ProductColors,
      ref: true,
      fieldNames: ['color_id', 'product_id'],
      nullable: true,
      index: 'fk_sales_product_colors1_idx',
    },
    colorId: { type: 'integer', unsigned: true, nullable: true, persist: false },
    size: { type: 'smallint', unsigned: true, nullable: true, persist: false },
    exchanged: {
      kind: 'm:1',
      entity: () => SellerProducts,
      ref: true,
      fieldNames: ['seller_id', 'exchanged_product_id'],
      nullable: true,
      index: 'fk_sales_seller_products2_idx',
    },
    exchangedProductId: {
      type: 'integer',
      unsigned: true,
      nullable: true,
      persist: false,
    },
    productCountries: {
      kind: 'm:1',
      entity: () => ProductCountries,
      ref: true,
      fieldNames: ['country', 'product_id'],
      index: 'fk_sales_product_countries1_idx',
    },
    productSizes: {
      kind: 'm:1',
      entity: () => ProductSizes,
      ref: true,
      fieldNames: ['size', 'product_id'],
      nullable: true,
      index: 'fk_sales_product_sizes1_idx',
    },
    sellerCountries: {
      kind: 'm:1',
      entity: () => SellerCountries,
      ref: true,
      fieldNames: ['country', 'seller_id'],
      index: 'fk_sales_seller_countries1_idx',
    },
    fkSalesSellerProducts1: {
      kind: 'm:1',
      entity: () => SellerProducts,
      ref: true,
      fieldNames: ['seller_id', 'product_id'],
      index: 'fk_sales_seller_products1_idx',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, type Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Sellers } from './Sellers';

export class SellerCountries {
  [PrimaryKeyProp]?: ['seller', 'countries'];
  country!: string;
  seller!: Ref<Sellers>;
  sellerId!: number;
  countries!: Ref<Countries>;
}

export const SellerCountriesSchema = new EntitySchema({
  class: SellerCountries,
  properties: {
    country: { type: 'character', length: 2, persist: false },
    seller: {
      primary: true,
      kind: 'm:1',
      entity: () => Sellers,
      ref: true,
      fieldName: 'seller_id',
      index: 'fk_seller_countries_sellers1_idx',
    },
    sellerId: {
      type: 'integer',
      unsigned: true,
      persist: false,
      index: 'fk_seller_countries_sellers1_idx',
    },
    countries: {
      primary: true,
      kind: 'm:1',
      entity: () => Countries,
      ref: true,
      fieldName: 'country',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, type Ref } from '@mikro-orm/core';
import { Products } from './Products';
import { Sellers } from './Sellers';

export class SellerProducts {
  [PrimaryKeyProp]?: ['seller', 'product'];
  seller!: Ref<Sellers>;
  sellerId!: number;
  product!: Ref<Products>;
  productId!: number;
}

export const SellerProductsSchema = new EntitySchema({
  class: SellerProducts,
  properties: {
    seller: {
      primary: true,
      kind: 'm:1',
      entity: () => Sellers,
      ref: true,
      fieldName: 'seller_id',
    },
    sellerId: { type: 'integer', unsigned: true, persist: false },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => Products,
      ref: true,
      fieldName: 'product_id',
      index: 'fk_seller_products_products1_idx',
    },
    productId: {
      type: 'integer',
      unsigned: true,
      persist: false,
      index: 'fk_seller_products_products1_idx',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Products } from './Products';
import { SellerCountries } from './SellerCountries';
import { SellerProducts } from './SellerProducts';

export class Sellers {
  [PrimaryKeyProp]?: 'sellerId';
  sellerId!: number;
  name!: string;
  sellerCountries = new Collection<Countries>(this);
  sellerProducts = new Collection<Products>(this);
}

export const SellersSchema = new EntitySchema({
  class: Sellers,
  properties: {
    sellerId: { primary: true, type: 'integer' },
    name: { type: 'string', unique: 'name_UNIQUE' },
    sellerCountries: {
      kind: 'm:n',
      entity: () => Countries,
      pivotTable: 'seller_countries',
      pivotEntity: () => SellerCountries,
      joinColumn: 'seller_id',
      inverseJoinColumn: 'country',
    },
    sellerProducts: {
      kind: 'm:n',
      entity: () => Products,
      pivotTable: 'seller_products',
      pivotEntity: () => SellerProducts,
      joinColumn: 'seller_id',
      inverseJoinColumn: 'product_id',
    },
  },
});
",
]
`;

exports[`ambiguous_fk_example scalarPropertiesForRelations=always bidirectionalRelations=true identifiedReferences=false entitySchema=false: dump 1`] = `
[
  "import { Collection, Entity, ManyToMany, OneToMany, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { Products } from './Products';

@Entity()
export class Colors {

  [PrimaryKeyProp]?: 'colorId';

  @PrimaryKey()
  colorId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property()
  name!: string;

  @ManyToMany({ entity: () => Products, pivotTable: 'product_colors', pivotEntity: () => ProductColors, joinColumn: 'color_id', inverseJoinColumn: 'product_id' })
  productColors = new Collection<Products>(this);

  @OneToMany({ entity: () => ProductColors, mappedBy: 'color' })
  productColorsCollection = new Collection<ProductColors>(this);

}
",
  "import { Collection, Entity, ManyToMany, OneToMany, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductCountries } from './ProductCountries';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { Sellers } from './Sellers';

@Entity()
export class Countries {

  [PrimaryKeyProp]?: 'country';

  @PrimaryKey({ type: 'character', length: 2 })
  country!: string;

  @OneToMany({ entity: () => ProductCountries, mappedBy: 'countries' })
  productCountriesCollection = new Collection<ProductCountries>(this);

  @ManyToMany({ entity: () => ProductSizes, mappedBy: 'productCountries' })
  productCountriesInverse = new Collection<ProductSizes>(this);

  @OneToMany({ entity: () => SellerCountries, mappedBy: 'countries' })
  sellerCountriesCollection = new Collection<SellerCountries>(this);

  @ManyToMany({ entity: () => Sellers, mappedBy: 'sellerCountries' })
  sellerCountriesInverse = new Collection<Sellers>(this);

}
",
  "import { Collection, Entity, Index, ManyToOne, OneToMany, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Colors } from './Colors';
import { Products } from './Products';
import { Sales } from './Sales';

@Entity()
export class ProductColors {

  [PrimaryKeyProp]?: ['color', 'product'];

  @ManyToOne({ entity: () => Colors, fieldName: 'color_id', primary: true })
  color!: Colors;

  @Property({ unsigned: true, persist: false })
  colorId!: number;

  @ManyToOne({ entity: () => Products, fieldName: 'product_id', primary: true, index: 'fk_product_colors_products1_idx' })
  product!: Products;

  @Index({ name: 'fk_product_colors_products1_idx' })
  @Property({ unsigned: true, autoincrement: true, persist: false })
  productId!: number;

  @OneToMany({ entity: () => Sales, mappedBy: 'color' })
  salesCollection = new Collection<Sales>(this);

}
",
  "import { Collection, Entity, Index, ManyToOne, OneToMany, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Countries } from './Countries';
import { ProductSizes } from './ProductSizes';
import { Sales } from './Sales';

@Entity()
export class ProductCountries {

  [PrimaryKeyProp]?: ['product', 'countries'];

  @Property({ type: 'character', length: 2, persist: false })
  country!: string;

  @ManyToOne({ entity: () => ProductSizes, fieldName: 'product_id', primary: true, index: 'fk_product_countries_product_sizes1_idx' })
  product!: ProductSizes;

  @Index({ name: 'fk_product_countries_product_sizes1_idx' })
  @Property({ unsigned: true, persist: false })
  productId!: number;

  @ManyToOne({ entity: () => Countries, fieldName: 'country', primary: true })
  countries!: Countries;

  @OneToMany({ entity: () => Sales, mappedBy: 'productCountries' })
  salesCollection = new Collection<Sales>(this);

}
",
  "import { Collection, Entity, ManyToMany, OneToMany, OneToOne, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { Countries } from './Countries';
import { ProductCountries } from './ProductCountries';
import { Products } from './Products';
import { Sales } from './Sales';

@Entity()
@Unique({ name: 'size__product_id-UNIQUE', properties: ['size', 'productId'] })
export class ProductSizes {

  [PrimaryKeyProp]?: 'product';

  @OneToOne({ entity: () => Products, fieldName: 'product_id', primary: true })
  product!: Products;

  @Property({ unsigned: true, persist: false })
  productId!: number;

  @Property({ type: 'smallint', unsigned: true })
  size!: number;

  @ManyToMany({ entity: () => Countries, pivotTable: 'product_countries', pivotEntity: () => ProductCountries, joinColumn: 'product_id', inverseJoinColumn: 'country' })
  productCountries = new Collection<Countries>(this);

  @OneToMany({ entity: () => ProductCountries, mappedBy: 'product' })
  productCountriesCollection = new Collection<ProductCountries>(this);

  @OneToMany({ entity: () => Sales, mappedBy: 'productSizes' })
  salesCollection = new Collection<Sales>(this);

}
",
  "import { Collection, Entity, ManyToMany, OneToMany, OneToOne, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { Colors } from './Colors';
import { ProductColors } from './ProductColors';
import { ProductSizes } from './ProductSizes';
import { SellerProducts } from './SellerProducts';
import { Sellers } from './Sellers';

@Entity()
export class Products {

  [PrimaryKeyProp]?: 'productId';

  @PrimaryKey()
  productId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property()
  name!: string;

  @ManyToMany({ entity: () => Colors, mappedBy: 'productColors' })
  productColorsInverse = new Collection<Colors>(this);

  @OneToMany({ entity: () => ProductColors, mappedBy: 'product' })
  productColorsCollection = new Collection<ProductColors>(this);

  @OneToOne({ entity: () => ProductSizes, mappedBy: 'product' })
  productSizes?: ProductSizes;

  @OneToMany({ entity: () => SellerProducts, mappedBy: 'product' })
  sellerProductsCollection = new Collection<SellerProducts>(this);

  @ManyToMany({ entity: () => Sellers, mappedBy: 'sellerProducts' })
  sellerProductsInverse = new Collection<Sellers>(this);

}
",
  "import { Entity, Index, ManyToOne, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { ProductCountries } from './ProductCountries';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { SellerProducts } from './SellerProducts';

@Entity()
@Unique({ name: 'product_id__size__color_id-UNIQUE', properties: ['colorId', 'productSizes'] })
export class Sales {

  [PrimaryKeyProp]?: 'saleId';

  @PrimaryKey()
  saleId!: number;

  @Property({ type: 'character', length: 2, persist: false })
  country!: string;

  @Property({ unsigned: true, persist: false })
  sellerId!: number;

  @Index({ name: 'product_id_idx' })
  @Property({ unsigned: true, persist: false })
  productId!: number;

  @ManyToOne({ entity: () => ProductColors, fieldNames: ['color_id', 'product_id'], nullable: true, index: 'fk_sales_product_colors1_idx' })
  color?: ProductColors;

  @Property({ unsigned: true, nullable: true, persist: false })
  colorId?: number;

  @Property({ type: 'smallint', unsigned: true, nullable: true, persist: false })
  size?: number;

  @ManyToOne({ entity: () => SellerProducts, fieldNames: ['seller_id', 'exchanged_product_id'], nullable: true, index: 'fk_sales_seller_products2_idx' })
  exchanged?: SellerProducts;

  @Property({ unsigned: true, nullable: true, persist: false })
  exchangedProductId?: number;

  @ManyToOne({ entity: () => ProductCountries, fieldNames: ['country', 'product_id'], index: 'fk_sales_product_countries1_idx' })
  productCountries!: ProductCountries;

  @ManyToOne({ entity: () => ProductSizes, fieldNames: ['size', 'product_id'], nullable: true, index: 'fk_sales_product_sizes1_idx' })
  productSizes?: ProductSizes;

  @ManyToOne({ entity: () => SellerCountries, fieldNames: ['country', 'seller_id'], index: 'fk_sales_seller_countries1_idx' })
  sellerCountries!: SellerCountries;

  @ManyToOne({ entity: () => SellerProducts, fieldNames: ['seller_id', 'product_id'], index: 'fk_sales_seller_products1_idx' })
  fkSalesSellerProducts1!: SellerProducts;

}
",
  "import { Collection, Entity, Index, ManyToOne, OneToMany, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Sales } from './Sales';
import { Sellers } from './Sellers';

@Entity()
export class SellerCountries {

  [PrimaryKeyProp]?: ['seller', 'countries'];

  @Property({ type: 'character', length: 2, persist: false })
  country!: string;

  @ManyToOne({ entity: () => Sellers, fieldName: 'seller_id', primary: true, index: 'fk_seller_countries_sellers1_idx' })
  seller!: Sellers;

  @Index({ name: 'fk_seller_countries_sellers1_idx' })
  @Property({ unsigned: true, persist: false })
  sellerId!: number;

  @ManyToOne({ entity: () => Countries, fieldName: 'country', primary: true })
  countries!: Countries;

  @OneToMany({ entity: () => Sales, mappedBy: 'sellerCountries' })
  salesCollection = new Collection<Sales>(this);

}
",
  "import { Collection, Entity, Index, ManyToOne, OneToMany, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Products } from './Products';
import { Sales } from './Sales';
import { Sellers } from './Sellers';

@Entity()
export class SellerProducts {

  [PrimaryKeyProp]?: ['seller', 'product'];

  @ManyToOne({ entity: () => Sellers, fieldName: 'seller_id', primary: true })
  seller!: Sellers;

  @Property({ unsigned: true, persist: false })
  sellerId!: number;

  @ManyToOne({ entity: () => Products, fieldName: 'product_id', primary: true, index: 'fk_seller_products_products1_idx' })
  product!: Products;

  @Index({ name: 'fk_seller_products_products1_idx' })
  @Property({ unsigned: true, persist: false })
  productId!: number;

  @OneToMany({ entity: () => Sales, mappedBy: 'exchanged' })
  salesCollection = new Collection<Sales>(this);

  @OneToMany({ entity: () => Sales, mappedBy: 'fkSalesSellerProducts1' })
  salesCollection1 = new Collection<Sales>(this);

}
",
  "import { Collection, Entity, ManyToMany, OneToMany, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Products } from './Products';
import { SellerCountries } from './SellerCountries';
import { SellerProducts } from './SellerProducts';

@Entity()
export class Sellers {

  [PrimaryKeyProp]?: 'sellerId';

  @PrimaryKey()
  sellerId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property()
  name!: string;

  @ManyToMany({ entity: () => Countries, pivotTable: 'seller_countries', pivotEntity: () => SellerCountries, joinColumn: 'seller_id', inverseJoinColumn: 'country' })
  sellerCountries = new Collection<Countries>(this);

  @ManyToMany({ entity: () => Products, pivotTable: 'seller_products', pivotEntity: () => SellerProducts, joinColumn: 'seller_id', inverseJoinColumn: 'product_id' })
  sellerProducts = new Collection<Products>(this);

  @OneToMany({ entity: () => SellerCountries, mappedBy: 'seller' })
  sellerCountriesCollection = new Collection<SellerCountries>(this);

  @OneToMany({ entity: () => SellerProducts, mappedBy: 'seller' })
  sellerProductsCollection = new Collection<SellerProducts>(this);

}
",
]
`;

exports[`ambiguous_fk_example scalarPropertiesForRelations=always bidirectionalRelations=true identifiedReferences=false entitySchema=true: dump 1`] = `
[
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { Products } from './Products';

export class Colors {
  [PrimaryKeyProp]?: 'colorId';
  colorId!: number;
  name!: string;
  productColors = new Collection<Products>(this);
  productColorsCollection = new Collection<ProductColors>(this);
}

export const ColorsSchema = new EntitySchema({
  class: Colors,
  properties: {
    colorId: { primary: true, type: 'integer' },
    name: { type: 'string', unique: 'name_UNIQUE' },
    productColors: {
      kind: 'm:n',
      entity: () => Products,
      pivotTable: 'product_colors',
      pivotEntity: () => ProductColors,
      joinColumn: 'color_id',
      inverseJoinColumn: 'product_id',
    },
    productColorsCollection: {
      kind: '1:m',
      entity: () => ProductColors,
      mappedBy: 'color',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductCountries } from './ProductCountries';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { Sellers } from './Sellers';

export class Countries {
  [PrimaryKeyProp]?: 'country';
  country!: string;
  productCountriesCollection = new Collection<ProductCountries>(this);
  productCountriesInverse = new Collection<ProductSizes>(this);
  sellerCountriesCollection = new Collection<SellerCountries>(this);
  sellerCountriesInverse = new Collection<Sellers>(this);
}

export const CountriesSchema = new EntitySchema({
  class: Countries,
  properties: {
    country: { primary: true, type: 'character', length: 2 },
    productCountriesCollection: {
      kind: '1:m',
      entity: () => ProductCountries,
      mappedBy: 'countries',
    },
    productCountriesInverse: {
      kind: 'm:n',
      entity: () => ProductSizes,
      mappedBy: 'productCountries',
    },
    sellerCountriesCollection: {
      kind: '1:m',
      entity: () => SellerCountries,
      mappedBy: 'countries',
    },
    sellerCountriesInverse: {
      kind: 'm:n',
      entity: () => Sellers,
      mappedBy: 'sellerCountries',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Colors } from './Colors';
import { Products } from './Products';
import { Sales } from './Sales';

export class ProductColors {
  [PrimaryKeyProp]?: ['color', 'product'];
  color!: Colors;
  colorId!: number;
  product!: Products;
  productId!: number;
  salesCollection = new Collection<Sales>(this);
}

export const ProductColorsSchema = new EntitySchema({
  class: ProductColors,
  properties: {
    color: {
      primary: true,
      kind: 'm:1',
      entity: () => Colors,
      fieldName: 'color_id',
    },
    colorId: { type: 'integer', unsigned: true, persist: false },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => Products,
      fieldName: 'product_id',
      index: 'fk_product_colors_products1_idx',
    },
    productId: {
      type: 'integer',
      unsigned: true,
      autoincrement: true,
      persist: false,
      index: 'fk_product_colors_products1_idx',
    },
    salesCollection: { kind: '1:m', entity: () => Sales, mappedBy: 'color' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Countries } from './Countries';
import { ProductSizes } from './ProductSizes';
import { Sales } from './Sales';

export class ProductCountries {
  [PrimaryKeyProp]?: ['product', 'countries'];
  country!: string;
  product!: ProductSizes;
  productId!: number;
  countries!: Countries;
  salesCollection = new Collection<Sales>(this);
}

export const ProductCountriesSchema = new EntitySchema({
  class: ProductCountries,
  properties: {
    country: { type: 'character', length: 2, persist: false },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => ProductSizes,
      fieldName: 'product_id',
      index: 'fk_product_countries_product_sizes1_idx',
    },
    productId: {
      type: 'integer',
      unsigned: true,
      persist: false,
      index: 'fk_product_countries_product_sizes1_idx',
    },
    countries: {
      primary: true,
      kind: 'm:1',
      entity: () => Countries,
      fieldName: 'country',
    },
    salesCollection: {
      kind: '1:m',
      entity: () => Sales,
      mappedBy: 'productCountries',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Countries } from './Countries';
import { ProductCountries } from './ProductCountries';
import { Products } from './Products';
import { Sales } from './Sales';

export class ProductSizes {
  [PrimaryKeyProp]?: 'product';
  product!: Products;
  productId!: number;
  size!: number;
  productCountries = new Collection<Countries>(this);
  productCountriesCollection = new Collection<ProductCountries>(this);
  salesCollection = new Collection<Sales>(this);
}

export const ProductSizesSchema = new EntitySchema({
  class: ProductSizes,
  uniques: [
    { name: 'size__product_id-UNIQUE', properties: ['size', 'productId'] },
  ],
  properties: {
    product: {
      primary: true,
      kind: '1:1',
      entity: () => Products,
      fieldName: 'product_id',
    },
    productId: { type: 'integer', unsigned: true, persist: false },
    size: { type: 'smallint', unsigned: true },
    productCountries: {
      kind: 'm:n',
      entity: () => Countries,
      pivotTable: 'product_countries',
      pivotEntity: () => ProductCountries,
      joinColumn: 'product_id',
      inverseJoinColumn: 'country',
    },
    productCountriesCollection: {
      kind: '1:m',
      entity: () => ProductCountries,
      mappedBy: 'product',
    },
    salesCollection: {
      kind: '1:m',
      entity: () => Sales,
      mappedBy: 'productSizes',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Colors } from './Colors';
import { ProductColors } from './ProductColors';
import { ProductSizes } from './ProductSizes';
import { SellerProducts } from './SellerProducts';
import { Sellers } from './Sellers';

export class Products {
  [PrimaryKeyProp]?: 'productId';
  productId!: number;
  name!: string;
  productColorsInverse = new Collection<Colors>(this);
  productColorsCollection = new Collection<ProductColors>(this);
  productSizes?: ProductSizes;
  sellerProductsCollection = new Collection<SellerProducts>(this);
  sellerProductsInverse = new Collection<Sellers>(this);
}

export const ProductsSchema = new EntitySchema({
  class: Products,
  properties: {
    productId: { primary: true, type: 'integer' },
    name: { type: 'string', unique: 'name_UNIQUE' },
    productColorsInverse: {
      kind: 'm:n',
      entity: () => Colors,
      mappedBy: 'productColors',
    },
    productColorsCollection: {
      kind: '1:m',
      entity: () => ProductColors,
      mappedBy: 'product',
    },
    productSizes: { kind: '1:1', entity: () => ProductSizes, mappedBy: 'product' },
    sellerProductsCollection: {
      kind: '1:m',
      entity: () => SellerProducts,
      mappedBy: 'product',
    },
    sellerProductsInverse: {
      kind: 'm:n',
      entity: () => Sellers,
      mappedBy: 'sellerProducts',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { ProductCountries } from './ProductCountries';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { SellerProducts } from './SellerProducts';

export class Sales {
  [PrimaryKeyProp]?: 'saleId';
  saleId!: number;
  country!: string;
  sellerId!: number;
  productId!: number;
  color?: ProductColors;
  colorId?: number;
  size?: number;
  exchanged?: SellerProducts;
  exchangedProductId?: number;
  productCountries!: ProductCountries;
  productSizes?: ProductSizes;
  sellerCountries!: SellerCountries;
  fkSalesSellerProducts1!: SellerProducts;
}

export const SalesSchema = new EntitySchema({
  class: Sales,
  uniques: [
    {
      name: 'product_id__size__color_id-UNIQUE',
      properties: ['colorId', 'productSizes'],
    },
  ],
  properties: {
    saleId: { primary: true, type: 'integer' },
    country: { type: 'character', length: 2, persist: false },
    sellerId: { type: 'integer', unsigned: true, persist: false },
    productId: {
      type: 'integer',
      unsigned: true,
      persist: false,
      index: 'product_id_idx',
    },
    color: {
      kind: 'm:1',
      entity: () => ProductColors,
      fieldNames: ['color_id', 'product_id'],
      nullable: true,
      index: 'fk_sales_product_colors1_idx',
    },
    colorId: { type: 'integer', unsigned: true, nullable: true, persist: false },
    size: { type: 'smallint', unsigned: true, nullable: true, persist: false },
    exchanged: {
      kind: 'm:1',
      entity: () => SellerProducts,
      fieldNames: ['seller_id', 'exchanged_product_id'],
      nullable: true,
      index: 'fk_sales_seller_products2_idx',
    },
    exchangedProductId: {
      type: 'integer',
      unsigned: true,
      nullable: true,
      persist: false,
    },
    productCountries: {
      kind: 'm:1',
      entity: () => ProductCountries,
      fieldNames: ['country', 'product_id'],
      index: 'fk_sales_product_countries1_idx',
    },
    productSizes: {
      kind: 'm:1',
      entity: () => ProductSizes,
      fieldNames: ['size', 'product_id'],
      nullable: true,
      index: 'fk_sales_product_sizes1_idx',
    },
    sellerCountries: {
      kind: 'm:1',
      entity: () => SellerCountries,
      fieldNames: ['country', 'seller_id'],
      index: 'fk_sales_seller_countries1_idx',
    },
    fkSalesSellerProducts1: {
      kind: 'm:1',
      entity: () => SellerProducts,
      fieldNames: ['seller_id', 'product_id'],
      index: 'fk_sales_seller_products1_idx',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Sales } from './Sales';
import { Sellers } from './Sellers';

export class SellerCountries {
  [PrimaryKeyProp]?: ['seller', 'countries'];
  country!: string;
  seller!: Sellers;
  sellerId!: number;
  countries!: Countries;
  salesCollection = new Collection<Sales>(this);
}

export const SellerCountriesSchema = new EntitySchema({
  class: SellerCountries,
  properties: {
    country: { type: 'character', length: 2, persist: false },
    seller: {
      primary: true,
      kind: 'm:1',
      entity: () => Sellers,
      fieldName: 'seller_id',
      index: 'fk_seller_countries_sellers1_idx',
    },
    sellerId: {
      type: 'integer',
      unsigned: true,
      persist: false,
      index: 'fk_seller_countries_sellers1_idx',
    },
    countries: {
      primary: true,
      kind: 'm:1',
      entity: () => Countries,
      fieldName: 'country',
    },
    salesCollection: {
      kind: '1:m',
      entity: () => Sales,
      mappedBy: 'sellerCountries',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Products } from './Products';
import { Sales } from './Sales';
import { Sellers } from './Sellers';

export class SellerProducts {
  [PrimaryKeyProp]?: ['seller', 'product'];
  seller!: Sellers;
  sellerId!: number;
  product!: Products;
  productId!: number;
  salesCollection = new Collection<Sales>(this);
  salesCollection1 = new Collection<Sales>(this);
}

export const SellerProductsSchema = new EntitySchema({
  class: SellerProducts,
  properties: {
    seller: {
      primary: true,
      kind: 'm:1',
      entity: () => Sellers,
      fieldName: 'seller_id',
    },
    sellerId: { type: 'integer', unsigned: true, persist: false },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => Products,
      fieldName: 'product_id',
      index: 'fk_seller_products_products1_idx',
    },
    productId: {
      type: 'integer',
      unsigned: true,
      persist: false,
      index: 'fk_seller_products_products1_idx',
    },
    salesCollection: { kind: '1:m', entity: () => Sales, mappedBy: 'exchanged' },
    salesCollection1: {
      kind: '1:m',
      entity: () => Sales,
      mappedBy: 'fkSalesSellerProducts1',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Products } from './Products';
import { SellerCountries } from './SellerCountries';
import { SellerProducts } from './SellerProducts';

export class Sellers {
  [PrimaryKeyProp]?: 'sellerId';
  sellerId!: number;
  name!: string;
  sellerCountries = new Collection<Countries>(this);
  sellerProducts = new Collection<Products>(this);
  sellerCountriesCollection = new Collection<SellerCountries>(this);
  sellerProductsCollection = new Collection<SellerProducts>(this);
}

export const SellersSchema = new EntitySchema({
  class: Sellers,
  properties: {
    sellerId: { primary: true, type: 'integer' },
    name: { type: 'string', unique: 'name_UNIQUE' },
    sellerCountries: {
      kind: 'm:n',
      entity: () => Countries,
      pivotTable: 'seller_countries',
      pivotEntity: () => SellerCountries,
      joinColumn: 'seller_id',
      inverseJoinColumn: 'country',
    },
    sellerProducts: {
      kind: 'm:n',
      entity: () => Products,
      pivotTable: 'seller_products',
      pivotEntity: () => SellerProducts,
      joinColumn: 'seller_id',
      inverseJoinColumn: 'product_id',
    },
    sellerCountriesCollection: {
      kind: '1:m',
      entity: () => SellerCountries,
      mappedBy: 'seller',
    },
    sellerProductsCollection: {
      kind: '1:m',
      entity: () => SellerProducts,
      mappedBy: 'seller',
    },
  },
});
",
]
`;

exports[`ambiguous_fk_example scalarPropertiesForRelations=always bidirectionalRelations=true identifiedReferences=true entitySchema=false: dump 1`] = `
[
  "import { Collection, Entity, ManyToMany, OneToMany, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { Products } from './Products';

@Entity()
export class Colors {

  [PrimaryKeyProp]?: 'colorId';

  @PrimaryKey()
  colorId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property()
  name!: string;

  @ManyToMany({ entity: () => Products, pivotTable: 'product_colors', pivotEntity: () => ProductColors, joinColumn: 'color_id', inverseJoinColumn: 'product_id' })
  productColors = new Collection<Products>(this);

  @OneToMany({ entity: () => ProductColors, mappedBy: 'color' })
  productColorsCollection = new Collection<ProductColors>(this);

}
",
  "import { Collection, Entity, ManyToMany, OneToMany, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductCountries } from './ProductCountries';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { Sellers } from './Sellers';

@Entity()
export class Countries {

  [PrimaryKeyProp]?: 'country';

  @PrimaryKey({ type: 'character', length: 2 })
  country!: string;

  @OneToMany({ entity: () => ProductCountries, mappedBy: 'countries' })
  productCountriesCollection = new Collection<ProductCountries>(this);

  @ManyToMany({ entity: () => ProductSizes, mappedBy: 'productCountries' })
  productCountriesInverse = new Collection<ProductSizes>(this);

  @OneToMany({ entity: () => SellerCountries, mappedBy: 'countries' })
  sellerCountriesCollection = new Collection<SellerCountries>(this);

  @ManyToMany({ entity: () => Sellers, mappedBy: 'sellerCountries' })
  sellerCountriesInverse = new Collection<Sellers>(this);

}
",
  "import { Collection, Entity, Index, ManyToOne, OneToMany, PrimaryKeyProp, Property, type Ref } from '@mikro-orm/core';
import { Colors } from './Colors';
import { Products } from './Products';
import { Sales } from './Sales';

@Entity()
export class ProductColors {

  [PrimaryKeyProp]?: ['color', 'product'];

  @ManyToOne({ entity: () => Colors, ref: true, fieldName: 'color_id', primary: true })
  color!: Ref<Colors>;

  @Property({ unsigned: true, persist: false })
  colorId!: number;

  @ManyToOne({ entity: () => Products, ref: true, fieldName: 'product_id', primary: true, index: 'fk_product_colors_products1_idx' })
  product!: Ref<Products>;

  @Index({ name: 'fk_product_colors_products1_idx' })
  @Property({ unsigned: true, autoincrement: true, persist: false })
  productId!: number;

  @OneToMany({ entity: () => Sales, mappedBy: 'color' })
  salesCollection = new Collection<Sales>(this);

}
",
  "import { Collection, Entity, Index, ManyToOne, OneToMany, PrimaryKeyProp, Property, type Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { ProductSizes } from './ProductSizes';
import { Sales } from './Sales';

@Entity()
export class ProductCountries {

  [PrimaryKeyProp]?: ['product', 'countries'];

  @Property({ type: 'character', length: 2, persist: false })
  country!: string;

  @ManyToOne({ entity: () => ProductSizes, ref: true, fieldName: 'product_id', primary: true, index: 'fk_product_countries_product_sizes1_idx' })
  product!: Ref<ProductSizes>;

  @Index({ name: 'fk_product_countries_product_sizes1_idx' })
  @Property({ unsigned: true, persist: false })
  productId!: number;

  @ManyToOne({ entity: () => Countries, ref: true, fieldName: 'country', primary: true })
  countries!: Ref<Countries>;

  @OneToMany({ entity: () => Sales, mappedBy: 'productCountries' })
  salesCollection = new Collection<Sales>(this);

}
",
  "import { Collection, Entity, ManyToMany, OneToMany, OneToOne, PrimaryKeyProp, Property, type Ref, Unique } from '@mikro-orm/core';
import { Countries } from './Countries';
import { ProductCountries } from './ProductCountries';
import { Products } from './Products';
import { Sales } from './Sales';

@Entity()
@Unique({ name: 'size__product_id-UNIQUE', properties: ['size', 'productId'] })
export class ProductSizes {

  [PrimaryKeyProp]?: 'product';

  @OneToOne({ entity: () => Products, ref: true, fieldName: 'product_id', primary: true })
  product!: Ref<Products>;

  @Property({ unsigned: true, persist: false })
  productId!: number;

  @Property({ type: 'smallint', unsigned: true })
  size!: number;

  @ManyToMany({ entity: () => Countries, pivotTable: 'product_countries', pivotEntity: () => ProductCountries, joinColumn: 'product_id', inverseJoinColumn: 'country' })
  productCountries = new Collection<Countries>(this);

  @OneToMany({ entity: () => ProductCountries, mappedBy: 'product' })
  productCountriesCollection = new Collection<ProductCountries>(this);

  @OneToMany({ entity: () => Sales, mappedBy: 'productSizes' })
  salesCollection = new Collection<Sales>(this);

}
",
  "import { Collection, Entity, ManyToMany, OneToMany, OneToOne, PrimaryKey, PrimaryKeyProp, Property, type Ref, Unique } from '@mikro-orm/core';
import { Colors } from './Colors';
import { ProductColors } from './ProductColors';
import { ProductSizes } from './ProductSizes';
import { SellerProducts } from './SellerProducts';
import { Sellers } from './Sellers';

@Entity()
export class Products {

  [PrimaryKeyProp]?: 'productId';

  @PrimaryKey()
  productId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property()
  name!: string;

  @ManyToMany({ entity: () => Colors, mappedBy: 'productColors' })
  productColorsInverse = new Collection<Colors>(this);

  @OneToMany({ entity: () => ProductColors, mappedBy: 'product' })
  productColorsCollection = new Collection<ProductColors>(this);

  @OneToOne({ entity: () => ProductSizes, ref: true, mappedBy: 'product' })
  productSizes?: Ref<ProductSizes>;

  @OneToMany({ entity: () => SellerProducts, mappedBy: 'product' })
  sellerProductsCollection = new Collection<SellerProducts>(this);

  @ManyToMany({ entity: () => Sellers, mappedBy: 'sellerProducts' })
  sellerProductsInverse = new Collection<Sellers>(this);

}
",
  "import { Entity, Index, ManyToOne, PrimaryKey, PrimaryKeyProp, Property, type Ref, Unique } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { ProductCountries } from './ProductCountries';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { SellerProducts } from './SellerProducts';

@Entity()
@Unique({ name: 'product_id__size__color_id-UNIQUE', properties: ['colorId', 'productSizes'] })
export class Sales {

  [PrimaryKeyProp]?: 'saleId';

  @PrimaryKey()
  saleId!: number;

  @Property({ type: 'character', length: 2, persist: false })
  country!: string;

  @Property({ unsigned: true, persist: false })
  sellerId!: number;

  @Index({ name: 'product_id_idx' })
  @Property({ unsigned: true, persist: false })
  productId!: number;

  @ManyToOne({ entity: () => ProductColors, ref: true, fieldNames: ['color_id', 'product_id'], nullable: true, index: 'fk_sales_product_colors1_idx' })
  color?: Ref<ProductColors>;

  @Property({ unsigned: true, nullable: true, persist: false })
  colorId?: number;

  @Property({ type: 'smallint', unsigned: true, nullable: true, persist: false })
  size?: number;

  @ManyToOne({ entity: () => SellerProducts, ref: true, fieldNames: ['seller_id', 'exchanged_product_id'], nullable: true, index: 'fk_sales_seller_products2_idx' })
  exchanged?: Ref<SellerProducts>;

  @Property({ unsigned: true, nullable: true, persist: false })
  exchangedProductId?: number;

  @ManyToOne({ entity: () => ProductCountries, ref: true, fieldNames: ['country', 'product_id'], index: 'fk_sales_product_countries1_idx' })
  productCountries!: Ref<ProductCountries>;

  @ManyToOne({ entity: () => ProductSizes, ref: true, fieldNames: ['size', 'product_id'], nullable: true, index: 'fk_sales_product_sizes1_idx' })
  productSizes?: Ref<ProductSizes>;

  @ManyToOne({ entity: () => SellerCountries, ref: true, fieldNames: ['country', 'seller_id'], index: 'fk_sales_seller_countries1_idx' })
  sellerCountries!: Ref<SellerCountries>;

  @ManyToOne({ entity: () => SellerProducts, ref: true, fieldNames: ['seller_id', 'product_id'], index: 'fk_sales_seller_products1_idx' })
  fkSalesSellerProducts1!: Ref<SellerProducts>;

}
",
  "import { Collection, Entity, Index, ManyToOne, OneToMany, PrimaryKeyProp, Property, type Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Sales } from './Sales';
import { Sellers } from './Sellers';

@Entity()
export class SellerCountries {

  [PrimaryKeyProp]?: ['seller', 'countries'];

  @Property({ type: 'character', length: 2, persist: false })
  country!: string;

  @ManyToOne({ entity: () => Sellers, ref: true, fieldName: 'seller_id', primary: true, index: 'fk_seller_countries_sellers1_idx' })
  seller!: Ref<Sellers>;

  @Index({ name: 'fk_seller_countries_sellers1_idx' })
  @Property({ unsigned: true, persist: false })
  sellerId!: number;

  @ManyToOne({ entity: () => Countries, ref: true, fieldName: 'country', primary: true })
  countries!: Ref<Countries>;

  @OneToMany({ entity: () => Sales, mappedBy: 'sellerCountries' })
  salesCollection = new Collection<Sales>(this);

}
",
  "import { Collection, Entity, Index, ManyToOne, OneToMany, PrimaryKeyProp, Property, type Ref } from '@mikro-orm/core';
import { Products } from './Products';
import { Sales } from './Sales';
import { Sellers } from './Sellers';

@Entity()
export class SellerProducts {

  [PrimaryKeyProp]?: ['seller', 'product'];

  @ManyToOne({ entity: () => Sellers, ref: true, fieldName: 'seller_id', primary: true })
  seller!: Ref<Sellers>;

  @Property({ unsigned: true, persist: false })
  sellerId!: number;

  @ManyToOne({ entity: () => Products, ref: true, fieldName: 'product_id', primary: true, index: 'fk_seller_products_products1_idx' })
  product!: Ref<Products>;

  @Index({ name: 'fk_seller_products_products1_idx' })
  @Property({ unsigned: true, persist: false })
  productId!: number;

  @OneToMany({ entity: () => Sales, mappedBy: 'exchanged' })
  salesCollection = new Collection<Sales>(this);

  @OneToMany({ entity: () => Sales, mappedBy: 'fkSalesSellerProducts1' })
  salesCollection1 = new Collection<Sales>(this);

}
",
  "import { Collection, Entity, ManyToMany, OneToMany, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Products } from './Products';
import { SellerCountries } from './SellerCountries';
import { SellerProducts } from './SellerProducts';

@Entity()
export class Sellers {

  [PrimaryKeyProp]?: 'sellerId';

  @PrimaryKey()
  sellerId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property()
  name!: string;

  @ManyToMany({ entity: () => Countries, pivotTable: 'seller_countries', pivotEntity: () => SellerCountries, joinColumn: 'seller_id', inverseJoinColumn: 'country' })
  sellerCountries = new Collection<Countries>(this);

  @ManyToMany({ entity: () => Products, pivotTable: 'seller_products', pivotEntity: () => SellerProducts, joinColumn: 'seller_id', inverseJoinColumn: 'product_id' })
  sellerProducts = new Collection<Products>(this);

  @OneToMany({ entity: () => SellerCountries, mappedBy: 'seller' })
  sellerCountriesCollection = new Collection<SellerCountries>(this);

  @OneToMany({ entity: () => SellerProducts, mappedBy: 'seller' })
  sellerProductsCollection = new Collection<SellerProducts>(this);

}
",
]
`;

exports[`ambiguous_fk_example scalarPropertiesForRelations=always bidirectionalRelations=true identifiedReferences=true entitySchema=true: dump 1`] = `
[
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { Products } from './Products';

export class Colors {
  [PrimaryKeyProp]?: 'colorId';
  colorId!: number;
  name!: string;
  productColors = new Collection<Products>(this);
  productColorsCollection = new Collection<ProductColors>(this);
}

export const ColorsSchema = new EntitySchema({
  class: Colors,
  properties: {
    colorId: { primary: true, type: 'integer' },
    name: { type: 'string', unique: 'name_UNIQUE' },
    productColors: {
      kind: 'm:n',
      entity: () => Products,
      pivotTable: 'product_colors',
      pivotEntity: () => ProductColors,
      joinColumn: 'color_id',
      inverseJoinColumn: 'product_id',
    },
    productColorsCollection: {
      kind: '1:m',
      entity: () => ProductColors,
      mappedBy: 'color',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductCountries } from './ProductCountries';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { Sellers } from './Sellers';

export class Countries {
  [PrimaryKeyProp]?: 'country';
  country!: string;
  productCountriesCollection = new Collection<ProductCountries>(this);
  productCountriesInverse = new Collection<ProductSizes>(this);
  sellerCountriesCollection = new Collection<SellerCountries>(this);
  sellerCountriesInverse = new Collection<Sellers>(this);
}

export const CountriesSchema = new EntitySchema({
  class: Countries,
  properties: {
    country: { primary: true, type: 'character', length: 2 },
    productCountriesCollection: {
      kind: '1:m',
      entity: () => ProductCountries,
      mappedBy: 'countries',
    },
    productCountriesInverse: {
      kind: 'm:n',
      entity: () => ProductSizes,
      mappedBy: 'productCountries',
    },
    sellerCountriesCollection: {
      kind: '1:m',
      entity: () => SellerCountries,
      mappedBy: 'countries',
    },
    sellerCountriesInverse: {
      kind: 'm:n',
      entity: () => Sellers,
      mappedBy: 'sellerCountries',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp, type Ref } from '@mikro-orm/core';
import { Colors } from './Colors';
import { Products } from './Products';
import { Sales } from './Sales';

export class ProductColors {
  [PrimaryKeyProp]?: ['color', 'product'];
  color!: Ref<Colors>;
  colorId!: number;
  product!: Ref<Products>;
  productId!: number;
  salesCollection = new Collection<Sales>(this);
}

export const ProductColorsSchema = new EntitySchema({
  class: ProductColors,
  properties: {
    color: {
      primary: true,
      kind: 'm:1',
      entity: () => Colors,
      ref: true,
      fieldName: 'color_id',
    },
    colorId: { type: 'integer', unsigned: true, persist: false },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => Products,
      ref: true,
      fieldName: 'product_id',
      index: 'fk_product_colors_products1_idx',
    },
    productId: {
      type: 'integer',
      unsigned: true,
      autoincrement: true,
      persist: false,
      index: 'fk_product_colors_products1_idx',
    },
    salesCollection: { kind: '1:m', entity: () => Sales, mappedBy: 'color' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp, type Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { ProductSizes } from './ProductSizes';
import { Sales } from './Sales';

export class ProductCountries {
  [PrimaryKeyProp]?: ['product', 'countries'];
  country!: string;
  product!: Ref<ProductSizes>;
  productId!: number;
  countries!: Ref<Countries>;
  salesCollection = new Collection<Sales>(this);
}

export const ProductCountriesSchema = new EntitySchema({
  class: ProductCountries,
  properties: {
    country: { type: 'character', length: 2, persist: false },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => ProductSizes,
      ref: true,
      fieldName: 'product_id',
      index: 'fk_product_countries_product_sizes1_idx',
    },
    productId: {
      type: 'integer',
      unsigned: true,
      persist: false,
      index: 'fk_product_countries_product_sizes1_idx',
    },
    countries: {
      primary: true,
      kind: 'm:1',
      entity: () => Countries,
      ref: true,
      fieldName: 'country',
    },
    salesCollection: {
      kind: '1:m',
      entity: () => Sales,
      mappedBy: 'productCountries',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp, type Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { ProductCountries } from './ProductCountries';
import { Products } from './Products';
import { Sales } from './Sales';

export class ProductSizes {
  [PrimaryKeyProp]?: 'product';
  product!: Ref<Products>;
  productId!: number;
  size!: number;
  productCountries = new Collection<Countries>(this);
  productCountriesCollection = new Collection<ProductCountries>(this);
  salesCollection = new Collection<Sales>(this);
}

export const ProductSizesSchema = new EntitySchema({
  class: ProductSizes,
  uniques: [
    { name: 'size__product_id-UNIQUE', properties: ['size', 'productId'] },
  ],
  properties: {
    product: {
      primary: true,
      kind: '1:1',
      entity: () => Products,
      ref: true,
      fieldName: 'product_id',
    },
    productId: { type: 'integer', unsigned: true, persist: false },
    size: { type: 'smallint', unsigned: true },
    productCountries: {
      kind: 'm:n',
      entity: () => Countries,
      pivotTable: 'product_countries',
      pivotEntity: () => ProductCountries,
      joinColumn: 'product_id',
      inverseJoinColumn: 'country',
    },
    productCountriesCollection: {
      kind: '1:m',
      entity: () => ProductCountries,
      mappedBy: 'product',
    },
    salesCollection: {
      kind: '1:m',
      entity: () => Sales,
      mappedBy: 'productSizes',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp, type Ref } from '@mikro-orm/core';
import { Colors } from './Colors';
import { ProductColors } from './ProductColors';
import { ProductSizes } from './ProductSizes';
import { SellerProducts } from './SellerProducts';
import { Sellers } from './Sellers';

export class Products {
  [PrimaryKeyProp]?: 'productId';
  productId!: number;
  name!: string;
  productColorsInverse = new Collection<Colors>(this);
  productColorsCollection = new Collection<ProductColors>(this);
  productSizes?: Ref<ProductSizes>;
  sellerProductsCollection = new Collection<SellerProducts>(this);
  sellerProductsInverse = new Collection<Sellers>(this);
}

export const ProductsSchema = new EntitySchema({
  class: Products,
  properties: {
    productId: { primary: true, type: 'integer' },
    name: { type: 'string', unique: 'name_UNIQUE' },
    productColorsInverse: {
      kind: 'm:n',
      entity: () => Colors,
      mappedBy: 'productColors',
    },
    productColorsCollection: {
      kind: '1:m',
      entity: () => ProductColors,
      mappedBy: 'product',
    },
    productSizes: {
      kind: '1:1',
      entity: () => ProductSizes,
      ref: true,
      mappedBy: 'product',
    },
    sellerProductsCollection: {
      kind: '1:m',
      entity: () => SellerProducts,
      mappedBy: 'product',
    },
    sellerProductsInverse: {
      kind: 'm:n',
      entity: () => Sellers,
      mappedBy: 'sellerProducts',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, type Ref } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { ProductCountries } from './ProductCountries';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { SellerProducts } from './SellerProducts';

export class Sales {
  [PrimaryKeyProp]?: 'saleId';
  saleId!: number;
  country!: string;
  sellerId!: number;
  productId!: number;
  color?: Ref<ProductColors>;
  colorId?: number;
  size?: number;
  exchanged?: Ref<SellerProducts>;
  exchangedProductId?: number;
  productCountries!: Ref<ProductCountries>;
  productSizes?: Ref<ProductSizes>;
  sellerCountries!: Ref<SellerCountries>;
  fkSalesSellerProducts1!: Ref<SellerProducts>;
}

export const SalesSchema = new EntitySchema({
  class: Sales,
  uniques: [
    {
      name: 'product_id__size__color_id-UNIQUE',
      properties: ['colorId', 'productSizes'],
    },
  ],
  properties: {
    saleId: { primary: true, type: 'integer' },
    country: { type: 'character', length: 2, persist: false },
    sellerId: { type: 'integer', unsigned: true, persist: false },
    productId: {
      type: 'integer',
      unsigned: true,
      persist: false,
      index: 'product_id_idx',
    },
    color: {
      kind: 'm:1',
      entity: () => ProductColors,
      ref: true,
      fieldNames: ['color_id', 'product_id'],
      nullable: true,
      index: 'fk_sales_product_colors1_idx',
    },
    colorId: { type: 'integer', unsigned: true, nullable: true, persist: false },
    size: { type: 'smallint', unsigned: true, nullable: true, persist: false },
    exchanged: {
      kind: 'm:1',
      entity: () => SellerProducts,
      ref: true,
      fieldNames: ['seller_id', 'exchanged_product_id'],
      nullable: true,
      index: 'fk_sales_seller_products2_idx',
    },
    exchangedProductId: {
      type: 'integer',
      unsigned: true,
      nullable: true,
      persist: false,
    },
    productCountries: {
      kind: 'm:1',
      entity: () => ProductCountries,
      ref: true,
      fieldNames: ['country', 'product_id'],
      index: 'fk_sales_product_countries1_idx',
    },
    productSizes: {
      kind: 'm:1',
      entity: () => ProductSizes,
      ref: true,
      fieldNames: ['size', 'product_id'],
      nullable: true,
      index: 'fk_sales_product_sizes1_idx',
    },
    sellerCountries: {
      kind: 'm:1',
      entity: () => SellerCountries,
      ref: true,
      fieldNames: ['country', 'seller_id'],
      index: 'fk_sales_seller_countries1_idx',
    },
    fkSalesSellerProducts1: {
      kind: 'm:1',
      entity: () => SellerProducts,
      ref: true,
      fieldNames: ['seller_id', 'product_id'],
      index: 'fk_sales_seller_products1_idx',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp, type Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Sales } from './Sales';
import { Sellers } from './Sellers';

export class SellerCountries {
  [PrimaryKeyProp]?: ['seller', 'countries'];
  country!: string;
  seller!: Ref<Sellers>;
  sellerId!: number;
  countries!: Ref<Countries>;
  salesCollection = new Collection<Sales>(this);
}

export const SellerCountriesSchema = new EntitySchema({
  class: SellerCountries,
  properties: {
    country: { type: 'character', length: 2, persist: false },
    seller: {
      primary: true,
      kind: 'm:1',
      entity: () => Sellers,
      ref: true,
      fieldName: 'seller_id',
      index: 'fk_seller_countries_sellers1_idx',
    },
    sellerId: {
      type: 'integer',
      unsigned: true,
      persist: false,
      index: 'fk_seller_countries_sellers1_idx',
    },
    countries: {
      primary: true,
      kind: 'm:1',
      entity: () => Countries,
      ref: true,
      fieldName: 'country',
    },
    salesCollection: {
      kind: '1:m',
      entity: () => Sales,
      mappedBy: 'sellerCountries',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp, type Ref } from '@mikro-orm/core';
import { Products } from './Products';
import { Sales } from './Sales';
import { Sellers } from './Sellers';

export class SellerProducts {
  [PrimaryKeyProp]?: ['seller', 'product'];
  seller!: Ref<Sellers>;
  sellerId!: number;
  product!: Ref<Products>;
  productId!: number;
  salesCollection = new Collection<Sales>(this);
  salesCollection1 = new Collection<Sales>(this);
}

export const SellerProductsSchema = new EntitySchema({
  class: SellerProducts,
  properties: {
    seller: {
      primary: true,
      kind: 'm:1',
      entity: () => Sellers,
      ref: true,
      fieldName: 'seller_id',
    },
    sellerId: { type: 'integer', unsigned: true, persist: false },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => Products,
      ref: true,
      fieldName: 'product_id',
      index: 'fk_seller_products_products1_idx',
    },
    productId: {
      type: 'integer',
      unsigned: true,
      persist: false,
      index: 'fk_seller_products_products1_idx',
    },
    salesCollection: { kind: '1:m', entity: () => Sales, mappedBy: 'exchanged' },
    salesCollection1: {
      kind: '1:m',
      entity: () => Sales,
      mappedBy: 'fkSalesSellerProducts1',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Products } from './Products';
import { SellerCountries } from './SellerCountries';
import { SellerProducts } from './SellerProducts';

export class Sellers {
  [PrimaryKeyProp]?: 'sellerId';
  sellerId!: number;
  name!: string;
  sellerCountries = new Collection<Countries>(this);
  sellerProducts = new Collection<Products>(this);
  sellerCountriesCollection = new Collection<SellerCountries>(this);
  sellerProductsCollection = new Collection<SellerProducts>(this);
}

export const SellersSchema = new EntitySchema({
  class: Sellers,
  properties: {
    sellerId: { primary: true, type: 'integer' },
    name: { type: 'string', unique: 'name_UNIQUE' },
    sellerCountries: {
      kind: 'm:n',
      entity: () => Countries,
      pivotTable: 'seller_countries',
      pivotEntity: () => SellerCountries,
      joinColumn: 'seller_id',
      inverseJoinColumn: 'country',
    },
    sellerProducts: {
      kind: 'm:n',
      entity: () => Products,
      pivotTable: 'seller_products',
      pivotEntity: () => SellerProducts,
      joinColumn: 'seller_id',
      inverseJoinColumn: 'product_id',
    },
    sellerCountriesCollection: {
      kind: '1:m',
      entity: () => SellerCountries,
      mappedBy: 'seller',
    },
    sellerProductsCollection: {
      kind: '1:m',
      entity: () => SellerProducts,
      mappedBy: 'seller',
    },
  },
});
",
]
`;

exports[`ambiguous_fk_example scalarPropertiesForRelations=never bidirectionalRelations=false identifiedReferences=false entitySchema=false: dump 1`] = `
[
  "import { Collection, Entity, ManyToMany, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { Products } from './Products';

@Entity()
export class Colors {

  [PrimaryKeyProp]?: 'colorId';

  @PrimaryKey()
  colorId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property()
  name!: string;

  @ManyToMany({ entity: () => Products, pivotTable: 'product_colors', pivotEntity: () => ProductColors, joinColumn: 'color_id', inverseJoinColumn: 'product_id' })
  productColors = new Collection<Products>(this);

}
",
  "import { Collection, Entity, ManyToMany, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductCountries } from './ProductCountries';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { Sellers } from './Sellers';

@Entity()
export class Countries {

  [PrimaryKeyProp]?: 'country';

  @PrimaryKey({ type: 'character', length: 2 })
  country!: string;

  @ManyToMany({ entity: () => ProductSizes, pivotTable: 'product_countries', pivotEntity: () => ProductCountries, joinColumn: 'country', inverseJoinColumn: 'product_id' })
  productCountries = new Collection<ProductSizes>(this);

  @ManyToMany({ entity: () => Sellers, pivotTable: 'seller_countries', pivotEntity: () => SellerCountries, joinColumn: 'country', inverseJoinColumn: 'seller_id' })
  sellerCountries = new Collection<Sellers>(this);

}
",
  "import { Entity, ManyToOne, PrimaryKeyProp } from '@mikro-orm/core';
import { Colors } from './Colors';
import { Products } from './Products';

@Entity()
export class ProductColors {

  [PrimaryKeyProp]?: ['color', 'product'];

  @ManyToOne({ entity: () => Colors, fieldName: 'color_id', primary: true })
  color!: Colors;

  @ManyToOne({ entity: () => Products, fieldName: 'product_id', primary: true, index: 'fk_product_colors_products1_idx' })
  product!: Products;

}
",
  "import { Entity, ManyToOne, PrimaryKeyProp } from '@mikro-orm/core';
import { Countries } from './Countries';
import { ProductSizes } from './ProductSizes';

@Entity()
export class ProductCountries {

  [PrimaryKeyProp]?: ['country', 'product'];

  @ManyToOne({ entity: () => Countries, fieldName: 'country', primary: true })
  country!: Countries;

  @ManyToOne({ entity: () => ProductSizes, fieldName: 'product_id', primary: true, index: 'fk_product_countries_product_sizes1_idx' })
  product!: ProductSizes;

}
",
  "import { Entity, OneToOne, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { Products } from './Products';

@Entity()
@Unique({ name: 'size__product_id-UNIQUE', properties: ['size', 'product'] })
export class ProductSizes {

  [PrimaryKeyProp]?: 'product';

  @OneToOne({ entity: () => Products, fieldName: 'product_id', primary: true })
  product!: Products;

  @Property({ type: 'smallint', unsigned: true })
  size!: number;

}
",
  "import { Entity, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';

@Entity()
export class Products {

  [PrimaryKeyProp]?: 'productId';

  @PrimaryKey()
  productId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property()
  name!: string;

}
",
  "import { Entity, Index, ManyToOne, PrimaryKey, PrimaryKeyProp, Unique } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { ProductCountries } from './ProductCountries';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { SellerProducts } from './SellerProducts';

@Entity()
@Index({ name: 'product_id_idx', expression: 'create index \`product_id_idx\` on \`sales\` (\`product_id\`)' })
@Unique({ name: 'product_id__size__color_id-UNIQUE', expression: 'create unique index \`product_id__size__color_id-UNIQUE\` on \`sales\` (\`product_id\`, \`color_id\`, \`size\`)' })
export class Sales {

  [PrimaryKeyProp]?: 'saleId';

  @PrimaryKey()
  saleId!: number;

  @ManyToOne({ entity: () => ProductColors, fieldNames: ['color_id', 'product_id'], nullable: true, index: 'fk_sales_product_colors1_idx' })
  color?: ProductColors;

  @ManyToOne({ entity: () => ProductSizes, fieldNames: ['size', 'product_id'], nullable: true, index: 'fk_sales_product_sizes1_idx' })
  size?: ProductSizes;

  @ManyToOne({ entity: () => SellerProducts, fieldNames: ['seller_id', 'exchanged_product_id'], nullable: true, index: 'fk_sales_seller_products2_idx' })
  exchanged?: SellerProducts;

  @ManyToOne({ entity: () => ProductCountries, fieldNames: ['country', 'product_id'], index: 'fk_sales_product_countries1_idx' })
  productCountries!: ProductCountries;

  @ManyToOne({ entity: () => SellerCountries, fieldNames: ['country', 'seller_id'], index: 'fk_sales_seller_countries1_idx' })
  sellerCountries!: SellerCountries;

  @ManyToOne({ entity: () => SellerProducts, fieldNames: ['seller_id', 'product_id'], index: 'fk_sales_seller_products1_idx' })
  fkSalesSellerProducts1!: SellerProducts;

}
",
  "import { Entity, ManyToOne, PrimaryKeyProp } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Sellers } from './Sellers';

@Entity()
export class SellerCountries {

  [PrimaryKeyProp]?: ['country', 'seller'];

  @ManyToOne({ entity: () => Countries, fieldName: 'country', primary: true })
  country!: Countries;

  @ManyToOne({ entity: () => Sellers, fieldName: 'seller_id', primary: true, index: 'fk_seller_countries_sellers1_idx' })
  seller!: Sellers;

}
",
  "import { Entity, ManyToOne, PrimaryKeyProp } from '@mikro-orm/core';
import { Products } from './Products';
import { Sellers } from './Sellers';

@Entity()
export class SellerProducts {

  [PrimaryKeyProp]?: ['seller', 'product'];

  @ManyToOne({ entity: () => Sellers, fieldName: 'seller_id', primary: true })
  seller!: Sellers;

  @ManyToOne({ entity: () => Products, fieldName: 'product_id', primary: true, index: 'fk_seller_products_products1_idx' })
  product!: Products;

}
",
  "import { Collection, Entity, ManyToMany, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { Products } from './Products';
import { SellerProducts } from './SellerProducts';

@Entity()
export class Sellers {

  [PrimaryKeyProp]?: 'sellerId';

  @PrimaryKey()
  sellerId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property()
  name!: string;

  @ManyToMany({ entity: () => Products, pivotTable: 'seller_products', pivotEntity: () => SellerProducts, joinColumn: 'seller_id', inverseJoinColumn: 'product_id' })
  sellerProducts = new Collection<Products>(this);

}
",
]
`;

exports[`ambiguous_fk_example scalarPropertiesForRelations=never bidirectionalRelations=false identifiedReferences=false entitySchema=true: dump 1`] = `
[
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { Products } from './Products';

export class Colors {
  [PrimaryKeyProp]?: 'colorId';
  colorId!: number;
  name!: string;
  productColors = new Collection<Products>(this);
}

export const ColorsSchema = new EntitySchema({
  class: Colors,
  properties: {
    colorId: { primary: true, type: 'integer' },
    name: { type: 'string', unique: 'name_UNIQUE' },
    productColors: {
      kind: 'm:n',
      entity: () => Products,
      pivotTable: 'product_colors',
      pivotEntity: () => ProductColors,
      joinColumn: 'color_id',
      inverseJoinColumn: 'product_id',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductCountries } from './ProductCountries';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { Sellers } from './Sellers';

export class Countries {
  [PrimaryKeyProp]?: 'country';
  country!: string;
  productCountries = new Collection<ProductSizes>(this);
  sellerCountries = new Collection<Sellers>(this);
}

export const CountriesSchema = new EntitySchema({
  class: Countries,
  properties: {
    country: { primary: true, type: 'character', length: 2 },
    productCountries: {
      kind: 'm:n',
      entity: () => ProductSizes,
      pivotTable: 'product_countries',
      pivotEntity: () => ProductCountries,
      joinColumn: 'country',
      inverseJoinColumn: 'product_id',
    },
    sellerCountries: {
      kind: 'm:n',
      entity: () => Sellers,
      pivotTable: 'seller_countries',
      pivotEntity: () => SellerCountries,
      joinColumn: 'country',
      inverseJoinColumn: 'seller_id',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Colors } from './Colors';
import { Products } from './Products';

export class ProductColors {
  [PrimaryKeyProp]?: ['color', 'product'];
  color!: Colors;
  product!: Products;
}

export const ProductColorsSchema = new EntitySchema({
  class: ProductColors,
  properties: {
    color: {
      primary: true,
      kind: 'm:1',
      entity: () => Colors,
      fieldName: 'color_id',
    },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => Products,
      fieldName: 'product_id',
      index: 'fk_product_colors_products1_idx',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Countries } from './Countries';
import { ProductSizes } from './ProductSizes';

export class ProductCountries {
  [PrimaryKeyProp]?: ['country', 'product'];
  country!: Countries;
  product!: ProductSizes;
}

export const ProductCountriesSchema = new EntitySchema({
  class: ProductCountries,
  properties: {
    country: {
      primary: true,
      kind: 'm:1',
      entity: () => Countries,
      fieldName: 'country',
    },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => ProductSizes,
      fieldName: 'product_id',
      index: 'fk_product_countries_product_sizes1_idx',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Products } from './Products';

export class ProductSizes {
  [PrimaryKeyProp]?: 'product';
  product!: Products;
  size!: number;
}

export const ProductSizesSchema = new EntitySchema({
  class: ProductSizes,
  uniques: [{ name: 'size__product_id-UNIQUE', properties: ['size', 'product'] }],
  properties: {
    product: {
      primary: true,
      kind: '1:1',
      entity: () => Products,
      fieldName: 'product_id',
    },
    size: { type: 'smallint', unsigned: true },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Products {
  [PrimaryKeyProp]?: 'productId';
  productId!: number;
  name!: string;
}

export const ProductsSchema = new EntitySchema({
  class: Products,
  properties: {
    productId: { primary: true, type: 'integer' },
    name: { type: 'string', unique: 'name_UNIQUE' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { ProductCountries } from './ProductCountries';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { SellerProducts } from './SellerProducts';

export class Sales {
  [PrimaryKeyProp]?: 'saleId';
  saleId!: number;
  color?: ProductColors;
  size?: ProductSizes;
  exchanged?: SellerProducts;
  productCountries!: ProductCountries;
  sellerCountries!: SellerCountries;
  fkSalesSellerProducts1!: SellerProducts;
}

export const SalesSchema = new EntitySchema({
  class: Sales,
  indexes: [
    {
      name: 'product_id_idx',
      expression: 'create index \`product_id_idx\` on \`sales\` (\`product_id\`)',
    },
  ],
  uniques: [
    {
      name: 'product_id__size__color_id-UNIQUE',
      expression: 'create unique index \`product_id__size__color_id-UNIQUE\` on \`sales\` (\`product_id\`, \`color_id\`, \`size\`)',
    },
  ],
  properties: {
    saleId: { primary: true, type: 'integer' },
    color: {
      kind: 'm:1',
      entity: () => ProductColors,
      fieldNames: ['color_id', 'product_id'],
      nullable: true,
      index: 'fk_sales_product_colors1_idx',
    },
    size: {
      kind: 'm:1',
      entity: () => ProductSizes,
      fieldNames: ['size', 'product_id'],
      nullable: true,
      index: 'fk_sales_product_sizes1_idx',
    },
    exchanged: {
      kind: 'm:1',
      entity: () => SellerProducts,
      fieldNames: ['seller_id', 'exchanged_product_id'],
      nullable: true,
      index: 'fk_sales_seller_products2_idx',
    },
    productCountries: {
      kind: 'm:1',
      entity: () => ProductCountries,
      fieldNames: ['country', 'product_id'],
      index: 'fk_sales_product_countries1_idx',
    },
    sellerCountries: {
      kind: 'm:1',
      entity: () => SellerCountries,
      fieldNames: ['country', 'seller_id'],
      index: 'fk_sales_seller_countries1_idx',
    },
    fkSalesSellerProducts1: {
      kind: 'm:1',
      entity: () => SellerProducts,
      fieldNames: ['seller_id', 'product_id'],
      index: 'fk_sales_seller_products1_idx',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Sellers } from './Sellers';

export class SellerCountries {
  [PrimaryKeyProp]?: ['country', 'seller'];
  country!: Countries;
  seller!: Sellers;
}

export const SellerCountriesSchema = new EntitySchema({
  class: SellerCountries,
  properties: {
    country: {
      primary: true,
      kind: 'm:1',
      entity: () => Countries,
      fieldName: 'country',
    },
    seller: {
      primary: true,
      kind: 'm:1',
      entity: () => Sellers,
      fieldName: 'seller_id',
      index: 'fk_seller_countries_sellers1_idx',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Products } from './Products';
import { Sellers } from './Sellers';

export class SellerProducts {
  [PrimaryKeyProp]?: ['seller', 'product'];
  seller!: Sellers;
  product!: Products;
}

export const SellerProductsSchema = new EntitySchema({
  class: SellerProducts,
  properties: {
    seller: {
      primary: true,
      kind: 'm:1',
      entity: () => Sellers,
      fieldName: 'seller_id',
    },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => Products,
      fieldName: 'product_id',
      index: 'fk_seller_products_products1_idx',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Products } from './Products';
import { SellerProducts } from './SellerProducts';

export class Sellers {
  [PrimaryKeyProp]?: 'sellerId';
  sellerId!: number;
  name!: string;
  sellerProducts = new Collection<Products>(this);
}

export const SellersSchema = new EntitySchema({
  class: Sellers,
  properties: {
    sellerId: { primary: true, type: 'integer' },
    name: { type: 'string', unique: 'name_UNIQUE' },
    sellerProducts: {
      kind: 'm:n',
      entity: () => Products,
      pivotTable: 'seller_products',
      pivotEntity: () => SellerProducts,
      joinColumn: 'seller_id',
      inverseJoinColumn: 'product_id',
    },
  },
});
",
]
`;

exports[`ambiguous_fk_example scalarPropertiesForRelations=never bidirectionalRelations=false identifiedReferences=true entitySchema=false: dump 1`] = `
[
  "import { Collection, Entity, ManyToMany, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { Products } from './Products';

@Entity()
export class Colors {

  [PrimaryKeyProp]?: 'colorId';

  @PrimaryKey()
  colorId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property()
  name!: string;

  @ManyToMany({ entity: () => Products, pivotTable: 'product_colors', pivotEntity: () => ProductColors, joinColumn: 'color_id', inverseJoinColumn: 'product_id' })
  productColors = new Collection<Products>(this);

}
",
  "import { Collection, Entity, ManyToMany, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductCountries } from './ProductCountries';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { Sellers } from './Sellers';

@Entity()
export class Countries {

  [PrimaryKeyProp]?: 'country';

  @PrimaryKey({ type: 'character', length: 2 })
  country!: string;

  @ManyToMany({ entity: () => ProductSizes, pivotTable: 'product_countries', pivotEntity: () => ProductCountries, joinColumn: 'country', inverseJoinColumn: 'product_id' })
  productCountries = new Collection<ProductSizes>(this);

  @ManyToMany({ entity: () => Sellers, pivotTable: 'seller_countries', pivotEntity: () => SellerCountries, joinColumn: 'country', inverseJoinColumn: 'seller_id' })
  sellerCountries = new Collection<Sellers>(this);

}
",
  "import { Entity, ManyToOne, PrimaryKeyProp, type Ref } from '@mikro-orm/core';
import { Colors } from './Colors';
import { Products } from './Products';

@Entity()
export class ProductColors {

  [PrimaryKeyProp]?: ['color', 'product'];

  @ManyToOne({ entity: () => Colors, ref: true, fieldName: 'color_id', primary: true })
  color!: Ref<Colors>;

  @ManyToOne({ entity: () => Products, ref: true, fieldName: 'product_id', primary: true, index: 'fk_product_colors_products1_idx' })
  product!: Ref<Products>;

}
",
  "import { Entity, ManyToOne, PrimaryKeyProp, type Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { ProductSizes } from './ProductSizes';

@Entity()
export class ProductCountries {

  [PrimaryKeyProp]?: ['country', 'product'];

  @ManyToOne({ entity: () => Countries, ref: true, fieldName: 'country', primary: true })
  country!: Ref<Countries>;

  @ManyToOne({ entity: () => ProductSizes, ref: true, fieldName: 'product_id', primary: true, index: 'fk_product_countries_product_sizes1_idx' })
  product!: Ref<ProductSizes>;

}
",
  "import { Entity, OneToOne, PrimaryKeyProp, Property, type Ref, Unique } from '@mikro-orm/core';
import { Products } from './Products';

@Entity()
@Unique({ name: 'size__product_id-UNIQUE', properties: ['size', 'product'] })
export class ProductSizes {

  [PrimaryKeyProp]?: 'product';

  @OneToOne({ entity: () => Products, ref: true, fieldName: 'product_id', primary: true })
  product!: Ref<Products>;

  @Property({ type: 'smallint', unsigned: true })
  size!: number;

}
",
  "import { Entity, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';

@Entity()
export class Products {

  [PrimaryKeyProp]?: 'productId';

  @PrimaryKey()
  productId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property()
  name!: string;

}
",
  "import { Entity, Index, ManyToOne, PrimaryKey, PrimaryKeyProp, type Ref, Unique } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { ProductCountries } from './ProductCountries';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { SellerProducts } from './SellerProducts';

@Entity()
@Index({ name: 'product_id_idx', expression: 'create index \`product_id_idx\` on \`sales\` (\`product_id\`)' })
@Unique({ name: 'product_id__size__color_id-UNIQUE', expression: 'create unique index \`product_id__size__color_id-UNIQUE\` on \`sales\` (\`product_id\`, \`color_id\`, \`size\`)' })
export class Sales {

  [PrimaryKeyProp]?: 'saleId';

  @PrimaryKey()
  saleId!: number;

  @ManyToOne({ entity: () => ProductColors, ref: true, fieldNames: ['color_id', 'product_id'], nullable: true, index: 'fk_sales_product_colors1_idx' })
  color?: Ref<ProductColors>;

  @ManyToOne({ entity: () => ProductSizes, ref: true, fieldNames: ['size', 'product_id'], nullable: true, index: 'fk_sales_product_sizes1_idx' })
  size?: Ref<ProductSizes>;

  @ManyToOne({ entity: () => SellerProducts, ref: true, fieldNames: ['seller_id', 'exchanged_product_id'], nullable: true, index: 'fk_sales_seller_products2_idx' })
  exchanged?: Ref<SellerProducts>;

  @ManyToOne({ entity: () => ProductCountries, ref: true, fieldNames: ['country', 'product_id'], index: 'fk_sales_product_countries1_idx' })
  productCountries!: Ref<ProductCountries>;

  @ManyToOne({ entity: () => SellerCountries, ref: true, fieldNames: ['country', 'seller_id'], index: 'fk_sales_seller_countries1_idx' })
  sellerCountries!: Ref<SellerCountries>;

  @ManyToOne({ entity: () => SellerProducts, ref: true, fieldNames: ['seller_id', 'product_id'], index: 'fk_sales_seller_products1_idx' })
  fkSalesSellerProducts1!: Ref<SellerProducts>;

}
",
  "import { Entity, ManyToOne, PrimaryKeyProp, type Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Sellers } from './Sellers';

@Entity()
export class SellerCountries {

  [PrimaryKeyProp]?: ['country', 'seller'];

  @ManyToOne({ entity: () => Countries, ref: true, fieldName: 'country', primary: true })
  country!: Ref<Countries>;

  @ManyToOne({ entity: () => Sellers, ref: true, fieldName: 'seller_id', primary: true, index: 'fk_seller_countries_sellers1_idx' })
  seller!: Ref<Sellers>;

}
",
  "import { Entity, ManyToOne, PrimaryKeyProp, type Ref } from '@mikro-orm/core';
import { Products } from './Products';
import { Sellers } from './Sellers';

@Entity()
export class SellerProducts {

  [PrimaryKeyProp]?: ['seller', 'product'];

  @ManyToOne({ entity: () => Sellers, ref: true, fieldName: 'seller_id', primary: true })
  seller!: Ref<Sellers>;

  @ManyToOne({ entity: () => Products, ref: true, fieldName: 'product_id', primary: true, index: 'fk_seller_products_products1_idx' })
  product!: Ref<Products>;

}
",
  "import { Collection, Entity, ManyToMany, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { Products } from './Products';
import { SellerProducts } from './SellerProducts';

@Entity()
export class Sellers {

  [PrimaryKeyProp]?: 'sellerId';

  @PrimaryKey()
  sellerId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property()
  name!: string;

  @ManyToMany({ entity: () => Products, pivotTable: 'seller_products', pivotEntity: () => SellerProducts, joinColumn: 'seller_id', inverseJoinColumn: 'product_id' })
  sellerProducts = new Collection<Products>(this);

}
",
]
`;

exports[`ambiguous_fk_example scalarPropertiesForRelations=never bidirectionalRelations=false identifiedReferences=true entitySchema=true: dump 1`] = `
[
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { Products } from './Products';

export class Colors {
  [PrimaryKeyProp]?: 'colorId';
  colorId!: number;
  name!: string;
  productColors = new Collection<Products>(this);
}

export const ColorsSchema = new EntitySchema({
  class: Colors,
  properties: {
    colorId: { primary: true, type: 'integer' },
    name: { type: 'string', unique: 'name_UNIQUE' },
    productColors: {
      kind: 'm:n',
      entity: () => Products,
      pivotTable: 'product_colors',
      pivotEntity: () => ProductColors,
      joinColumn: 'color_id',
      inverseJoinColumn: 'product_id',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductCountries } from './ProductCountries';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { Sellers } from './Sellers';

export class Countries {
  [PrimaryKeyProp]?: 'country';
  country!: string;
  productCountries = new Collection<ProductSizes>(this);
  sellerCountries = new Collection<Sellers>(this);
}

export const CountriesSchema = new EntitySchema({
  class: Countries,
  properties: {
    country: { primary: true, type: 'character', length: 2 },
    productCountries: {
      kind: 'm:n',
      entity: () => ProductSizes,
      pivotTable: 'product_countries',
      pivotEntity: () => ProductCountries,
      joinColumn: 'country',
      inverseJoinColumn: 'product_id',
    },
    sellerCountries: {
      kind: 'm:n',
      entity: () => Sellers,
      pivotTable: 'seller_countries',
      pivotEntity: () => SellerCountries,
      joinColumn: 'country',
      inverseJoinColumn: 'seller_id',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, type Ref } from '@mikro-orm/core';
import { Colors } from './Colors';
import { Products } from './Products';

export class ProductColors {
  [PrimaryKeyProp]?: ['color', 'product'];
  color!: Ref<Colors>;
  product!: Ref<Products>;
}

export const ProductColorsSchema = new EntitySchema({
  class: ProductColors,
  properties: {
    color: {
      primary: true,
      kind: 'm:1',
      entity: () => Colors,
      ref: true,
      fieldName: 'color_id',
    },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => Products,
      ref: true,
      fieldName: 'product_id',
      index: 'fk_product_colors_products1_idx',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, type Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { ProductSizes } from './ProductSizes';

export class ProductCountries {
  [PrimaryKeyProp]?: ['country', 'product'];
  country!: Ref<Countries>;
  product!: Ref<ProductSizes>;
}

export const ProductCountriesSchema = new EntitySchema({
  class: ProductCountries,
  properties: {
    country: {
      primary: true,
      kind: 'm:1',
      entity: () => Countries,
      ref: true,
      fieldName: 'country',
    },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => ProductSizes,
      ref: true,
      fieldName: 'product_id',
      index: 'fk_product_countries_product_sizes1_idx',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, type Ref } from '@mikro-orm/core';
import { Products } from './Products';

export class ProductSizes {
  [PrimaryKeyProp]?: 'product';
  product!: Ref<Products>;
  size!: number;
}

export const ProductSizesSchema = new EntitySchema({
  class: ProductSizes,
  uniques: [{ name: 'size__product_id-UNIQUE', properties: ['size', 'product'] }],
  properties: {
    product: {
      primary: true,
      kind: '1:1',
      entity: () => Products,
      ref: true,
      fieldName: 'product_id',
    },
    size: { type: 'smallint', unsigned: true },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Products {
  [PrimaryKeyProp]?: 'productId';
  productId!: number;
  name!: string;
}

export const ProductsSchema = new EntitySchema({
  class: Products,
  properties: {
    productId: { primary: true, type: 'integer' },
    name: { type: 'string', unique: 'name_UNIQUE' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, type Ref } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { ProductCountries } from './ProductCountries';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { SellerProducts } from './SellerProducts';

export class Sales {
  [PrimaryKeyProp]?: 'saleId';
  saleId!: number;
  color?: Ref<ProductColors>;
  size?: Ref<ProductSizes>;
  exchanged?: Ref<SellerProducts>;
  productCountries!: Ref<ProductCountries>;
  sellerCountries!: Ref<SellerCountries>;
  fkSalesSellerProducts1!: Ref<SellerProducts>;
}

export const SalesSchema = new EntitySchema({
  class: Sales,
  indexes: [
    {
      name: 'product_id_idx',
      expression: 'create index \`product_id_idx\` on \`sales\` (\`product_id\`)',
    },
  ],
  uniques: [
    {
      name: 'product_id__size__color_id-UNIQUE',
      expression: 'create unique index \`product_id__size__color_id-UNIQUE\` on \`sales\` (\`product_id\`, \`color_id\`, \`size\`)',
    },
  ],
  properties: {
    saleId: { primary: true, type: 'integer' },
    color: {
      kind: 'm:1',
      entity: () => ProductColors,
      ref: true,
      fieldNames: ['color_id', 'product_id'],
      nullable: true,
      index: 'fk_sales_product_colors1_idx',
    },
    size: {
      kind: 'm:1',
      entity: () => ProductSizes,
      ref: true,
      fieldNames: ['size', 'product_id'],
      nullable: true,
      index: 'fk_sales_product_sizes1_idx',
    },
    exchanged: {
      kind: 'm:1',
      entity: () => SellerProducts,
      ref: true,
      fieldNames: ['seller_id', 'exchanged_product_id'],
      nullable: true,
      index: 'fk_sales_seller_products2_idx',
    },
    productCountries: {
      kind: 'm:1',
      entity: () => ProductCountries,
      ref: true,
      fieldNames: ['country', 'product_id'],
      index: 'fk_sales_product_countries1_idx',
    },
    sellerCountries: {
      kind: 'm:1',
      entity: () => SellerCountries,
      ref: true,
      fieldNames: ['country', 'seller_id'],
      index: 'fk_sales_seller_countries1_idx',
    },
    fkSalesSellerProducts1: {
      kind: 'm:1',
      entity: () => SellerProducts,
      ref: true,
      fieldNames: ['seller_id', 'product_id'],
      index: 'fk_sales_seller_products1_idx',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, type Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Sellers } from './Sellers';

export class SellerCountries {
  [PrimaryKeyProp]?: ['country', 'seller'];
  country!: Ref<Countries>;
  seller!: Ref<Sellers>;
}

export const SellerCountriesSchema = new EntitySchema({
  class: SellerCountries,
  properties: {
    country: {
      primary: true,
      kind: 'm:1',
      entity: () => Countries,
      ref: true,
      fieldName: 'country',
    },
    seller: {
      primary: true,
      kind: 'm:1',
      entity: () => Sellers,
      ref: true,
      fieldName: 'seller_id',
      index: 'fk_seller_countries_sellers1_idx',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, type Ref } from '@mikro-orm/core';
import { Products } from './Products';
import { Sellers } from './Sellers';

export class SellerProducts {
  [PrimaryKeyProp]?: ['seller', 'product'];
  seller!: Ref<Sellers>;
  product!: Ref<Products>;
}

export const SellerProductsSchema = new EntitySchema({
  class: SellerProducts,
  properties: {
    seller: {
      primary: true,
      kind: 'm:1',
      entity: () => Sellers,
      ref: true,
      fieldName: 'seller_id',
    },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => Products,
      ref: true,
      fieldName: 'product_id',
      index: 'fk_seller_products_products1_idx',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Products } from './Products';
import { SellerProducts } from './SellerProducts';

export class Sellers {
  [PrimaryKeyProp]?: 'sellerId';
  sellerId!: number;
  name!: string;
  sellerProducts = new Collection<Products>(this);
}

export const SellersSchema = new EntitySchema({
  class: Sellers,
  properties: {
    sellerId: { primary: true, type: 'integer' },
    name: { type: 'string', unique: 'name_UNIQUE' },
    sellerProducts: {
      kind: 'm:n',
      entity: () => Products,
      pivotTable: 'seller_products',
      pivotEntity: () => SellerProducts,
      joinColumn: 'seller_id',
      inverseJoinColumn: 'product_id',
    },
  },
});
",
]
`;

exports[`ambiguous_fk_example scalarPropertiesForRelations=never bidirectionalRelations=true identifiedReferences=false entitySchema=false: dump 1`] = `
[
  "import { Collection, Entity, ManyToMany, OneToMany, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { Products } from './Products';

@Entity()
export class Colors {

  [PrimaryKeyProp]?: 'colorId';

  @PrimaryKey()
  colorId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property()
  name!: string;

  @ManyToMany({ entity: () => Products, pivotTable: 'product_colors', pivotEntity: () => ProductColors, joinColumn: 'color_id', inverseJoinColumn: 'product_id' })
  productColors = new Collection<Products>(this);

  @OneToMany({ entity: () => ProductColors, mappedBy: 'color' })
  productColorsCollection = new Collection<ProductColors>(this);

}
",
  "import { Collection, Entity, ManyToMany, OneToMany, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductCountries } from './ProductCountries';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { Sellers } from './Sellers';

@Entity()
export class Countries {

  [PrimaryKeyProp]?: 'country';

  @PrimaryKey({ type: 'character', length: 2 })
  country!: string;

  @ManyToMany({ entity: () => ProductSizes, pivotTable: 'product_countries', pivotEntity: () => ProductCountries, joinColumn: 'country', inverseJoinColumn: 'product_id' })
  productCountries = new Collection<ProductSizes>(this);

  @ManyToMany({ entity: () => Sellers, pivotTable: 'seller_countries', pivotEntity: () => SellerCountries, joinColumn: 'country', inverseJoinColumn: 'seller_id' })
  sellerCountries = new Collection<Sellers>(this);

  @OneToMany({ entity: () => ProductCountries, mappedBy: 'country' })
  productCountriesCollection = new Collection<ProductCountries>(this);

  @OneToMany({ entity: () => SellerCountries, mappedBy: 'country' })
  sellerCountriesCollection = new Collection<SellerCountries>(this);

}
",
  "import { Collection, Entity, ManyToOne, OneToMany, PrimaryKeyProp } from '@mikro-orm/core';
import { Colors } from './Colors';
import { Products } from './Products';
import { Sales } from './Sales';

@Entity()
export class ProductColors {

  [PrimaryKeyProp]?: ['color', 'product'];

  @ManyToOne({ entity: () => Colors, fieldName: 'color_id', primary: true })
  color!: Colors;

  @ManyToOne({ entity: () => Products, fieldName: 'product_id', primary: true, index: 'fk_product_colors_products1_idx' })
  product!: Products;

  @OneToMany({ entity: () => Sales, mappedBy: 'color' })
  salesCollection = new Collection<Sales>(this);

}
",
  "import { Collection, Entity, ManyToOne, OneToMany, PrimaryKeyProp } from '@mikro-orm/core';
import { Countries } from './Countries';
import { ProductSizes } from './ProductSizes';
import { Sales } from './Sales';

@Entity()
export class ProductCountries {

  [PrimaryKeyProp]?: ['country', 'product'];

  @ManyToOne({ entity: () => Countries, fieldName: 'country', primary: true })
  country!: Countries;

  @ManyToOne({ entity: () => ProductSizes, fieldName: 'product_id', primary: true, index: 'fk_product_countries_product_sizes1_idx' })
  product!: ProductSizes;

  @OneToMany({ entity: () => Sales, mappedBy: 'productCountries' })
  salesCollection = new Collection<Sales>(this);

}
",
  "import { Collection, Entity, ManyToMany, OneToMany, OneToOne, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { Countries } from './Countries';
import { ProductCountries } from './ProductCountries';
import { Products } from './Products';
import { Sales } from './Sales';

@Entity()
@Unique({ name: 'size__product_id-UNIQUE', properties: ['size', 'product'] })
export class ProductSizes {

  [PrimaryKeyProp]?: 'product';

  @OneToOne({ entity: () => Products, fieldName: 'product_id', primary: true })
  product!: Products;

  @Property({ type: 'smallint', unsigned: true })
  size!: number;

  @ManyToMany({ entity: () => Countries, mappedBy: 'productCountries' })
  productCountriesInverse = new Collection<Countries>(this);

  @OneToMany({ entity: () => ProductCountries, mappedBy: 'product' })
  productCountriesCollection = new Collection<ProductCountries>(this);

  @OneToMany({ entity: () => Sales, mappedBy: 'size' })
  salesCollection = new Collection<Sales>(this);

}
",
  "import { Collection, Entity, ManyToMany, OneToMany, OneToOne, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { Colors } from './Colors';
import { ProductColors } from './ProductColors';
import { ProductSizes } from './ProductSizes';
import { SellerProducts } from './SellerProducts';
import { Sellers } from './Sellers';

@Entity()
export class Products {

  [PrimaryKeyProp]?: 'productId';

  @PrimaryKey()
  productId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property()
  name!: string;

  @ManyToMany({ entity: () => Colors, mappedBy: 'productColors' })
  productColorsInverse = new Collection<Colors>(this);

  @OneToMany({ entity: () => ProductColors, mappedBy: 'product' })
  productColorsCollection = new Collection<ProductColors>(this);

  @OneToOne({ entity: () => ProductSizes, mappedBy: 'product' })
  productSizes?: ProductSizes;

  @OneToMany({ entity: () => SellerProducts, mappedBy: 'product' })
  sellerProductsCollection = new Collection<SellerProducts>(this);

  @ManyToMany({ entity: () => Sellers, mappedBy: 'sellerProducts' })
  sellerProductsInverse = new Collection<Sellers>(this);

}
",
  "import { Entity, Index, ManyToOne, PrimaryKey, PrimaryKeyProp, Unique } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { ProductCountries } from './ProductCountries';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { SellerProducts } from './SellerProducts';

@Entity()
@Index({ name: 'product_id_idx', expression: 'create index \`product_id_idx\` on \`sales\` (\`product_id\`)' })
@Unique({ name: 'product_id__size__color_id-UNIQUE', expression: 'create unique index \`product_id__size__color_id-UNIQUE\` on \`sales\` (\`product_id\`, \`color_id\`, \`size\`)' })
export class Sales {

  [PrimaryKeyProp]?: 'saleId';

  @PrimaryKey()
  saleId!: number;

  @ManyToOne({ entity: () => ProductColors, fieldNames: ['color_id', 'product_id'], nullable: true, index: 'fk_sales_product_colors1_idx' })
  color?: ProductColors;

  @ManyToOne({ entity: () => ProductSizes, fieldNames: ['size', 'product_id'], nullable: true, index: 'fk_sales_product_sizes1_idx' })
  size?: ProductSizes;

  @ManyToOne({ entity: () => SellerProducts, fieldNames: ['seller_id', 'exchanged_product_id'], nullable: true, index: 'fk_sales_seller_products2_idx' })
  exchanged?: SellerProducts;

  @ManyToOne({ entity: () => ProductCountries, fieldNames: ['country', 'product_id'], index: 'fk_sales_product_countries1_idx' })
  productCountries!: ProductCountries;

  @ManyToOne({ entity: () => SellerCountries, fieldNames: ['country', 'seller_id'], index: 'fk_sales_seller_countries1_idx' })
  sellerCountries!: SellerCountries;

  @ManyToOne({ entity: () => SellerProducts, fieldNames: ['seller_id', 'product_id'], index: 'fk_sales_seller_products1_idx' })
  fkSalesSellerProducts1!: SellerProducts;

}
",
  "import { Collection, Entity, ManyToOne, OneToMany, PrimaryKeyProp } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Sales } from './Sales';
import { Sellers } from './Sellers';

@Entity()
export class SellerCountries {

  [PrimaryKeyProp]?: ['country', 'seller'];

  @ManyToOne({ entity: () => Countries, fieldName: 'country', primary: true })
  country!: Countries;

  @ManyToOne({ entity: () => Sellers, fieldName: 'seller_id', primary: true, index: 'fk_seller_countries_sellers1_idx' })
  seller!: Sellers;

  @OneToMany({ entity: () => Sales, mappedBy: 'sellerCountries' })
  salesCollection = new Collection<Sales>(this);

}
",
  "import { Collection, Entity, ManyToOne, OneToMany, PrimaryKeyProp } from '@mikro-orm/core';
import { Products } from './Products';
import { Sales } from './Sales';
import { Sellers } from './Sellers';

@Entity()
export class SellerProducts {

  [PrimaryKeyProp]?: ['seller', 'product'];

  @ManyToOne({ entity: () => Sellers, fieldName: 'seller_id', primary: true })
  seller!: Sellers;

  @ManyToOne({ entity: () => Products, fieldName: 'product_id', primary: true, index: 'fk_seller_products_products1_idx' })
  product!: Products;

  @OneToMany({ entity: () => Sales, mappedBy: 'exchanged' })
  salesCollection = new Collection<Sales>(this);

  @OneToMany({ entity: () => Sales, mappedBy: 'fkSalesSellerProducts1' })
  salesCollection1 = new Collection<Sales>(this);

}
",
  "import { Collection, Entity, ManyToMany, OneToMany, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Products } from './Products';
import { SellerCountries } from './SellerCountries';
import { SellerProducts } from './SellerProducts';

@Entity()
export class Sellers {

  [PrimaryKeyProp]?: 'sellerId';

  @PrimaryKey()
  sellerId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property()
  name!: string;

  @ManyToMany({ entity: () => Products, pivotTable: 'seller_products', pivotEntity: () => SellerProducts, joinColumn: 'seller_id', inverseJoinColumn: 'product_id' })
  sellerProducts = new Collection<Products>(this);

  @ManyToMany({ entity: () => Countries, mappedBy: 'sellerCountries' })
  sellerCountriesInverse = new Collection<Countries>(this);

  @OneToMany({ entity: () => SellerCountries, mappedBy: 'seller' })
  sellerCountriesCollection = new Collection<SellerCountries>(this);

  @OneToMany({ entity: () => SellerProducts, mappedBy: 'seller' })
  sellerProductsCollection = new Collection<SellerProducts>(this);

}
",
]
`;

exports[`ambiguous_fk_example scalarPropertiesForRelations=never bidirectionalRelations=true identifiedReferences=false entitySchema=true: dump 1`] = `
[
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { Products } from './Products';

export class Colors {
  [PrimaryKeyProp]?: 'colorId';
  colorId!: number;
  name!: string;
  productColors = new Collection<Products>(this);
  productColorsCollection = new Collection<ProductColors>(this);
}

export const ColorsSchema = new EntitySchema({
  class: Colors,
  properties: {
    colorId: { primary: true, type: 'integer' },
    name: { type: 'string', unique: 'name_UNIQUE' },
    productColors: {
      kind: 'm:n',
      entity: () => Products,
      pivotTable: 'product_colors',
      pivotEntity: () => ProductColors,
      joinColumn: 'color_id',
      inverseJoinColumn: 'product_id',
    },
    productColorsCollection: {
      kind: '1:m',
      entity: () => ProductColors,
      mappedBy: 'color',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductCountries } from './ProductCountries';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { Sellers } from './Sellers';

export class Countries {
  [PrimaryKeyProp]?: 'country';
  country!: string;
  productCountries = new Collection<ProductSizes>(this);
  sellerCountries = new Collection<Sellers>(this);
  productCountriesCollection = new Collection<ProductCountries>(this);
  sellerCountriesCollection = new Collection<SellerCountries>(this);
}

export const CountriesSchema = new EntitySchema({
  class: Countries,
  properties: {
    country: { primary: true, type: 'character', length: 2 },
    productCountries: {
      kind: 'm:n',
      entity: () => ProductSizes,
      pivotTable: 'product_countries',
      pivotEntity: () => ProductCountries,
      joinColumn: 'country',
      inverseJoinColumn: 'product_id',
    },
    sellerCountries: {
      kind: 'm:n',
      entity: () => Sellers,
      pivotTable: 'seller_countries',
      pivotEntity: () => SellerCountries,
      joinColumn: 'country',
      inverseJoinColumn: 'seller_id',
    },
    productCountriesCollection: {
      kind: '1:m',
      entity: () => ProductCountries,
      mappedBy: 'country',
    },
    sellerCountriesCollection: {
      kind: '1:m',
      entity: () => SellerCountries,
      mappedBy: 'country',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Colors } from './Colors';
import { Products } from './Products';
import { Sales } from './Sales';

export class ProductColors {
  [PrimaryKeyProp]?: ['color', 'product'];
  color!: Colors;
  product!: Products;
  salesCollection = new Collection<Sales>(this);
}

export const ProductColorsSchema = new EntitySchema({
  class: ProductColors,
  properties: {
    color: {
      primary: true,
      kind: 'm:1',
      entity: () => Colors,
      fieldName: 'color_id',
    },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => Products,
      fieldName: 'product_id',
      index: 'fk_product_colors_products1_idx',
    },
    salesCollection: { kind: '1:m', entity: () => Sales, mappedBy: 'color' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Countries } from './Countries';
import { ProductSizes } from './ProductSizes';
import { Sales } from './Sales';

export class ProductCountries {
  [PrimaryKeyProp]?: ['country', 'product'];
  country!: Countries;
  product!: ProductSizes;
  salesCollection = new Collection<Sales>(this);
}

export const ProductCountriesSchema = new EntitySchema({
  class: ProductCountries,
  properties: {
    country: {
      primary: true,
      kind: 'm:1',
      entity: () => Countries,
      fieldName: 'country',
    },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => ProductSizes,
      fieldName: 'product_id',
      index: 'fk_product_countries_product_sizes1_idx',
    },
    salesCollection: {
      kind: '1:m',
      entity: () => Sales,
      mappedBy: 'productCountries',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Countries } from './Countries';
import { ProductCountries } from './ProductCountries';
import { Products } from './Products';
import { Sales } from './Sales';

export class ProductSizes {
  [PrimaryKeyProp]?: 'product';
  product!: Products;
  size!: number;
  productCountriesInverse = new Collection<Countries>(this);
  productCountriesCollection = new Collection<ProductCountries>(this);
  salesCollection = new Collection<Sales>(this);
}

export const ProductSizesSchema = new EntitySchema({
  class: ProductSizes,
  uniques: [{ name: 'size__product_id-UNIQUE', properties: ['size', 'product'] }],
  properties: {
    product: {
      primary: true,
      kind: '1:1',
      entity: () => Products,
      fieldName: 'product_id',
    },
    size: { type: 'smallint', unsigned: true },
    productCountriesInverse: {
      kind: 'm:n',
      entity: () => Countries,
      mappedBy: 'productCountries',
    },
    productCountriesCollection: {
      kind: '1:m',
      entity: () => ProductCountries,
      mappedBy: 'product',
    },
    salesCollection: { kind: '1:m', entity: () => Sales, mappedBy: 'size' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Colors } from './Colors';
import { ProductColors } from './ProductColors';
import { ProductSizes } from './ProductSizes';
import { SellerProducts } from './SellerProducts';
import { Sellers } from './Sellers';

export class Products {
  [PrimaryKeyProp]?: 'productId';
  productId!: number;
  name!: string;
  productColorsInverse = new Collection<Colors>(this);
  productColorsCollection = new Collection<ProductColors>(this);
  productSizes?: ProductSizes;
  sellerProductsCollection = new Collection<SellerProducts>(this);
  sellerProductsInverse = new Collection<Sellers>(this);
}

export const ProductsSchema = new EntitySchema({
  class: Products,
  properties: {
    productId: { primary: true, type: 'integer' },
    name: { type: 'string', unique: 'name_UNIQUE' },
    productColorsInverse: {
      kind: 'm:n',
      entity: () => Colors,
      mappedBy: 'productColors',
    },
    productColorsCollection: {
      kind: '1:m',
      entity: () => ProductColors,
      mappedBy: 'product',
    },
    productSizes: { kind: '1:1', entity: () => ProductSizes, mappedBy: 'product' },
    sellerProductsCollection: {
      kind: '1:m',
      entity: () => SellerProducts,
      mappedBy: 'product',
    },
    sellerProductsInverse: {
      kind: 'm:n',
      entity: () => Sellers,
      mappedBy: 'sellerProducts',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { ProductCountries } from './ProductCountries';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { SellerProducts } from './SellerProducts';

export class Sales {
  [PrimaryKeyProp]?: 'saleId';
  saleId!: number;
  color?: ProductColors;
  size?: ProductSizes;
  exchanged?: SellerProducts;
  productCountries!: ProductCountries;
  sellerCountries!: SellerCountries;
  fkSalesSellerProducts1!: SellerProducts;
}

export const SalesSchema = new EntitySchema({
  class: Sales,
  indexes: [
    {
      name: 'product_id_idx',
      expression: 'create index \`product_id_idx\` on \`sales\` (\`product_id\`)',
    },
  ],
  uniques: [
    {
      name: 'product_id__size__color_id-UNIQUE',
      expression: 'create unique index \`product_id__size__color_id-UNIQUE\` on \`sales\` (\`product_id\`, \`color_id\`, \`size\`)',
    },
  ],
  properties: {
    saleId: { primary: true, type: 'integer' },
    color: {
      kind: 'm:1',
      entity: () => ProductColors,
      fieldNames: ['color_id', 'product_id'],
      nullable: true,
      index: 'fk_sales_product_colors1_idx',
    },
    size: {
      kind: 'm:1',
      entity: () => ProductSizes,
      fieldNames: ['size', 'product_id'],
      nullable: true,
      index: 'fk_sales_product_sizes1_idx',
    },
    exchanged: {
      kind: 'm:1',
      entity: () => SellerProducts,
      fieldNames: ['seller_id', 'exchanged_product_id'],
      nullable: true,
      index: 'fk_sales_seller_products2_idx',
    },
    productCountries: {
      kind: 'm:1',
      entity: () => ProductCountries,
      fieldNames: ['country', 'product_id'],
      index: 'fk_sales_product_countries1_idx',
    },
    sellerCountries: {
      kind: 'm:1',
      entity: () => SellerCountries,
      fieldNames: ['country', 'seller_id'],
      index: 'fk_sales_seller_countries1_idx',
    },
    fkSalesSellerProducts1: {
      kind: 'm:1',
      entity: () => SellerProducts,
      fieldNames: ['seller_id', 'product_id'],
      index: 'fk_sales_seller_products1_idx',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Sales } from './Sales';
import { Sellers } from './Sellers';

export class SellerCountries {
  [PrimaryKeyProp]?: ['country', 'seller'];
  country!: Countries;
  seller!: Sellers;
  salesCollection = new Collection<Sales>(this);
}

export const SellerCountriesSchema = new EntitySchema({
  class: SellerCountries,
  properties: {
    country: {
      primary: true,
      kind: 'm:1',
      entity: () => Countries,
      fieldName: 'country',
    },
    seller: {
      primary: true,
      kind: 'm:1',
      entity: () => Sellers,
      fieldName: 'seller_id',
      index: 'fk_seller_countries_sellers1_idx',
    },
    salesCollection: {
      kind: '1:m',
      entity: () => Sales,
      mappedBy: 'sellerCountries',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Products } from './Products';
import { Sales } from './Sales';
import { Sellers } from './Sellers';

export class SellerProducts {
  [PrimaryKeyProp]?: ['seller', 'product'];
  seller!: Sellers;
  product!: Products;
  salesCollection = new Collection<Sales>(this);
  salesCollection1 = new Collection<Sales>(this);
}

export const SellerProductsSchema = new EntitySchema({
  class: SellerProducts,
  properties: {
    seller: {
      primary: true,
      kind: 'm:1',
      entity: () => Sellers,
      fieldName: 'seller_id',
    },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => Products,
      fieldName: 'product_id',
      index: 'fk_seller_products_products1_idx',
    },
    salesCollection: { kind: '1:m', entity: () => Sales, mappedBy: 'exchanged' },
    salesCollection1: {
      kind: '1:m',
      entity: () => Sales,
      mappedBy: 'fkSalesSellerProducts1',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Products } from './Products';
import { SellerCountries } from './SellerCountries';
import { SellerProducts } from './SellerProducts';

export class Sellers {
  [PrimaryKeyProp]?: 'sellerId';
  sellerId!: number;
  name!: string;
  sellerProducts = new Collection<Products>(this);
  sellerCountriesInverse = new Collection<Countries>(this);
  sellerCountriesCollection = new Collection<SellerCountries>(this);
  sellerProductsCollection = new Collection<SellerProducts>(this);
}

export const SellersSchema = new EntitySchema({
  class: Sellers,
  properties: {
    sellerId: { primary: true, type: 'integer' },
    name: { type: 'string', unique: 'name_UNIQUE' },
    sellerProducts: {
      kind: 'm:n',
      entity: () => Products,
      pivotTable: 'seller_products',
      pivotEntity: () => SellerProducts,
      joinColumn: 'seller_id',
      inverseJoinColumn: 'product_id',
    },
    sellerCountriesInverse: {
      kind: 'm:n',
      entity: () => Countries,
      mappedBy: 'sellerCountries',
    },
    sellerCountriesCollection: {
      kind: '1:m',
      entity: () => SellerCountries,
      mappedBy: 'seller',
    },
    sellerProductsCollection: {
      kind: '1:m',
      entity: () => SellerProducts,
      mappedBy: 'seller',
    },
  },
});
",
]
`;

exports[`ambiguous_fk_example scalarPropertiesForRelations=never bidirectionalRelations=true identifiedReferences=true entitySchema=false: dump 1`] = `
[
  "import { Collection, Entity, ManyToMany, OneToMany, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { Products } from './Products';

@Entity()
export class Colors {

  [PrimaryKeyProp]?: 'colorId';

  @PrimaryKey()
  colorId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property()
  name!: string;

  @ManyToMany({ entity: () => Products, pivotTable: 'product_colors', pivotEntity: () => ProductColors, joinColumn: 'color_id', inverseJoinColumn: 'product_id' })
  productColors = new Collection<Products>(this);

  @OneToMany({ entity: () => ProductColors, mappedBy: 'color' })
  productColorsCollection = new Collection<ProductColors>(this);

}
",
  "import { Collection, Entity, ManyToMany, OneToMany, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductCountries } from './ProductCountries';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { Sellers } from './Sellers';

@Entity()
export class Countries {

  [PrimaryKeyProp]?: 'country';

  @PrimaryKey({ type: 'character', length: 2 })
  country!: string;

  @ManyToMany({ entity: () => ProductSizes, pivotTable: 'product_countries', pivotEntity: () => ProductCountries, joinColumn: 'country', inverseJoinColumn: 'product_id' })
  productCountries = new Collection<ProductSizes>(this);

  @ManyToMany({ entity: () => Sellers, pivotTable: 'seller_countries', pivotEntity: () => SellerCountries, joinColumn: 'country', inverseJoinColumn: 'seller_id' })
  sellerCountries = new Collection<Sellers>(this);

  @OneToMany({ entity: () => ProductCountries, mappedBy: 'country' })
  productCountriesCollection = new Collection<ProductCountries>(this);

  @OneToMany({ entity: () => SellerCountries, mappedBy: 'country' })
  sellerCountriesCollection = new Collection<SellerCountries>(this);

}
",
  "import { Collection, Entity, ManyToOne, OneToMany, PrimaryKeyProp, type Ref } from '@mikro-orm/core';
import { Colors } from './Colors';
import { Products } from './Products';
import { Sales } from './Sales';

@Entity()
export class ProductColors {

  [PrimaryKeyProp]?: ['color', 'product'];

  @ManyToOne({ entity: () => Colors, ref: true, fieldName: 'color_id', primary: true })
  color!: Ref<Colors>;

  @ManyToOne({ entity: () => Products, ref: true, fieldName: 'product_id', primary: true, index: 'fk_product_colors_products1_idx' })
  product!: Ref<Products>;

  @OneToMany({ entity: () => Sales, mappedBy: 'color' })
  salesCollection = new Collection<Sales>(this);

}
",
  "import { Collection, Entity, ManyToOne, OneToMany, PrimaryKeyProp, type Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { ProductSizes } from './ProductSizes';
import { Sales } from './Sales';

@Entity()
export class ProductCountries {

  [PrimaryKeyProp]?: ['country', 'product'];

  @ManyToOne({ entity: () => Countries, ref: true, fieldName: 'country', primary: true })
  country!: Ref<Countries>;

  @ManyToOne({ entity: () => ProductSizes, ref: true, fieldName: 'product_id', primary: true, index: 'fk_product_countries_product_sizes1_idx' })
  product!: Ref<ProductSizes>;

  @OneToMany({ entity: () => Sales, mappedBy: 'productCountries' })
  salesCollection = new Collection<Sales>(this);

}
",
  "import { Collection, Entity, ManyToMany, OneToMany, OneToOne, PrimaryKeyProp, Property, type Ref, Unique } from '@mikro-orm/core';
import { Countries } from './Countries';
import { ProductCountries } from './ProductCountries';
import { Products } from './Products';
import { Sales } from './Sales';

@Entity()
@Unique({ name: 'size__product_id-UNIQUE', properties: ['size', 'product'] })
export class ProductSizes {

  [PrimaryKeyProp]?: 'product';

  @OneToOne({ entity: () => Products, ref: true, fieldName: 'product_id', primary: true })
  product!: Ref<Products>;

  @Property({ type: 'smallint', unsigned: true })
  size!: number;

  @ManyToMany({ entity: () => Countries, mappedBy: 'productCountries' })
  productCountriesInverse = new Collection<Countries>(this);

  @OneToMany({ entity: () => ProductCountries, mappedBy: 'product' })
  productCountriesCollection = new Collection<ProductCountries>(this);

  @OneToMany({ entity: () => Sales, mappedBy: 'size' })
  salesCollection = new Collection<Sales>(this);

}
",
  "import { Collection, Entity, ManyToMany, OneToMany, OneToOne, PrimaryKey, PrimaryKeyProp, Property, type Ref, Unique } from '@mikro-orm/core';
import { Colors } from './Colors';
import { ProductColors } from './ProductColors';
import { ProductSizes } from './ProductSizes';
import { SellerProducts } from './SellerProducts';
import { Sellers } from './Sellers';

@Entity()
export class Products {

  [PrimaryKeyProp]?: 'productId';

  @PrimaryKey()
  productId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property()
  name!: string;

  @ManyToMany({ entity: () => Colors, mappedBy: 'productColors' })
  productColorsInverse = new Collection<Colors>(this);

  @OneToMany({ entity: () => ProductColors, mappedBy: 'product' })
  productColorsCollection = new Collection<ProductColors>(this);

  @OneToOne({ entity: () => ProductSizes, ref: true, mappedBy: 'product' })
  productSizes?: Ref<ProductSizes>;

  @OneToMany({ entity: () => SellerProducts, mappedBy: 'product' })
  sellerProductsCollection = new Collection<SellerProducts>(this);

  @ManyToMany({ entity: () => Sellers, mappedBy: 'sellerProducts' })
  sellerProductsInverse = new Collection<Sellers>(this);

}
",
  "import { Entity, Index, ManyToOne, PrimaryKey, PrimaryKeyProp, type Ref, Unique } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { ProductCountries } from './ProductCountries';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { SellerProducts } from './SellerProducts';

@Entity()
@Index({ name: 'product_id_idx', expression: 'create index \`product_id_idx\` on \`sales\` (\`product_id\`)' })
@Unique({ name: 'product_id__size__color_id-UNIQUE', expression: 'create unique index \`product_id__size__color_id-UNIQUE\` on \`sales\` (\`product_id\`, \`color_id\`, \`size\`)' })
export class Sales {

  [PrimaryKeyProp]?: 'saleId';

  @PrimaryKey()
  saleId!: number;

  @ManyToOne({ entity: () => ProductColors, ref: true, fieldNames: ['color_id', 'product_id'], nullable: true, index: 'fk_sales_product_colors1_idx' })
  color?: Ref<ProductColors>;

  @ManyToOne({ entity: () => ProductSizes, ref: true, fieldNames: ['size', 'product_id'], nullable: true, index: 'fk_sales_product_sizes1_idx' })
  size?: Ref<ProductSizes>;

  @ManyToOne({ entity: () => SellerProducts, ref: true, fieldNames: ['seller_id', 'exchanged_product_id'], nullable: true, index: 'fk_sales_seller_products2_idx' })
  exchanged?: Ref<SellerProducts>;

  @ManyToOne({ entity: () => ProductCountries, ref: true, fieldNames: ['country', 'product_id'], index: 'fk_sales_product_countries1_idx' })
  productCountries!: Ref<ProductCountries>;

  @ManyToOne({ entity: () => SellerCountries, ref: true, fieldNames: ['country', 'seller_id'], index: 'fk_sales_seller_countries1_idx' })
  sellerCountries!: Ref<SellerCountries>;

  @ManyToOne({ entity: () => SellerProducts, ref: true, fieldNames: ['seller_id', 'product_id'], index: 'fk_sales_seller_products1_idx' })
  fkSalesSellerProducts1!: Ref<SellerProducts>;

}
",
  "import { Collection, Entity, ManyToOne, OneToMany, PrimaryKeyProp, type Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Sales } from './Sales';
import { Sellers } from './Sellers';

@Entity()
export class SellerCountries {

  [PrimaryKeyProp]?: ['country', 'seller'];

  @ManyToOne({ entity: () => Countries, ref: true, fieldName: 'country', primary: true })
  country!: Ref<Countries>;

  @ManyToOne({ entity: () => Sellers, ref: true, fieldName: 'seller_id', primary: true, index: 'fk_seller_countries_sellers1_idx' })
  seller!: Ref<Sellers>;

  @OneToMany({ entity: () => Sales, mappedBy: 'sellerCountries' })
  salesCollection = new Collection<Sales>(this);

}
",
  "import { Collection, Entity, ManyToOne, OneToMany, PrimaryKeyProp, type Ref } from '@mikro-orm/core';
import { Products } from './Products';
import { Sales } from './Sales';
import { Sellers } from './Sellers';

@Entity()
export class SellerProducts {

  [PrimaryKeyProp]?: ['seller', 'product'];

  @ManyToOne({ entity: () => Sellers, ref: true, fieldName: 'seller_id', primary: true })
  seller!: Ref<Sellers>;

  @ManyToOne({ entity: () => Products, ref: true, fieldName: 'product_id', primary: true, index: 'fk_seller_products_products1_idx' })
  product!: Ref<Products>;

  @OneToMany({ entity: () => Sales, mappedBy: 'exchanged' })
  salesCollection = new Collection<Sales>(this);

  @OneToMany({ entity: () => Sales, mappedBy: 'fkSalesSellerProducts1' })
  salesCollection1 = new Collection<Sales>(this);

}
",
  "import { Collection, Entity, ManyToMany, OneToMany, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Products } from './Products';
import { SellerCountries } from './SellerCountries';
import { SellerProducts } from './SellerProducts';

@Entity()
export class Sellers {

  [PrimaryKeyProp]?: 'sellerId';

  @PrimaryKey()
  sellerId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property()
  name!: string;

  @ManyToMany({ entity: () => Products, pivotTable: 'seller_products', pivotEntity: () => SellerProducts, joinColumn: 'seller_id', inverseJoinColumn: 'product_id' })
  sellerProducts = new Collection<Products>(this);

  @ManyToMany({ entity: () => Countries, mappedBy: 'sellerCountries' })
  sellerCountriesInverse = new Collection<Countries>(this);

  @OneToMany({ entity: () => SellerCountries, mappedBy: 'seller' })
  sellerCountriesCollection = new Collection<SellerCountries>(this);

  @OneToMany({ entity: () => SellerProducts, mappedBy: 'seller' })
  sellerProductsCollection = new Collection<SellerProducts>(this);

}
",
]
`;

exports[`ambiguous_fk_example scalarPropertiesForRelations=never bidirectionalRelations=true identifiedReferences=true entitySchema=true: dump 1`] = `
[
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { Products } from './Products';

export class Colors {
  [PrimaryKeyProp]?: 'colorId';
  colorId!: number;
  name!: string;
  productColors = new Collection<Products>(this);
  productColorsCollection = new Collection<ProductColors>(this);
}

export const ColorsSchema = new EntitySchema({
  class: Colors,
  properties: {
    colorId: { primary: true, type: 'integer' },
    name: { type: 'string', unique: 'name_UNIQUE' },
    productColors: {
      kind: 'm:n',
      entity: () => Products,
      pivotTable: 'product_colors',
      pivotEntity: () => ProductColors,
      joinColumn: 'color_id',
      inverseJoinColumn: 'product_id',
    },
    productColorsCollection: {
      kind: '1:m',
      entity: () => ProductColors,
      mappedBy: 'color',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductCountries } from './ProductCountries';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { Sellers } from './Sellers';

export class Countries {
  [PrimaryKeyProp]?: 'country';
  country!: string;
  productCountries = new Collection<ProductSizes>(this);
  sellerCountries = new Collection<Sellers>(this);
  productCountriesCollection = new Collection<ProductCountries>(this);
  sellerCountriesCollection = new Collection<SellerCountries>(this);
}

export const CountriesSchema = new EntitySchema({
  class: Countries,
  properties: {
    country: { primary: true, type: 'character', length: 2 },
    productCountries: {
      kind: 'm:n',
      entity: () => ProductSizes,
      pivotTable: 'product_countries',
      pivotEntity: () => ProductCountries,
      joinColumn: 'country',
      inverseJoinColumn: 'product_id',
    },
    sellerCountries: {
      kind: 'm:n',
      entity: () => Sellers,
      pivotTable: 'seller_countries',
      pivotEntity: () => SellerCountries,
      joinColumn: 'country',
      inverseJoinColumn: 'seller_id',
    },
    productCountriesCollection: {
      kind: '1:m',
      entity: () => ProductCountries,
      mappedBy: 'country',
    },
    sellerCountriesCollection: {
      kind: '1:m',
      entity: () => SellerCountries,
      mappedBy: 'country',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp, type Ref } from '@mikro-orm/core';
import { Colors } from './Colors';
import { Products } from './Products';
import { Sales } from './Sales';

export class ProductColors {
  [PrimaryKeyProp]?: ['color', 'product'];
  color!: Ref<Colors>;
  product!: Ref<Products>;
  salesCollection = new Collection<Sales>(this);
}

export const ProductColorsSchema = new EntitySchema({
  class: ProductColors,
  properties: {
    color: {
      primary: true,
      kind: 'm:1',
      entity: () => Colors,
      ref: true,
      fieldName: 'color_id',
    },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => Products,
      ref: true,
      fieldName: 'product_id',
      index: 'fk_product_colors_products1_idx',
    },
    salesCollection: { kind: '1:m', entity: () => Sales, mappedBy: 'color' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp, type Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { ProductSizes } from './ProductSizes';
import { Sales } from './Sales';

export class ProductCountries {
  [PrimaryKeyProp]?: ['country', 'product'];
  country!: Ref<Countries>;
  product!: Ref<ProductSizes>;
  salesCollection = new Collection<Sales>(this);
}

export const ProductCountriesSchema = new EntitySchema({
  class: ProductCountries,
  properties: {
    country: {
      primary: true,
      kind: 'm:1',
      entity: () => Countries,
      ref: true,
      fieldName: 'country',
    },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => ProductSizes,
      ref: true,
      fieldName: 'product_id',
      index: 'fk_product_countries_product_sizes1_idx',
    },
    salesCollection: {
      kind: '1:m',
      entity: () => Sales,
      mappedBy: 'productCountries',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp, type Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { ProductCountries } from './ProductCountries';
import { Products } from './Products';
import { Sales } from './Sales';

export class ProductSizes {
  [PrimaryKeyProp]?: 'product';
  product!: Ref<Products>;
  size!: number;
  productCountriesInverse = new Collection<Countries>(this);
  productCountriesCollection = new Collection<ProductCountries>(this);
  salesCollection = new Collection<Sales>(this);
}

export const ProductSizesSchema = new EntitySchema({
  class: ProductSizes,
  uniques: [{ name: 'size__product_id-UNIQUE', properties: ['size', 'product'] }],
  properties: {
    product: {
      primary: true,
      kind: '1:1',
      entity: () => Products,
      ref: true,
      fieldName: 'product_id',
    },
    size: { type: 'smallint', unsigned: true },
    productCountriesInverse: {
      kind: 'm:n',
      entity: () => Countries,
      mappedBy: 'productCountries',
    },
    productCountriesCollection: {
      kind: '1:m',
      entity: () => ProductCountries,
      mappedBy: 'product',
    },
    salesCollection: { kind: '1:m', entity: () => Sales, mappedBy: 'size' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp, type Ref } from '@mikro-orm/core';
import { Colors } from './Colors';
import { ProductColors } from './ProductColors';
import { ProductSizes } from './ProductSizes';
import { SellerProducts } from './SellerProducts';
import { Sellers } from './Sellers';

export class Products {
  [PrimaryKeyProp]?: 'productId';
  productId!: number;
  name!: string;
  productColorsInverse = new Collection<Colors>(this);
  productColorsCollection = new Collection<ProductColors>(this);
  productSizes?: Ref<ProductSizes>;
  sellerProductsCollection = new Collection<SellerProducts>(this);
  sellerProductsInverse = new Collection<Sellers>(this);
}

export const ProductsSchema = new EntitySchema({
  class: Products,
  properties: {
    productId: { primary: true, type: 'integer' },
    name: { type: 'string', unique: 'name_UNIQUE' },
    productColorsInverse: {
      kind: 'm:n',
      entity: () => Colors,
      mappedBy: 'productColors',
    },
    productColorsCollection: {
      kind: '1:m',
      entity: () => ProductColors,
      mappedBy: 'product',
    },
    productSizes: {
      kind: '1:1',
      entity: () => ProductSizes,
      ref: true,
      mappedBy: 'product',
    },
    sellerProductsCollection: {
      kind: '1:m',
      entity: () => SellerProducts,
      mappedBy: 'product',
    },
    sellerProductsInverse: {
      kind: 'm:n',
      entity: () => Sellers,
      mappedBy: 'sellerProducts',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, type Ref } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { ProductCountries } from './ProductCountries';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { SellerProducts } from './SellerProducts';

export class Sales {
  [PrimaryKeyProp]?: 'saleId';
  saleId!: number;
  color?: Ref<ProductColors>;
  size?: Ref<ProductSizes>;
  exchanged?: Ref<SellerProducts>;
  productCountries!: Ref<ProductCountries>;
  sellerCountries!: Ref<SellerCountries>;
  fkSalesSellerProducts1!: Ref<SellerProducts>;
}

export const SalesSchema = new EntitySchema({
  class: Sales,
  indexes: [
    {
      name: 'product_id_idx',
      expression: 'create index \`product_id_idx\` on \`sales\` (\`product_id\`)',
    },
  ],
  uniques: [
    {
      name: 'product_id__size__color_id-UNIQUE',
      expression: 'create unique index \`product_id__size__color_id-UNIQUE\` on \`sales\` (\`product_id\`, \`color_id\`, \`size\`)',
    },
  ],
  properties: {
    saleId: { primary: true, type: 'integer' },
    color: {
      kind: 'm:1',
      entity: () => ProductColors,
      ref: true,
      fieldNames: ['color_id', 'product_id'],
      nullable: true,
      index: 'fk_sales_product_colors1_idx',
    },
    size: {
      kind: 'm:1',
      entity: () => ProductSizes,
      ref: true,
      fieldNames: ['size', 'product_id'],
      nullable: true,
      index: 'fk_sales_product_sizes1_idx',
    },
    exchanged: {
      kind: 'm:1',
      entity: () => SellerProducts,
      ref: true,
      fieldNames: ['seller_id', 'exchanged_product_id'],
      nullable: true,
      index: 'fk_sales_seller_products2_idx',
    },
    productCountries: {
      kind: 'm:1',
      entity: () => ProductCountries,
      ref: true,
      fieldNames: ['country', 'product_id'],
      index: 'fk_sales_product_countries1_idx',
    },
    sellerCountries: {
      kind: 'm:1',
      entity: () => SellerCountries,
      ref: true,
      fieldNames: ['country', 'seller_id'],
      index: 'fk_sales_seller_countries1_idx',
    },
    fkSalesSellerProducts1: {
      kind: 'm:1',
      entity: () => SellerProducts,
      ref: true,
      fieldNames: ['seller_id', 'product_id'],
      index: 'fk_sales_seller_products1_idx',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp, type Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Sales } from './Sales';
import { Sellers } from './Sellers';

export class SellerCountries {
  [PrimaryKeyProp]?: ['country', 'seller'];
  country!: Ref<Countries>;
  seller!: Ref<Sellers>;
  salesCollection = new Collection<Sales>(this);
}

export const SellerCountriesSchema = new EntitySchema({
  class: SellerCountries,
  properties: {
    country: {
      primary: true,
      kind: 'm:1',
      entity: () => Countries,
      ref: true,
      fieldName: 'country',
    },
    seller: {
      primary: true,
      kind: 'm:1',
      entity: () => Sellers,
      ref: true,
      fieldName: 'seller_id',
      index: 'fk_seller_countries_sellers1_idx',
    },
    salesCollection: {
      kind: '1:m',
      entity: () => Sales,
      mappedBy: 'sellerCountries',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp, type Ref } from '@mikro-orm/core';
import { Products } from './Products';
import { Sales } from './Sales';
import { Sellers } from './Sellers';

export class SellerProducts {
  [PrimaryKeyProp]?: ['seller', 'product'];
  seller!: Ref<Sellers>;
  product!: Ref<Products>;
  salesCollection = new Collection<Sales>(this);
  salesCollection1 = new Collection<Sales>(this);
}

export const SellerProductsSchema = new EntitySchema({
  class: SellerProducts,
  properties: {
    seller: {
      primary: true,
      kind: 'm:1',
      entity: () => Sellers,
      ref: true,
      fieldName: 'seller_id',
    },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => Products,
      ref: true,
      fieldName: 'product_id',
      index: 'fk_seller_products_products1_idx',
    },
    salesCollection: { kind: '1:m', entity: () => Sales, mappedBy: 'exchanged' },
    salesCollection1: {
      kind: '1:m',
      entity: () => Sales,
      mappedBy: 'fkSalesSellerProducts1',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Products } from './Products';
import { SellerCountries } from './SellerCountries';
import { SellerProducts } from './SellerProducts';

export class Sellers {
  [PrimaryKeyProp]?: 'sellerId';
  sellerId!: number;
  name!: string;
  sellerProducts = new Collection<Products>(this);
  sellerCountriesInverse = new Collection<Countries>(this);
  sellerCountriesCollection = new Collection<SellerCountries>(this);
  sellerProductsCollection = new Collection<SellerProducts>(this);
}

export const SellersSchema = new EntitySchema({
  class: Sellers,
  properties: {
    sellerId: { primary: true, type: 'integer' },
    name: { type: 'string', unique: 'name_UNIQUE' },
    sellerProducts: {
      kind: 'm:n',
      entity: () => Products,
      pivotTable: 'seller_products',
      pivotEntity: () => SellerProducts,
      joinColumn: 'seller_id',
      inverseJoinColumn: 'product_id',
    },
    sellerCountriesInverse: {
      kind: 'm:n',
      entity: () => Countries,
      mappedBy: 'sellerCountries',
    },
    sellerCountriesCollection: {
      kind: '1:m',
      entity: () => SellerCountries,
      mappedBy: 'seller',
    },
    sellerProductsCollection: {
      kind: '1:m',
      entity: () => SellerProducts,
      mappedBy: 'seller',
    },
  },
});
",
]
`;

exports[`ambiguous_fk_example scalarPropertiesForRelations=smart bidirectionalRelations=false identifiedReferences=false entitySchema=false: dump 1`] = `
[
  "import { Collection, Entity, ManyToMany, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { Products } from './Products';

@Entity()
export class Colors {

  [PrimaryKeyProp]?: 'colorId';

  @PrimaryKey()
  colorId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property()
  name!: string;

  @ManyToMany({ entity: () => Products, pivotTable: 'product_colors', pivotEntity: () => ProductColors, joinColumn: 'color_id', inverseJoinColumn: 'product_id' })
  productColors = new Collection<Products>(this);

}
",
  "import { Collection, Entity, ManyToMany, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductCountries } from './ProductCountries';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { Sellers } from './Sellers';

@Entity()
export class Countries {

  [PrimaryKeyProp]?: 'country';

  @PrimaryKey({ type: 'character', length: 2 })
  country!: string;

  @ManyToMany({ entity: () => ProductSizes, pivotTable: 'product_countries', pivotEntity: () => ProductCountries, joinColumn: 'country', inverseJoinColumn: 'product_id' })
  productCountries = new Collection<ProductSizes>(this);

  @ManyToMany({ entity: () => Sellers, pivotTable: 'seller_countries', pivotEntity: () => SellerCountries, joinColumn: 'country', inverseJoinColumn: 'seller_id' })
  sellerCountries = new Collection<Sellers>(this);

}
",
  "import { Entity, ManyToOne, PrimaryKeyProp } from '@mikro-orm/core';
import { Colors } from './Colors';
import { Products } from './Products';

@Entity()
export class ProductColors {

  [PrimaryKeyProp]?: ['color', 'product'];

  @ManyToOne({ entity: () => Colors, fieldName: 'color_id', primary: true })
  color!: Colors;

  @ManyToOne({ entity: () => Products, fieldName: 'product_id', primary: true, index: 'fk_product_colors_products1_idx' })
  product!: Products;

}
",
  "import { Entity, ManyToOne, PrimaryKeyProp } from '@mikro-orm/core';
import { Countries } from './Countries';
import { ProductSizes } from './ProductSizes';

@Entity()
export class ProductCountries {

  [PrimaryKeyProp]?: ['country', 'product'];

  @ManyToOne({ entity: () => Countries, fieldName: 'country', primary: true })
  country!: Countries;

  @ManyToOne({ entity: () => ProductSizes, fieldName: 'product_id', primary: true, index: 'fk_product_countries_product_sizes1_idx' })
  product!: ProductSizes;

}
",
  "import { Entity, OneToOne, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { Products } from './Products';

@Entity()
@Unique({ name: 'size__product_id-UNIQUE', properties: ['size', 'product'] })
export class ProductSizes {

  [PrimaryKeyProp]?: 'product';

  @OneToOne({ entity: () => Products, fieldName: 'product_id', primary: true })
  product!: Products;

  @Property({ type: 'smallint', unsigned: true })
  size!: number;

}
",
  "import { Entity, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';

@Entity()
export class Products {

  [PrimaryKeyProp]?: 'productId';

  @PrimaryKey()
  productId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property()
  name!: string;

}
",
  "import { Entity, Index, ManyToOne, PrimaryKey, PrimaryKeyProp, Unique } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { ProductCountries } from './ProductCountries';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { SellerProducts } from './SellerProducts';

@Entity()
@Index({ name: 'product_id_idx', expression: 'create index \`product_id_idx\` on \`sales\` (\`product_id\`)' })
@Unique({ name: 'product_id__size__color_id-UNIQUE', expression: 'create unique index \`product_id__size__color_id-UNIQUE\` on \`sales\` (\`product_id\`, \`color_id\`, \`size\`)' })
export class Sales {

  [PrimaryKeyProp]?: 'saleId';

  @PrimaryKey()
  saleId!: number;

  @ManyToOne({ entity: () => ProductColors, fieldNames: ['color_id', 'product_id'], nullable: true, index: 'fk_sales_product_colors1_idx' })
  color?: ProductColors;

  @ManyToOne({ entity: () => ProductSizes, fieldNames: ['size', 'product_id'], nullable: true, index: 'fk_sales_product_sizes1_idx' })
  size?: ProductSizes;

  @ManyToOne({ entity: () => SellerProducts, fieldNames: ['seller_id', 'exchanged_product_id'], nullable: true, index: 'fk_sales_seller_products2_idx' })
  exchanged?: SellerProducts;

  @ManyToOne({ entity: () => ProductCountries, fieldNames: ['country', 'product_id'], index: 'fk_sales_product_countries1_idx' })
  productCountries!: ProductCountries;

  @ManyToOne({ entity: () => SellerCountries, fieldNames: ['country', 'seller_id'], index: 'fk_sales_seller_countries1_idx' })
  sellerCountries!: SellerCountries;

  @ManyToOne({ entity: () => SellerProducts, fieldNames: ['seller_id', 'product_id'], index: 'fk_sales_seller_products1_idx' })
  fkSalesSellerProducts1!: SellerProducts;

}
",
  "import { Entity, ManyToOne, PrimaryKeyProp } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Sellers } from './Sellers';

@Entity()
export class SellerCountries {

  [PrimaryKeyProp]?: ['country', 'seller'];

  @ManyToOne({ entity: () => Countries, fieldName: 'country', primary: true })
  country!: Countries;

  @ManyToOne({ entity: () => Sellers, fieldName: 'seller_id', primary: true, index: 'fk_seller_countries_sellers1_idx' })
  seller!: Sellers;

}
",
  "import { Entity, ManyToOne, PrimaryKeyProp } from '@mikro-orm/core';
import { Products } from './Products';
import { Sellers } from './Sellers';

@Entity()
export class SellerProducts {

  [PrimaryKeyProp]?: ['seller', 'product'];

  @ManyToOne({ entity: () => Sellers, fieldName: 'seller_id', primary: true })
  seller!: Sellers;

  @ManyToOne({ entity: () => Products, fieldName: 'product_id', primary: true, index: 'fk_seller_products_products1_idx' })
  product!: Products;

}
",
  "import { Collection, Entity, ManyToMany, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { Products } from './Products';
import { SellerProducts } from './SellerProducts';

@Entity()
export class Sellers {

  [PrimaryKeyProp]?: 'sellerId';

  @PrimaryKey()
  sellerId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property()
  name!: string;

  @ManyToMany({ entity: () => Products, pivotTable: 'seller_products', pivotEntity: () => SellerProducts, joinColumn: 'seller_id', inverseJoinColumn: 'product_id' })
  sellerProducts = new Collection<Products>(this);

}
",
]
`;

exports[`ambiguous_fk_example scalarPropertiesForRelations=smart bidirectionalRelations=false identifiedReferences=false entitySchema=true: dump 1`] = `
[
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { Products } from './Products';

export class Colors {
  [PrimaryKeyProp]?: 'colorId';
  colorId!: number;
  name!: string;
  productColors = new Collection<Products>(this);
}

export const ColorsSchema = new EntitySchema({
  class: Colors,
  properties: {
    colorId: { primary: true, type: 'integer' },
    name: { type: 'string', unique: 'name_UNIQUE' },
    productColors: {
      kind: 'm:n',
      entity: () => Products,
      pivotTable: 'product_colors',
      pivotEntity: () => ProductColors,
      joinColumn: 'color_id',
      inverseJoinColumn: 'product_id',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductCountries } from './ProductCountries';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { Sellers } from './Sellers';

export class Countries {
  [PrimaryKeyProp]?: 'country';
  country!: string;
  productCountries = new Collection<ProductSizes>(this);
  sellerCountries = new Collection<Sellers>(this);
}

export const CountriesSchema = new EntitySchema({
  class: Countries,
  properties: {
    country: { primary: true, type: 'character', length: 2 },
    productCountries: {
      kind: 'm:n',
      entity: () => ProductSizes,
      pivotTable: 'product_countries',
      pivotEntity: () => ProductCountries,
      joinColumn: 'country',
      inverseJoinColumn: 'product_id',
    },
    sellerCountries: {
      kind: 'm:n',
      entity: () => Sellers,
      pivotTable: 'seller_countries',
      pivotEntity: () => SellerCountries,
      joinColumn: 'country',
      inverseJoinColumn: 'seller_id',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Colors } from './Colors';
import { Products } from './Products';

export class ProductColors {
  [PrimaryKeyProp]?: ['color', 'product'];
  color!: Colors;
  product!: Products;
}

export const ProductColorsSchema = new EntitySchema({
  class: ProductColors,
  properties: {
    color: {
      primary: true,
      kind: 'm:1',
      entity: () => Colors,
      fieldName: 'color_id',
    },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => Products,
      fieldName: 'product_id',
      index: 'fk_product_colors_products1_idx',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Countries } from './Countries';
import { ProductSizes } from './ProductSizes';

export class ProductCountries {
  [PrimaryKeyProp]?: ['country', 'product'];
  country!: Countries;
  product!: ProductSizes;
}

export const ProductCountriesSchema = new EntitySchema({
  class: ProductCountries,
  properties: {
    country: {
      primary: true,
      kind: 'm:1',
      entity: () => Countries,
      fieldName: 'country',
    },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => ProductSizes,
      fieldName: 'product_id',
      index: 'fk_product_countries_product_sizes1_idx',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Products } from './Products';

export class ProductSizes {
  [PrimaryKeyProp]?: 'product';
  product!: Products;
  size!: number;
}

export const ProductSizesSchema = new EntitySchema({
  class: ProductSizes,
  uniques: [{ name: 'size__product_id-UNIQUE', properties: ['size', 'product'] }],
  properties: {
    product: {
      primary: true,
      kind: '1:1',
      entity: () => Products,
      fieldName: 'product_id',
    },
    size: { type: 'smallint', unsigned: true },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Products {
  [PrimaryKeyProp]?: 'productId';
  productId!: number;
  name!: string;
}

export const ProductsSchema = new EntitySchema({
  class: Products,
  properties: {
    productId: { primary: true, type: 'integer' },
    name: { type: 'string', unique: 'name_UNIQUE' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { ProductCountries } from './ProductCountries';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { SellerProducts } from './SellerProducts';

export class Sales {
  [PrimaryKeyProp]?: 'saleId';
  saleId!: number;
  color?: ProductColors;
  size?: ProductSizes;
  exchanged?: SellerProducts;
  productCountries!: ProductCountries;
  sellerCountries!: SellerCountries;
  fkSalesSellerProducts1!: SellerProducts;
}

export const SalesSchema = new EntitySchema({
  class: Sales,
  indexes: [
    {
      name: 'product_id_idx',
      expression: 'create index \`product_id_idx\` on \`sales\` (\`product_id\`)',
    },
  ],
  uniques: [
    {
      name: 'product_id__size__color_id-UNIQUE',
      expression: 'create unique index \`product_id__size__color_id-UNIQUE\` on \`sales\` (\`product_id\`, \`color_id\`, \`size\`)',
    },
  ],
  properties: {
    saleId: { primary: true, type: 'integer' },
    color: {
      kind: 'm:1',
      entity: () => ProductColors,
      fieldNames: ['color_id', 'product_id'],
      nullable: true,
      index: 'fk_sales_product_colors1_idx',
    },
    size: {
      kind: 'm:1',
      entity: () => ProductSizes,
      fieldNames: ['size', 'product_id'],
      nullable: true,
      index: 'fk_sales_product_sizes1_idx',
    },
    exchanged: {
      kind: 'm:1',
      entity: () => SellerProducts,
      fieldNames: ['seller_id', 'exchanged_product_id'],
      nullable: true,
      index: 'fk_sales_seller_products2_idx',
    },
    productCountries: {
      kind: 'm:1',
      entity: () => ProductCountries,
      fieldNames: ['country', 'product_id'],
      index: 'fk_sales_product_countries1_idx',
    },
    sellerCountries: {
      kind: 'm:1',
      entity: () => SellerCountries,
      fieldNames: ['country', 'seller_id'],
      index: 'fk_sales_seller_countries1_idx',
    },
    fkSalesSellerProducts1: {
      kind: 'm:1',
      entity: () => SellerProducts,
      fieldNames: ['seller_id', 'product_id'],
      index: 'fk_sales_seller_products1_idx',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Sellers } from './Sellers';

export class SellerCountries {
  [PrimaryKeyProp]?: ['country', 'seller'];
  country!: Countries;
  seller!: Sellers;
}

export const SellerCountriesSchema = new EntitySchema({
  class: SellerCountries,
  properties: {
    country: {
      primary: true,
      kind: 'm:1',
      entity: () => Countries,
      fieldName: 'country',
    },
    seller: {
      primary: true,
      kind: 'm:1',
      entity: () => Sellers,
      fieldName: 'seller_id',
      index: 'fk_seller_countries_sellers1_idx',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Products } from './Products';
import { Sellers } from './Sellers';

export class SellerProducts {
  [PrimaryKeyProp]?: ['seller', 'product'];
  seller!: Sellers;
  product!: Products;
}

export const SellerProductsSchema = new EntitySchema({
  class: SellerProducts,
  properties: {
    seller: {
      primary: true,
      kind: 'm:1',
      entity: () => Sellers,
      fieldName: 'seller_id',
    },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => Products,
      fieldName: 'product_id',
      index: 'fk_seller_products_products1_idx',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Products } from './Products';
import { SellerProducts } from './SellerProducts';

export class Sellers {
  [PrimaryKeyProp]?: 'sellerId';
  sellerId!: number;
  name!: string;
  sellerProducts = new Collection<Products>(this);
}

export const SellersSchema = new EntitySchema({
  class: Sellers,
  properties: {
    sellerId: { primary: true, type: 'integer' },
    name: { type: 'string', unique: 'name_UNIQUE' },
    sellerProducts: {
      kind: 'm:n',
      entity: () => Products,
      pivotTable: 'seller_products',
      pivotEntity: () => SellerProducts,
      joinColumn: 'seller_id',
      inverseJoinColumn: 'product_id',
    },
  },
});
",
]
`;

exports[`ambiguous_fk_example scalarPropertiesForRelations=smart bidirectionalRelations=false identifiedReferences=true entitySchema=false: dump 1`] = `
[
  "import { Collection, Entity, ManyToMany, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { Products } from './Products';

@Entity()
export class Colors {

  [PrimaryKeyProp]?: 'colorId';

  @PrimaryKey()
  colorId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property()
  name!: string;

  @ManyToMany({ entity: () => Products, pivotTable: 'product_colors', pivotEntity: () => ProductColors, joinColumn: 'color_id', inverseJoinColumn: 'product_id' })
  productColors = new Collection<Products>(this);

}
",
  "import { Collection, Entity, ManyToMany, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductCountries } from './ProductCountries';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { Sellers } from './Sellers';

@Entity()
export class Countries {

  [PrimaryKeyProp]?: 'country';

  @PrimaryKey({ type: 'character', length: 2 })
  country!: string;

  @ManyToMany({ entity: () => ProductSizes, pivotTable: 'product_countries', pivotEntity: () => ProductCountries, joinColumn: 'country', inverseJoinColumn: 'product_id' })
  productCountries = new Collection<ProductSizes>(this);

  @ManyToMany({ entity: () => Sellers, pivotTable: 'seller_countries', pivotEntity: () => SellerCountries, joinColumn: 'country', inverseJoinColumn: 'seller_id' })
  sellerCountries = new Collection<Sellers>(this);

}
",
  "import { Entity, ManyToOne, PrimaryKeyProp, type Ref } from '@mikro-orm/core';
import { Colors } from './Colors';
import { Products } from './Products';

@Entity()
export class ProductColors {

  [PrimaryKeyProp]?: ['color', 'product'];

  @ManyToOne({ entity: () => Colors, ref: true, fieldName: 'color_id', primary: true })
  color!: Ref<Colors>;

  @ManyToOne({ entity: () => Products, ref: true, fieldName: 'product_id', primary: true, index: 'fk_product_colors_products1_idx' })
  product!: Ref<Products>;

}
",
  "import { Entity, ManyToOne, PrimaryKeyProp, type Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { ProductSizes } from './ProductSizes';

@Entity()
export class ProductCountries {

  [PrimaryKeyProp]?: ['country', 'product'];

  @ManyToOne({ entity: () => Countries, ref: true, fieldName: 'country', primary: true })
  country!: Ref<Countries>;

  @ManyToOne({ entity: () => ProductSizes, ref: true, fieldName: 'product_id', primary: true, index: 'fk_product_countries_product_sizes1_idx' })
  product!: Ref<ProductSizes>;

}
",
  "import { Entity, OneToOne, PrimaryKeyProp, Property, type Ref, Unique } from '@mikro-orm/core';
import { Products } from './Products';

@Entity()
@Unique({ name: 'size__product_id-UNIQUE', properties: ['size', 'product'] })
export class ProductSizes {

  [PrimaryKeyProp]?: 'product';

  @OneToOne({ entity: () => Products, ref: true, fieldName: 'product_id', primary: true })
  product!: Ref<Products>;

  @Property({ type: 'smallint', unsigned: true })
  size!: number;

}
",
  "import { Entity, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';

@Entity()
export class Products {

  [PrimaryKeyProp]?: 'productId';

  @PrimaryKey()
  productId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property()
  name!: string;

}
",
  "import { Entity, Index, ManyToOne, PrimaryKey, PrimaryKeyProp, type Ref, Unique } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { ProductCountries } from './ProductCountries';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { SellerProducts } from './SellerProducts';

@Entity()
@Index({ name: 'product_id_idx', expression: 'create index \`product_id_idx\` on \`sales\` (\`product_id\`)' })
@Unique({ name: 'product_id__size__color_id-UNIQUE', expression: 'create unique index \`product_id__size__color_id-UNIQUE\` on \`sales\` (\`product_id\`, \`color_id\`, \`size\`)' })
export class Sales {

  [PrimaryKeyProp]?: 'saleId';

  @PrimaryKey()
  saleId!: number;

  @ManyToOne({ entity: () => ProductColors, ref: true, fieldNames: ['color_id', 'product_id'], nullable: true, index: 'fk_sales_product_colors1_idx' })
  color?: Ref<ProductColors>;

  @ManyToOne({ entity: () => ProductSizes, ref: true, fieldNames: ['size', 'product_id'], nullable: true, index: 'fk_sales_product_sizes1_idx' })
  size?: Ref<ProductSizes>;

  @ManyToOne({ entity: () => SellerProducts, ref: true, fieldNames: ['seller_id', 'exchanged_product_id'], nullable: true, index: 'fk_sales_seller_products2_idx' })
  exchanged?: Ref<SellerProducts>;

  @ManyToOne({ entity: () => ProductCountries, ref: true, fieldNames: ['country', 'product_id'], index: 'fk_sales_product_countries1_idx' })
  productCountries!: Ref<ProductCountries>;

  @ManyToOne({ entity: () => SellerCountries, ref: true, fieldNames: ['country', 'seller_id'], index: 'fk_sales_seller_countries1_idx' })
  sellerCountries!: Ref<SellerCountries>;

  @ManyToOne({ entity: () => SellerProducts, ref: true, fieldNames: ['seller_id', 'product_id'], index: 'fk_sales_seller_products1_idx' })
  fkSalesSellerProducts1!: Ref<SellerProducts>;

}
",
  "import { Entity, ManyToOne, PrimaryKeyProp, type Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Sellers } from './Sellers';

@Entity()
export class SellerCountries {

  [PrimaryKeyProp]?: ['country', 'seller'];

  @ManyToOne({ entity: () => Countries, ref: true, fieldName: 'country', primary: true })
  country!: Ref<Countries>;

  @ManyToOne({ entity: () => Sellers, ref: true, fieldName: 'seller_id', primary: true, index: 'fk_seller_countries_sellers1_idx' })
  seller!: Ref<Sellers>;

}
",
  "import { Entity, ManyToOne, PrimaryKeyProp, type Ref } from '@mikro-orm/core';
import { Products } from './Products';
import { Sellers } from './Sellers';

@Entity()
export class SellerProducts {

  [PrimaryKeyProp]?: ['seller', 'product'];

  @ManyToOne({ entity: () => Sellers, ref: true, fieldName: 'seller_id', primary: true })
  seller!: Ref<Sellers>;

  @ManyToOne({ entity: () => Products, ref: true, fieldName: 'product_id', primary: true, index: 'fk_seller_products_products1_idx' })
  product!: Ref<Products>;

}
",
  "import { Collection, Entity, ManyToMany, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { Products } from './Products';
import { SellerProducts } from './SellerProducts';

@Entity()
export class Sellers {

  [PrimaryKeyProp]?: 'sellerId';

  @PrimaryKey()
  sellerId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property()
  name!: string;

  @ManyToMany({ entity: () => Products, pivotTable: 'seller_products', pivotEntity: () => SellerProducts, joinColumn: 'seller_id', inverseJoinColumn: 'product_id' })
  sellerProducts = new Collection<Products>(this);

}
",
]
`;

exports[`ambiguous_fk_example scalarPropertiesForRelations=smart bidirectionalRelations=false identifiedReferences=true entitySchema=true: dump 1`] = `
[
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { Products } from './Products';

export class Colors {
  [PrimaryKeyProp]?: 'colorId';
  colorId!: number;
  name!: string;
  productColors = new Collection<Products>(this);
}

export const ColorsSchema = new EntitySchema({
  class: Colors,
  properties: {
    colorId: { primary: true, type: 'integer' },
    name: { type: 'string', unique: 'name_UNIQUE' },
    productColors: {
      kind: 'm:n',
      entity: () => Products,
      pivotTable: 'product_colors',
      pivotEntity: () => ProductColors,
      joinColumn: 'color_id',
      inverseJoinColumn: 'product_id',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductCountries } from './ProductCountries';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { Sellers } from './Sellers';

export class Countries {
  [PrimaryKeyProp]?: 'country';
  country!: string;
  productCountries = new Collection<ProductSizes>(this);
  sellerCountries = new Collection<Sellers>(this);
}

export const CountriesSchema = new EntitySchema({
  class: Countries,
  properties: {
    country: { primary: true, type: 'character', length: 2 },
    productCountries: {
      kind: 'm:n',
      entity: () => ProductSizes,
      pivotTable: 'product_countries',
      pivotEntity: () => ProductCountries,
      joinColumn: 'country',
      inverseJoinColumn: 'product_id',
    },
    sellerCountries: {
      kind: 'm:n',
      entity: () => Sellers,
      pivotTable: 'seller_countries',
      pivotEntity: () => SellerCountries,
      joinColumn: 'country',
      inverseJoinColumn: 'seller_id',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, type Ref } from '@mikro-orm/core';
import { Colors } from './Colors';
import { Products } from './Products';

export class ProductColors {
  [PrimaryKeyProp]?: ['color', 'product'];
  color!: Ref<Colors>;
  product!: Ref<Products>;
}

export const ProductColorsSchema = new EntitySchema({
  class: ProductColors,
  properties: {
    color: {
      primary: true,
      kind: 'm:1',
      entity: () => Colors,
      ref: true,
      fieldName: 'color_id',
    },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => Products,
      ref: true,
      fieldName: 'product_id',
      index: 'fk_product_colors_products1_idx',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, type Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { ProductSizes } from './ProductSizes';

export class ProductCountries {
  [PrimaryKeyProp]?: ['country', 'product'];
  country!: Ref<Countries>;
  product!: Ref<ProductSizes>;
}

export const ProductCountriesSchema = new EntitySchema({
  class: ProductCountries,
  properties: {
    country: {
      primary: true,
      kind: 'm:1',
      entity: () => Countries,
      ref: true,
      fieldName: 'country',
    },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => ProductSizes,
      ref: true,
      fieldName: 'product_id',
      index: 'fk_product_countries_product_sizes1_idx',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, type Ref } from '@mikro-orm/core';
import { Products } from './Products';

export class ProductSizes {
  [PrimaryKeyProp]?: 'product';
  product!: Ref<Products>;
  size!: number;
}

export const ProductSizesSchema = new EntitySchema({
  class: ProductSizes,
  uniques: [{ name: 'size__product_id-UNIQUE', properties: ['size', 'product'] }],
  properties: {
    product: {
      primary: true,
      kind: '1:1',
      entity: () => Products,
      ref: true,
      fieldName: 'product_id',
    },
    size: { type: 'smallint', unsigned: true },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Products {
  [PrimaryKeyProp]?: 'productId';
  productId!: number;
  name!: string;
}

export const ProductsSchema = new EntitySchema({
  class: Products,
  properties: {
    productId: { primary: true, type: 'integer' },
    name: { type: 'string', unique: 'name_UNIQUE' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, type Ref } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { ProductCountries } from './ProductCountries';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { SellerProducts } from './SellerProducts';

export class Sales {
  [PrimaryKeyProp]?: 'saleId';
  saleId!: number;
  color?: Ref<ProductColors>;
  size?: Ref<ProductSizes>;
  exchanged?: Ref<SellerProducts>;
  productCountries!: Ref<ProductCountries>;
  sellerCountries!: Ref<SellerCountries>;
  fkSalesSellerProducts1!: Ref<SellerProducts>;
}

export const SalesSchema = new EntitySchema({
  class: Sales,
  indexes: [
    {
      name: 'product_id_idx',
      expression: 'create index \`product_id_idx\` on \`sales\` (\`product_id\`)',
    },
  ],
  uniques: [
    {
      name: 'product_id__size__color_id-UNIQUE',
      expression: 'create unique index \`product_id__size__color_id-UNIQUE\` on \`sales\` (\`product_id\`, \`color_id\`, \`size\`)',
    },
  ],
  properties: {
    saleId: { primary: true, type: 'integer' },
    color: {
      kind: 'm:1',
      entity: () => ProductColors,
      ref: true,
      fieldNames: ['color_id', 'product_id'],
      nullable: true,
      index: 'fk_sales_product_colors1_idx',
    },
    size: {
      kind: 'm:1',
      entity: () => ProductSizes,
      ref: true,
      fieldNames: ['size', 'product_id'],
      nullable: true,
      index: 'fk_sales_product_sizes1_idx',
    },
    exchanged: {
      kind: 'm:1',
      entity: () => SellerProducts,
      ref: true,
      fieldNames: ['seller_id', 'exchanged_product_id'],
      nullable: true,
      index: 'fk_sales_seller_products2_idx',
    },
    productCountries: {
      kind: 'm:1',
      entity: () => ProductCountries,
      ref: true,
      fieldNames: ['country', 'product_id'],
      index: 'fk_sales_product_countries1_idx',
    },
    sellerCountries: {
      kind: 'm:1',
      entity: () => SellerCountries,
      ref: true,
      fieldNames: ['country', 'seller_id'],
      index: 'fk_sales_seller_countries1_idx',
    },
    fkSalesSellerProducts1: {
      kind: 'm:1',
      entity: () => SellerProducts,
      ref: true,
      fieldNames: ['seller_id', 'product_id'],
      index: 'fk_sales_seller_products1_idx',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, type Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Sellers } from './Sellers';

export class SellerCountries {
  [PrimaryKeyProp]?: ['country', 'seller'];
  country!: Ref<Countries>;
  seller!: Ref<Sellers>;
}

export const SellerCountriesSchema = new EntitySchema({
  class: SellerCountries,
  properties: {
    country: {
      primary: true,
      kind: 'm:1',
      entity: () => Countries,
      ref: true,
      fieldName: 'country',
    },
    seller: {
      primary: true,
      kind: 'm:1',
      entity: () => Sellers,
      ref: true,
      fieldName: 'seller_id',
      index: 'fk_seller_countries_sellers1_idx',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, type Ref } from '@mikro-orm/core';
import { Products } from './Products';
import { Sellers } from './Sellers';

export class SellerProducts {
  [PrimaryKeyProp]?: ['seller', 'product'];
  seller!: Ref<Sellers>;
  product!: Ref<Products>;
}

export const SellerProductsSchema = new EntitySchema({
  class: SellerProducts,
  properties: {
    seller: {
      primary: true,
      kind: 'm:1',
      entity: () => Sellers,
      ref: true,
      fieldName: 'seller_id',
    },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => Products,
      ref: true,
      fieldName: 'product_id',
      index: 'fk_seller_products_products1_idx',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Products } from './Products';
import { SellerProducts } from './SellerProducts';

export class Sellers {
  [PrimaryKeyProp]?: 'sellerId';
  sellerId!: number;
  name!: string;
  sellerProducts = new Collection<Products>(this);
}

export const SellersSchema = new EntitySchema({
  class: Sellers,
  properties: {
    sellerId: { primary: true, type: 'integer' },
    name: { type: 'string', unique: 'name_UNIQUE' },
    sellerProducts: {
      kind: 'm:n',
      entity: () => Products,
      pivotTable: 'seller_products',
      pivotEntity: () => SellerProducts,
      joinColumn: 'seller_id',
      inverseJoinColumn: 'product_id',
    },
  },
});
",
]
`;

exports[`ambiguous_fk_example scalarPropertiesForRelations=smart bidirectionalRelations=true identifiedReferences=false entitySchema=false: dump 1`] = `
[
  "import { Collection, Entity, ManyToMany, OneToMany, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { Products } from './Products';

@Entity()
export class Colors {

  [PrimaryKeyProp]?: 'colorId';

  @PrimaryKey()
  colorId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property()
  name!: string;

  @ManyToMany({ entity: () => Products, pivotTable: 'product_colors', pivotEntity: () => ProductColors, joinColumn: 'color_id', inverseJoinColumn: 'product_id' })
  productColors = new Collection<Products>(this);

  @OneToMany({ entity: () => ProductColors, mappedBy: 'color' })
  productColorsCollection = new Collection<ProductColors>(this);

}
",
  "import { Collection, Entity, ManyToMany, OneToMany, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductCountries } from './ProductCountries';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { Sellers } from './Sellers';

@Entity()
export class Countries {

  [PrimaryKeyProp]?: 'country';

  @PrimaryKey({ type: 'character', length: 2 })
  country!: string;

  @ManyToMany({ entity: () => ProductSizes, pivotTable: 'product_countries', pivotEntity: () => ProductCountries, joinColumn: 'country', inverseJoinColumn: 'product_id' })
  productCountries = new Collection<ProductSizes>(this);

  @ManyToMany({ entity: () => Sellers, pivotTable: 'seller_countries', pivotEntity: () => SellerCountries, joinColumn: 'country', inverseJoinColumn: 'seller_id' })
  sellerCountries = new Collection<Sellers>(this);

  @OneToMany({ entity: () => ProductCountries, mappedBy: 'country' })
  productCountriesCollection = new Collection<ProductCountries>(this);

  @OneToMany({ entity: () => SellerCountries, mappedBy: 'country' })
  sellerCountriesCollection = new Collection<SellerCountries>(this);

}
",
  "import { Collection, Entity, ManyToOne, OneToMany, PrimaryKeyProp } from '@mikro-orm/core';
import { Colors } from './Colors';
import { Products } from './Products';
import { Sales } from './Sales';

@Entity()
export class ProductColors {

  [PrimaryKeyProp]?: ['color', 'product'];

  @ManyToOne({ entity: () => Colors, fieldName: 'color_id', primary: true })
  color!: Colors;

  @ManyToOne({ entity: () => Products, fieldName: 'product_id', primary: true, index: 'fk_product_colors_products1_idx' })
  product!: Products;

  @OneToMany({ entity: () => Sales, mappedBy: 'color' })
  salesCollection = new Collection<Sales>(this);

}
",
  "import { Collection, Entity, ManyToOne, OneToMany, PrimaryKeyProp } from '@mikro-orm/core';
import { Countries } from './Countries';
import { ProductSizes } from './ProductSizes';
import { Sales } from './Sales';

@Entity()
export class ProductCountries {

  [PrimaryKeyProp]?: ['country', 'product'];

  @ManyToOne({ entity: () => Countries, fieldName: 'country', primary: true })
  country!: Countries;

  @ManyToOne({ entity: () => ProductSizes, fieldName: 'product_id', primary: true, index: 'fk_product_countries_product_sizes1_idx' })
  product!: ProductSizes;

  @OneToMany({ entity: () => Sales, mappedBy: 'productCountries' })
  salesCollection = new Collection<Sales>(this);

}
",
  "import { Collection, Entity, ManyToMany, OneToMany, OneToOne, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { Countries } from './Countries';
import { ProductCountries } from './ProductCountries';
import { Products } from './Products';
import { Sales } from './Sales';

@Entity()
@Unique({ name: 'size__product_id-UNIQUE', properties: ['size', 'product'] })
export class ProductSizes {

  [PrimaryKeyProp]?: 'product';

  @OneToOne({ entity: () => Products, fieldName: 'product_id', primary: true })
  product!: Products;

  @Property({ type: 'smallint', unsigned: true })
  size!: number;

  @ManyToMany({ entity: () => Countries, mappedBy: 'productCountries' })
  productCountriesInverse = new Collection<Countries>(this);

  @OneToMany({ entity: () => ProductCountries, mappedBy: 'product' })
  productCountriesCollection = new Collection<ProductCountries>(this);

  @OneToMany({ entity: () => Sales, mappedBy: 'size' })
  salesCollection = new Collection<Sales>(this);

}
",
  "import { Collection, Entity, ManyToMany, OneToMany, OneToOne, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { Colors } from './Colors';
import { ProductColors } from './ProductColors';
import { ProductSizes } from './ProductSizes';
import { SellerProducts } from './SellerProducts';
import { Sellers } from './Sellers';

@Entity()
export class Products {

  [PrimaryKeyProp]?: 'productId';

  @PrimaryKey()
  productId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property()
  name!: string;

  @ManyToMany({ entity: () => Colors, mappedBy: 'productColors' })
  productColorsInverse = new Collection<Colors>(this);

  @OneToMany({ entity: () => ProductColors, mappedBy: 'product' })
  productColorsCollection = new Collection<ProductColors>(this);

  @OneToOne({ entity: () => ProductSizes, mappedBy: 'product' })
  productSizes?: ProductSizes;

  @OneToMany({ entity: () => SellerProducts, mappedBy: 'product' })
  sellerProductsCollection = new Collection<SellerProducts>(this);

  @ManyToMany({ entity: () => Sellers, mappedBy: 'sellerProducts' })
  sellerProductsInverse = new Collection<Sellers>(this);

}
",
  "import { Entity, Index, ManyToOne, PrimaryKey, PrimaryKeyProp, Unique } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { ProductCountries } from './ProductCountries';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { SellerProducts } from './SellerProducts';

@Entity()
@Index({ name: 'product_id_idx', expression: 'create index \`product_id_idx\` on \`sales\` (\`product_id\`)' })
@Unique({ name: 'product_id__size__color_id-UNIQUE', expression: 'create unique index \`product_id__size__color_id-UNIQUE\` on \`sales\` (\`product_id\`, \`color_id\`, \`size\`)' })
export class Sales {

  [PrimaryKeyProp]?: 'saleId';

  @PrimaryKey()
  saleId!: number;

  @ManyToOne({ entity: () => ProductColors, fieldNames: ['color_id', 'product_id'], nullable: true, index: 'fk_sales_product_colors1_idx' })
  color?: ProductColors;

  @ManyToOne({ entity: () => ProductSizes, fieldNames: ['size', 'product_id'], nullable: true, index: 'fk_sales_product_sizes1_idx' })
  size?: ProductSizes;

  @ManyToOne({ entity: () => SellerProducts, fieldNames: ['seller_id', 'exchanged_product_id'], nullable: true, index: 'fk_sales_seller_products2_idx' })
  exchanged?: SellerProducts;

  @ManyToOne({ entity: () => ProductCountries, fieldNames: ['country', 'product_id'], index: 'fk_sales_product_countries1_idx' })
  productCountries!: ProductCountries;

  @ManyToOne({ entity: () => SellerCountries, fieldNames: ['country', 'seller_id'], index: 'fk_sales_seller_countries1_idx' })
  sellerCountries!: SellerCountries;

  @ManyToOne({ entity: () => SellerProducts, fieldNames: ['seller_id', 'product_id'], index: 'fk_sales_seller_products1_idx' })
  fkSalesSellerProducts1!: SellerProducts;

}
",
  "import { Collection, Entity, ManyToOne, OneToMany, PrimaryKeyProp } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Sales } from './Sales';
import { Sellers } from './Sellers';

@Entity()
export class SellerCountries {

  [PrimaryKeyProp]?: ['country', 'seller'];

  @ManyToOne({ entity: () => Countries, fieldName: 'country', primary: true })
  country!: Countries;

  @ManyToOne({ entity: () => Sellers, fieldName: 'seller_id', primary: true, index: 'fk_seller_countries_sellers1_idx' })
  seller!: Sellers;

  @OneToMany({ entity: () => Sales, mappedBy: 'sellerCountries' })
  salesCollection = new Collection<Sales>(this);

}
",
  "import { Collection, Entity, ManyToOne, OneToMany, PrimaryKeyProp } from '@mikro-orm/core';
import { Products } from './Products';
import { Sales } from './Sales';
import { Sellers } from './Sellers';

@Entity()
export class SellerProducts {

  [PrimaryKeyProp]?: ['seller', 'product'];

  @ManyToOne({ entity: () => Sellers, fieldName: 'seller_id', primary: true })
  seller!: Sellers;

  @ManyToOne({ entity: () => Products, fieldName: 'product_id', primary: true, index: 'fk_seller_products_products1_idx' })
  product!: Products;

  @OneToMany({ entity: () => Sales, mappedBy: 'exchanged' })
  salesCollection = new Collection<Sales>(this);

  @OneToMany({ entity: () => Sales, mappedBy: 'fkSalesSellerProducts1' })
  salesCollection1 = new Collection<Sales>(this);

}
",
  "import { Collection, Entity, ManyToMany, OneToMany, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Products } from './Products';
import { SellerCountries } from './SellerCountries';
import { SellerProducts } from './SellerProducts';

@Entity()
export class Sellers {

  [PrimaryKeyProp]?: 'sellerId';

  @PrimaryKey()
  sellerId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property()
  name!: string;

  @ManyToMany({ entity: () => Products, pivotTable: 'seller_products', pivotEntity: () => SellerProducts, joinColumn: 'seller_id', inverseJoinColumn: 'product_id' })
  sellerProducts = new Collection<Products>(this);

  @ManyToMany({ entity: () => Countries, mappedBy: 'sellerCountries' })
  sellerCountriesInverse = new Collection<Countries>(this);

  @OneToMany({ entity: () => SellerCountries, mappedBy: 'seller' })
  sellerCountriesCollection = new Collection<SellerCountries>(this);

  @OneToMany({ entity: () => SellerProducts, mappedBy: 'seller' })
  sellerProductsCollection = new Collection<SellerProducts>(this);

}
",
]
`;

exports[`ambiguous_fk_example scalarPropertiesForRelations=smart bidirectionalRelations=true identifiedReferences=false entitySchema=true: dump 1`] = `
[
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { Products } from './Products';

export class Colors {
  [PrimaryKeyProp]?: 'colorId';
  colorId!: number;
  name!: string;
  productColors = new Collection<Products>(this);
  productColorsCollection = new Collection<ProductColors>(this);
}

export const ColorsSchema = new EntitySchema({
  class: Colors,
  properties: {
    colorId: { primary: true, type: 'integer' },
    name: { type: 'string', unique: 'name_UNIQUE' },
    productColors: {
      kind: 'm:n',
      entity: () => Products,
      pivotTable: 'product_colors',
      pivotEntity: () => ProductColors,
      joinColumn: 'color_id',
      inverseJoinColumn: 'product_id',
    },
    productColorsCollection: {
      kind: '1:m',
      entity: () => ProductColors,
      mappedBy: 'color',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductCountries } from './ProductCountries';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { Sellers } from './Sellers';

export class Countries {
  [PrimaryKeyProp]?: 'country';
  country!: string;
  productCountries = new Collection<ProductSizes>(this);
  sellerCountries = new Collection<Sellers>(this);
  productCountriesCollection = new Collection<ProductCountries>(this);
  sellerCountriesCollection = new Collection<SellerCountries>(this);
}

export const CountriesSchema = new EntitySchema({
  class: Countries,
  properties: {
    country: { primary: true, type: 'character', length: 2 },
    productCountries: {
      kind: 'm:n',
      entity: () => ProductSizes,
      pivotTable: 'product_countries',
      pivotEntity: () => ProductCountries,
      joinColumn: 'country',
      inverseJoinColumn: 'product_id',
    },
    sellerCountries: {
      kind: 'm:n',
      entity: () => Sellers,
      pivotTable: 'seller_countries',
      pivotEntity: () => SellerCountries,
      joinColumn: 'country',
      inverseJoinColumn: 'seller_id',
    },
    productCountriesCollection: {
      kind: '1:m',
      entity: () => ProductCountries,
      mappedBy: 'country',
    },
    sellerCountriesCollection: {
      kind: '1:m',
      entity: () => SellerCountries,
      mappedBy: 'country',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Colors } from './Colors';
import { Products } from './Products';
import { Sales } from './Sales';

export class ProductColors {
  [PrimaryKeyProp]?: ['color', 'product'];
  color!: Colors;
  product!: Products;
  salesCollection = new Collection<Sales>(this);
}

export const ProductColorsSchema = new EntitySchema({
  class: ProductColors,
  properties: {
    color: {
      primary: true,
      kind: 'm:1',
      entity: () => Colors,
      fieldName: 'color_id',
    },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => Products,
      fieldName: 'product_id',
      index: 'fk_product_colors_products1_idx',
    },
    salesCollection: { kind: '1:m', entity: () => Sales, mappedBy: 'color' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Countries } from './Countries';
import { ProductSizes } from './ProductSizes';
import { Sales } from './Sales';

export class ProductCountries {
  [PrimaryKeyProp]?: ['country', 'product'];
  country!: Countries;
  product!: ProductSizes;
  salesCollection = new Collection<Sales>(this);
}

export const ProductCountriesSchema = new EntitySchema({
  class: ProductCountries,
  properties: {
    country: {
      primary: true,
      kind: 'm:1',
      entity: () => Countries,
      fieldName: 'country',
    },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => ProductSizes,
      fieldName: 'product_id',
      index: 'fk_product_countries_product_sizes1_idx',
    },
    salesCollection: {
      kind: '1:m',
      entity: () => Sales,
      mappedBy: 'productCountries',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Countries } from './Countries';
import { ProductCountries } from './ProductCountries';
import { Products } from './Products';
import { Sales } from './Sales';

export class ProductSizes {
  [PrimaryKeyProp]?: 'product';
  product!: Products;
  size!: number;
  productCountriesInverse = new Collection<Countries>(this);
  productCountriesCollection = new Collection<ProductCountries>(this);
  salesCollection = new Collection<Sales>(this);
}

export const ProductSizesSchema = new EntitySchema({
  class: ProductSizes,
  uniques: [{ name: 'size__product_id-UNIQUE', properties: ['size', 'product'] }],
  properties: {
    product: {
      primary: true,
      kind: '1:1',
      entity: () => Products,
      fieldName: 'product_id',
    },
    size: { type: 'smallint', unsigned: true },
    productCountriesInverse: {
      kind: 'm:n',
      entity: () => Countries,
      mappedBy: 'productCountries',
    },
    productCountriesCollection: {
      kind: '1:m',
      entity: () => ProductCountries,
      mappedBy: 'product',
    },
    salesCollection: { kind: '1:m', entity: () => Sales, mappedBy: 'size' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Colors } from './Colors';
import { ProductColors } from './ProductColors';
import { ProductSizes } from './ProductSizes';
import { SellerProducts } from './SellerProducts';
import { Sellers } from './Sellers';

export class Products {
  [PrimaryKeyProp]?: 'productId';
  productId!: number;
  name!: string;
  productColorsInverse = new Collection<Colors>(this);
  productColorsCollection = new Collection<ProductColors>(this);
  productSizes?: ProductSizes;
  sellerProductsCollection = new Collection<SellerProducts>(this);
  sellerProductsInverse = new Collection<Sellers>(this);
}

export const ProductsSchema = new EntitySchema({
  class: Products,
  properties: {
    productId: { primary: true, type: 'integer' },
    name: { type: 'string', unique: 'name_UNIQUE' },
    productColorsInverse: {
      kind: 'm:n',
      entity: () => Colors,
      mappedBy: 'productColors',
    },
    productColorsCollection: {
      kind: '1:m',
      entity: () => ProductColors,
      mappedBy: 'product',
    },
    productSizes: { kind: '1:1', entity: () => ProductSizes, mappedBy: 'product' },
    sellerProductsCollection: {
      kind: '1:m',
      entity: () => SellerProducts,
      mappedBy: 'product',
    },
    sellerProductsInverse: {
      kind: 'm:n',
      entity: () => Sellers,
      mappedBy: 'sellerProducts',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { ProductCountries } from './ProductCountries';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { SellerProducts } from './SellerProducts';

export class Sales {
  [PrimaryKeyProp]?: 'saleId';
  saleId!: number;
  color?: ProductColors;
  size?: ProductSizes;
  exchanged?: SellerProducts;
  productCountries!: ProductCountries;
  sellerCountries!: SellerCountries;
  fkSalesSellerProducts1!: SellerProducts;
}

export const SalesSchema = new EntitySchema({
  class: Sales,
  indexes: [
    {
      name: 'product_id_idx',
      expression: 'create index \`product_id_idx\` on \`sales\` (\`product_id\`)',
    },
  ],
  uniques: [
    {
      name: 'product_id__size__color_id-UNIQUE',
      expression: 'create unique index \`product_id__size__color_id-UNIQUE\` on \`sales\` (\`product_id\`, \`color_id\`, \`size\`)',
    },
  ],
  properties: {
    saleId: { primary: true, type: 'integer' },
    color: {
      kind: 'm:1',
      entity: () => ProductColors,
      fieldNames: ['color_id', 'product_id'],
      nullable: true,
      index: 'fk_sales_product_colors1_idx',
    },
    size: {
      kind: 'm:1',
      entity: () => ProductSizes,
      fieldNames: ['size', 'product_id'],
      nullable: true,
      index: 'fk_sales_product_sizes1_idx',
    },
    exchanged: {
      kind: 'm:1',
      entity: () => SellerProducts,
      fieldNames: ['seller_id', 'exchanged_product_id'],
      nullable: true,
      index: 'fk_sales_seller_products2_idx',
    },
    productCountries: {
      kind: 'm:1',
      entity: () => ProductCountries,
      fieldNames: ['country', 'product_id'],
      index: 'fk_sales_product_countries1_idx',
    },
    sellerCountries: {
      kind: 'm:1',
      entity: () => SellerCountries,
      fieldNames: ['country', 'seller_id'],
      index: 'fk_sales_seller_countries1_idx',
    },
    fkSalesSellerProducts1: {
      kind: 'm:1',
      entity: () => SellerProducts,
      fieldNames: ['seller_id', 'product_id'],
      index: 'fk_sales_seller_products1_idx',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Sales } from './Sales';
import { Sellers } from './Sellers';

export class SellerCountries {
  [PrimaryKeyProp]?: ['country', 'seller'];
  country!: Countries;
  seller!: Sellers;
  salesCollection = new Collection<Sales>(this);
}

export const SellerCountriesSchema = new EntitySchema({
  class: SellerCountries,
  properties: {
    country: {
      primary: true,
      kind: 'm:1',
      entity: () => Countries,
      fieldName: 'country',
    },
    seller: {
      primary: true,
      kind: 'm:1',
      entity: () => Sellers,
      fieldName: 'seller_id',
      index: 'fk_seller_countries_sellers1_idx',
    },
    salesCollection: {
      kind: '1:m',
      entity: () => Sales,
      mappedBy: 'sellerCountries',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Products } from './Products';
import { Sales } from './Sales';
import { Sellers } from './Sellers';

export class SellerProducts {
  [PrimaryKeyProp]?: ['seller', 'product'];
  seller!: Sellers;
  product!: Products;
  salesCollection = new Collection<Sales>(this);
  salesCollection1 = new Collection<Sales>(this);
}

export const SellerProductsSchema = new EntitySchema({
  class: SellerProducts,
  properties: {
    seller: {
      primary: true,
      kind: 'm:1',
      entity: () => Sellers,
      fieldName: 'seller_id',
    },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => Products,
      fieldName: 'product_id',
      index: 'fk_seller_products_products1_idx',
    },
    salesCollection: { kind: '1:m', entity: () => Sales, mappedBy: 'exchanged' },
    salesCollection1: {
      kind: '1:m',
      entity: () => Sales,
      mappedBy: 'fkSalesSellerProducts1',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Products } from './Products';
import { SellerCountries } from './SellerCountries';
import { SellerProducts } from './SellerProducts';

export class Sellers {
  [PrimaryKeyProp]?: 'sellerId';
  sellerId!: number;
  name!: string;
  sellerProducts = new Collection<Products>(this);
  sellerCountriesInverse = new Collection<Countries>(this);
  sellerCountriesCollection = new Collection<SellerCountries>(this);
  sellerProductsCollection = new Collection<SellerProducts>(this);
}

export const SellersSchema = new EntitySchema({
  class: Sellers,
  properties: {
    sellerId: { primary: true, type: 'integer' },
    name: { type: 'string', unique: 'name_UNIQUE' },
    sellerProducts: {
      kind: 'm:n',
      entity: () => Products,
      pivotTable: 'seller_products',
      pivotEntity: () => SellerProducts,
      joinColumn: 'seller_id',
      inverseJoinColumn: 'product_id',
    },
    sellerCountriesInverse: {
      kind: 'm:n',
      entity: () => Countries,
      mappedBy: 'sellerCountries',
    },
    sellerCountriesCollection: {
      kind: '1:m',
      entity: () => SellerCountries,
      mappedBy: 'seller',
    },
    sellerProductsCollection: {
      kind: '1:m',
      entity: () => SellerProducts,
      mappedBy: 'seller',
    },
  },
});
",
]
`;

exports[`ambiguous_fk_example scalarPropertiesForRelations=smart bidirectionalRelations=true identifiedReferences=true entitySchema=false: dump 1`] = `
[
  "import { Collection, Entity, ManyToMany, OneToMany, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { Products } from './Products';

@Entity()
export class Colors {

  [PrimaryKeyProp]?: 'colorId';

  @PrimaryKey()
  colorId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property()
  name!: string;

  @ManyToMany({ entity: () => Products, pivotTable: 'product_colors', pivotEntity: () => ProductColors, joinColumn: 'color_id', inverseJoinColumn: 'product_id' })
  productColors = new Collection<Products>(this);

  @OneToMany({ entity: () => ProductColors, mappedBy: 'color' })
  productColorsCollection = new Collection<ProductColors>(this);

}
",
  "import { Collection, Entity, ManyToMany, OneToMany, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductCountries } from './ProductCountries';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { Sellers } from './Sellers';

@Entity()
export class Countries {

  [PrimaryKeyProp]?: 'country';

  @PrimaryKey({ type: 'character', length: 2 })
  country!: string;

  @ManyToMany({ entity: () => ProductSizes, pivotTable: 'product_countries', pivotEntity: () => ProductCountries, joinColumn: 'country', inverseJoinColumn: 'product_id' })
  productCountries = new Collection<ProductSizes>(this);

  @ManyToMany({ entity: () => Sellers, pivotTable: 'seller_countries', pivotEntity: () => SellerCountries, joinColumn: 'country', inverseJoinColumn: 'seller_id' })
  sellerCountries = new Collection<Sellers>(this);

  @OneToMany({ entity: () => ProductCountries, mappedBy: 'country' })
  productCountriesCollection = new Collection<ProductCountries>(this);

  @OneToMany({ entity: () => SellerCountries, mappedBy: 'country' })
  sellerCountriesCollection = new Collection<SellerCountries>(this);

}
",
  "import { Collection, Entity, ManyToOne, OneToMany, PrimaryKeyProp, type Ref } from '@mikro-orm/core';
import { Colors } from './Colors';
import { Products } from './Products';
import { Sales } from './Sales';

@Entity()
export class ProductColors {

  [PrimaryKeyProp]?: ['color', 'product'];

  @ManyToOne({ entity: () => Colors, ref: true, fieldName: 'color_id', primary: true })
  color!: Ref<Colors>;

  @ManyToOne({ entity: () => Products, ref: true, fieldName: 'product_id', primary: true, index: 'fk_product_colors_products1_idx' })
  product!: Ref<Products>;

  @OneToMany({ entity: () => Sales, mappedBy: 'color' })
  salesCollection = new Collection<Sales>(this);

}
",
  "import { Collection, Entity, ManyToOne, OneToMany, PrimaryKeyProp, type Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { ProductSizes } from './ProductSizes';
import { Sales } from './Sales';

@Entity()
export class ProductCountries {

  [PrimaryKeyProp]?: ['country', 'product'];

  @ManyToOne({ entity: () => Countries, ref: true, fieldName: 'country', primary: true })
  country!: Ref<Countries>;

  @ManyToOne({ entity: () => ProductSizes, ref: true, fieldName: 'product_id', primary: true, index: 'fk_product_countries_product_sizes1_idx' })
  product!: Ref<ProductSizes>;

  @OneToMany({ entity: () => Sales, mappedBy: 'productCountries' })
  salesCollection = new Collection<Sales>(this);

}
",
  "import { Collection, Entity, ManyToMany, OneToMany, OneToOne, PrimaryKeyProp, Property, type Ref, Unique } from '@mikro-orm/core';
import { Countries } from './Countries';
import { ProductCountries } from './ProductCountries';
import { Products } from './Products';
import { Sales } from './Sales';

@Entity()
@Unique({ name: 'size__product_id-UNIQUE', properties: ['size', 'product'] })
export class ProductSizes {

  [PrimaryKeyProp]?: 'product';

  @OneToOne({ entity: () => Products, ref: true, fieldName: 'product_id', primary: true })
  product!: Ref<Products>;

  @Property({ type: 'smallint', unsigned: true })
  size!: number;

  @ManyToMany({ entity: () => Countries, mappedBy: 'productCountries' })
  productCountriesInverse = new Collection<Countries>(this);

  @OneToMany({ entity: () => ProductCountries, mappedBy: 'product' })
  productCountriesCollection = new Collection<ProductCountries>(this);

  @OneToMany({ entity: () => Sales, mappedBy: 'size' })
  salesCollection = new Collection<Sales>(this);

}
",
  "import { Collection, Entity, ManyToMany, OneToMany, OneToOne, PrimaryKey, PrimaryKeyProp, Property, type Ref, Unique } from '@mikro-orm/core';
import { Colors } from './Colors';
import { ProductColors } from './ProductColors';
import { ProductSizes } from './ProductSizes';
import { SellerProducts } from './SellerProducts';
import { Sellers } from './Sellers';

@Entity()
export class Products {

  [PrimaryKeyProp]?: 'productId';

  @PrimaryKey()
  productId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property()
  name!: string;

  @ManyToMany({ entity: () => Colors, mappedBy: 'productColors' })
  productColorsInverse = new Collection<Colors>(this);

  @OneToMany({ entity: () => ProductColors, mappedBy: 'product' })
  productColorsCollection = new Collection<ProductColors>(this);

  @OneToOne({ entity: () => ProductSizes, ref: true, mappedBy: 'product' })
  productSizes?: Ref<ProductSizes>;

  @OneToMany({ entity: () => SellerProducts, mappedBy: 'product' })
  sellerProductsCollection = new Collection<SellerProducts>(this);

  @ManyToMany({ entity: () => Sellers, mappedBy: 'sellerProducts' })
  sellerProductsInverse = new Collection<Sellers>(this);

}
",
  "import { Entity, Index, ManyToOne, PrimaryKey, PrimaryKeyProp, type Ref, Unique } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { ProductCountries } from './ProductCountries';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { SellerProducts } from './SellerProducts';

@Entity()
@Index({ name: 'product_id_idx', expression: 'create index \`product_id_idx\` on \`sales\` (\`product_id\`)' })
@Unique({ name: 'product_id__size__color_id-UNIQUE', expression: 'create unique index \`product_id__size__color_id-UNIQUE\` on \`sales\` (\`product_id\`, \`color_id\`, \`size\`)' })
export class Sales {

  [PrimaryKeyProp]?: 'saleId';

  @PrimaryKey()
  saleId!: number;

  @ManyToOne({ entity: () => ProductColors, ref: true, fieldNames: ['color_id', 'product_id'], nullable: true, index: 'fk_sales_product_colors1_idx' })
  color?: Ref<ProductColors>;

  @ManyToOne({ entity: () => ProductSizes, ref: true, fieldNames: ['size', 'product_id'], nullable: true, index: 'fk_sales_product_sizes1_idx' })
  size?: Ref<ProductSizes>;

  @ManyToOne({ entity: () => SellerProducts, ref: true, fieldNames: ['seller_id', 'exchanged_product_id'], nullable: true, index: 'fk_sales_seller_products2_idx' })
  exchanged?: Ref<SellerProducts>;

  @ManyToOne({ entity: () => ProductCountries, ref: true, fieldNames: ['country', 'product_id'], index: 'fk_sales_product_countries1_idx' })
  productCountries!: Ref<ProductCountries>;

  @ManyToOne({ entity: () => SellerCountries, ref: true, fieldNames: ['country', 'seller_id'], index: 'fk_sales_seller_countries1_idx' })
  sellerCountries!: Ref<SellerCountries>;

  @ManyToOne({ entity: () => SellerProducts, ref: true, fieldNames: ['seller_id', 'product_id'], index: 'fk_sales_seller_products1_idx' })
  fkSalesSellerProducts1!: Ref<SellerProducts>;

}
",
  "import { Collection, Entity, ManyToOne, OneToMany, PrimaryKeyProp, type Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Sales } from './Sales';
import { Sellers } from './Sellers';

@Entity()
export class SellerCountries {

  [PrimaryKeyProp]?: ['country', 'seller'];

  @ManyToOne({ entity: () => Countries, ref: true, fieldName: 'country', primary: true })
  country!: Ref<Countries>;

  @ManyToOne({ entity: () => Sellers, ref: true, fieldName: 'seller_id', primary: true, index: 'fk_seller_countries_sellers1_idx' })
  seller!: Ref<Sellers>;

  @OneToMany({ entity: () => Sales, mappedBy: 'sellerCountries' })
  salesCollection = new Collection<Sales>(this);

}
",
  "import { Collection, Entity, ManyToOne, OneToMany, PrimaryKeyProp, type Ref } from '@mikro-orm/core';
import { Products } from './Products';
import { Sales } from './Sales';
import { Sellers } from './Sellers';

@Entity()
export class SellerProducts {

  [PrimaryKeyProp]?: ['seller', 'product'];

  @ManyToOne({ entity: () => Sellers, ref: true, fieldName: 'seller_id', primary: true })
  seller!: Ref<Sellers>;

  @ManyToOne({ entity: () => Products, ref: true, fieldName: 'product_id', primary: true, index: 'fk_seller_products_products1_idx' })
  product!: Ref<Products>;

  @OneToMany({ entity: () => Sales, mappedBy: 'exchanged' })
  salesCollection = new Collection<Sales>(this);

  @OneToMany({ entity: () => Sales, mappedBy: 'fkSalesSellerProducts1' })
  salesCollection1 = new Collection<Sales>(this);

}
",
  "import { Collection, Entity, ManyToMany, OneToMany, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Products } from './Products';
import { SellerCountries } from './SellerCountries';
import { SellerProducts } from './SellerProducts';

@Entity()
export class Sellers {

  [PrimaryKeyProp]?: 'sellerId';

  @PrimaryKey()
  sellerId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property()
  name!: string;

  @ManyToMany({ entity: () => Products, pivotTable: 'seller_products', pivotEntity: () => SellerProducts, joinColumn: 'seller_id', inverseJoinColumn: 'product_id' })
  sellerProducts = new Collection<Products>(this);

  @ManyToMany({ entity: () => Countries, mappedBy: 'sellerCountries' })
  sellerCountriesInverse = new Collection<Countries>(this);

  @OneToMany({ entity: () => SellerCountries, mappedBy: 'seller' })
  sellerCountriesCollection = new Collection<SellerCountries>(this);

  @OneToMany({ entity: () => SellerProducts, mappedBy: 'seller' })
  sellerProductsCollection = new Collection<SellerProducts>(this);

}
",
]
`;

exports[`ambiguous_fk_example scalarPropertiesForRelations=smart bidirectionalRelations=true identifiedReferences=true entitySchema=true: dump 1`] = `
[
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { Products } from './Products';

export class Colors {
  [PrimaryKeyProp]?: 'colorId';
  colorId!: number;
  name!: string;
  productColors = new Collection<Products>(this);
  productColorsCollection = new Collection<ProductColors>(this);
}

export const ColorsSchema = new EntitySchema({
  class: Colors,
  properties: {
    colorId: { primary: true, type: 'integer' },
    name: { type: 'string', unique: 'name_UNIQUE' },
    productColors: {
      kind: 'm:n',
      entity: () => Products,
      pivotTable: 'product_colors',
      pivotEntity: () => ProductColors,
      joinColumn: 'color_id',
      inverseJoinColumn: 'product_id',
    },
    productColorsCollection: {
      kind: '1:m',
      entity: () => ProductColors,
      mappedBy: 'color',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductCountries } from './ProductCountries';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { Sellers } from './Sellers';

export class Countries {
  [PrimaryKeyProp]?: 'country';
  country!: string;
  productCountries = new Collection<ProductSizes>(this);
  sellerCountries = new Collection<Sellers>(this);
  productCountriesCollection = new Collection<ProductCountries>(this);
  sellerCountriesCollection = new Collection<SellerCountries>(this);
}

export const CountriesSchema = new EntitySchema({
  class: Countries,
  properties: {
    country: { primary: true, type: 'character', length: 2 },
    productCountries: {
      kind: 'm:n',
      entity: () => ProductSizes,
      pivotTable: 'product_countries',
      pivotEntity: () => ProductCountries,
      joinColumn: 'country',
      inverseJoinColumn: 'product_id',
    },
    sellerCountries: {
      kind: 'm:n',
      entity: () => Sellers,
      pivotTable: 'seller_countries',
      pivotEntity: () => SellerCountries,
      joinColumn: 'country',
      inverseJoinColumn: 'seller_id',
    },
    productCountriesCollection: {
      kind: '1:m',
      entity: () => ProductCountries,
      mappedBy: 'country',
    },
    sellerCountriesCollection: {
      kind: '1:m',
      entity: () => SellerCountries,
      mappedBy: 'country',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp, type Ref } from '@mikro-orm/core';
import { Colors } from './Colors';
import { Products } from './Products';
import { Sales } from './Sales';

export class ProductColors {
  [PrimaryKeyProp]?: ['color', 'product'];
  color!: Ref<Colors>;
  product!: Ref<Products>;
  salesCollection = new Collection<Sales>(this);
}

export const ProductColorsSchema = new EntitySchema({
  class: ProductColors,
  properties: {
    color: {
      primary: true,
      kind: 'm:1',
      entity: () => Colors,
      ref: true,
      fieldName: 'color_id',
    },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => Products,
      ref: true,
      fieldName: 'product_id',
      index: 'fk_product_colors_products1_idx',
    },
    salesCollection: { kind: '1:m', entity: () => Sales, mappedBy: 'color' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp, type Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { ProductSizes } from './ProductSizes';
import { Sales } from './Sales';

export class ProductCountries {
  [PrimaryKeyProp]?: ['country', 'product'];
  country!: Ref<Countries>;
  product!: Ref<ProductSizes>;
  salesCollection = new Collection<Sales>(this);
}

export const ProductCountriesSchema = new EntitySchema({
  class: ProductCountries,
  properties: {
    country: {
      primary: true,
      kind: 'm:1',
      entity: () => Countries,
      ref: true,
      fieldName: 'country',
    },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => ProductSizes,
      ref: true,
      fieldName: 'product_id',
      index: 'fk_product_countries_product_sizes1_idx',
    },
    salesCollection: {
      kind: '1:m',
      entity: () => Sales,
      mappedBy: 'productCountries',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp, type Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { ProductCountries } from './ProductCountries';
import { Products } from './Products';
import { Sales } from './Sales';

export class ProductSizes {
  [PrimaryKeyProp]?: 'product';
  product!: Ref<Products>;
  size!: number;
  productCountriesInverse = new Collection<Countries>(this);
  productCountriesCollection = new Collection<ProductCountries>(this);
  salesCollection = new Collection<Sales>(this);
}

export const ProductSizesSchema = new EntitySchema({
  class: ProductSizes,
  uniques: [{ name: 'size__product_id-UNIQUE', properties: ['size', 'product'] }],
  properties: {
    product: {
      primary: true,
      kind: '1:1',
      entity: () => Products,
      ref: true,
      fieldName: 'product_id',
    },
    size: { type: 'smallint', unsigned: true },
    productCountriesInverse: {
      kind: 'm:n',
      entity: () => Countries,
      mappedBy: 'productCountries',
    },
    productCountriesCollection: {
      kind: '1:m',
      entity: () => ProductCountries,
      mappedBy: 'product',
    },
    salesCollection: { kind: '1:m', entity: () => Sales, mappedBy: 'size' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp, type Ref } from '@mikro-orm/core';
import { Colors } from './Colors';
import { ProductColors } from './ProductColors';
import { ProductSizes } from './ProductSizes';
import { SellerProducts } from './SellerProducts';
import { Sellers } from './Sellers';

export class Products {
  [PrimaryKeyProp]?: 'productId';
  productId!: number;
  name!: string;
  productColorsInverse = new Collection<Colors>(this);
  productColorsCollection = new Collection<ProductColors>(this);
  productSizes?: Ref<ProductSizes>;
  sellerProductsCollection = new Collection<SellerProducts>(this);
  sellerProductsInverse = new Collection<Sellers>(this);
}

export const ProductsSchema = new EntitySchema({
  class: Products,
  properties: {
    productId: { primary: true, type: 'integer' },
    name: { type: 'string', unique: 'name_UNIQUE' },
    productColorsInverse: {
      kind: 'm:n',
      entity: () => Colors,
      mappedBy: 'productColors',
    },
    productColorsCollection: {
      kind: '1:m',
      entity: () => ProductColors,
      mappedBy: 'product',
    },
    productSizes: {
      kind: '1:1',
      entity: () => ProductSizes,
      ref: true,
      mappedBy: 'product',
    },
    sellerProductsCollection: {
      kind: '1:m',
      entity: () => SellerProducts,
      mappedBy: 'product',
    },
    sellerProductsInverse: {
      kind: 'm:n',
      entity: () => Sellers,
      mappedBy: 'sellerProducts',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, type Ref } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { ProductCountries } from './ProductCountries';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { SellerProducts } from './SellerProducts';

export class Sales {
  [PrimaryKeyProp]?: 'saleId';
  saleId!: number;
  color?: Ref<ProductColors>;
  size?: Ref<ProductSizes>;
  exchanged?: Ref<SellerProducts>;
  productCountries!: Ref<ProductCountries>;
  sellerCountries!: Ref<SellerCountries>;
  fkSalesSellerProducts1!: Ref<SellerProducts>;
}

export const SalesSchema = new EntitySchema({
  class: Sales,
  indexes: [
    {
      name: 'product_id_idx',
      expression: 'create index \`product_id_idx\` on \`sales\` (\`product_id\`)',
    },
  ],
  uniques: [
    {
      name: 'product_id__size__color_id-UNIQUE',
      expression: 'create unique index \`product_id__size__color_id-UNIQUE\` on \`sales\` (\`product_id\`, \`color_id\`, \`size\`)',
    },
  ],
  properties: {
    saleId: { primary: true, type: 'integer' },
    color: {
      kind: 'm:1',
      entity: () => ProductColors,
      ref: true,
      fieldNames: ['color_id', 'product_id'],
      nullable: true,
      index: 'fk_sales_product_colors1_idx',
    },
    size: {
      kind: 'm:1',
      entity: () => ProductSizes,
      ref: true,
      fieldNames: ['size', 'product_id'],
      nullable: true,
      index: 'fk_sales_product_sizes1_idx',
    },
    exchanged: {
      kind: 'm:1',
      entity: () => SellerProducts,
      ref: true,
      fieldNames: ['seller_id', 'exchanged_product_id'],
      nullable: true,
      index: 'fk_sales_seller_products2_idx',
    },
    productCountries: {
      kind: 'm:1',
      entity: () => ProductCountries,
      ref: true,
      fieldNames: ['country', 'product_id'],
      index: 'fk_sales_product_countries1_idx',
    },
    sellerCountries: {
      kind: 'm:1',
      entity: () => SellerCountries,
      ref: true,
      fieldNames: ['country', 'seller_id'],
      index: 'fk_sales_seller_countries1_idx',
    },
    fkSalesSellerProducts1: {
      kind: 'm:1',
      entity: () => SellerProducts,
      ref: true,
      fieldNames: ['seller_id', 'product_id'],
      index: 'fk_sales_seller_products1_idx',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp, type Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Sales } from './Sales';
import { Sellers } from './Sellers';

export class SellerCountries {
  [PrimaryKeyProp]?: ['country', 'seller'];
  country!: Ref<Countries>;
  seller!: Ref<Sellers>;
  salesCollection = new Collection<Sales>(this);
}

export const SellerCountriesSchema = new EntitySchema({
  class: SellerCountries,
  properties: {
    country: {
      primary: true,
      kind: 'm:1',
      entity: () => Countries,
      ref: true,
      fieldName: 'country',
    },
    seller: {
      primary: true,
      kind: 'm:1',
      entity: () => Sellers,
      ref: true,
      fieldName: 'seller_id',
      index: 'fk_seller_countries_sellers1_idx',
    },
    salesCollection: {
      kind: '1:m',
      entity: () => Sales,
      mappedBy: 'sellerCountries',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp, type Ref } from '@mikro-orm/core';
import { Products } from './Products';
import { Sales } from './Sales';
import { Sellers } from './Sellers';

export class SellerProducts {
  [PrimaryKeyProp]?: ['seller', 'product'];
  seller!: Ref<Sellers>;
  product!: Ref<Products>;
  salesCollection = new Collection<Sales>(this);
  salesCollection1 = new Collection<Sales>(this);
}

export const SellerProductsSchema = new EntitySchema({
  class: SellerProducts,
  properties: {
    seller: {
      primary: true,
      kind: 'm:1',
      entity: () => Sellers,
      ref: true,
      fieldName: 'seller_id',
    },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => Products,
      ref: true,
      fieldName: 'product_id',
      index: 'fk_seller_products_products1_idx',
    },
    salesCollection: { kind: '1:m', entity: () => Sales, mappedBy: 'exchanged' },
    salesCollection1: {
      kind: '1:m',
      entity: () => Sales,
      mappedBy: 'fkSalesSellerProducts1',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Products } from './Products';
import { SellerCountries } from './SellerCountries';
import { SellerProducts } from './SellerProducts';

export class Sellers {
  [PrimaryKeyProp]?: 'sellerId';
  sellerId!: number;
  name!: string;
  sellerProducts = new Collection<Products>(this);
  sellerCountriesInverse = new Collection<Countries>(this);
  sellerCountriesCollection = new Collection<SellerCountries>(this);
  sellerProductsCollection = new Collection<SellerProducts>(this);
}

export const SellersSchema = new EntitySchema({
  class: Sellers,
  properties: {
    sellerId: { primary: true, type: 'integer' },
    name: { type: 'string', unique: 'name_UNIQUE' },
    sellerProducts: {
      kind: 'm:n',
      entity: () => Products,
      pivotTable: 'seller_products',
      pivotEntity: () => SellerProducts,
      joinColumn: 'seller_id',
      inverseJoinColumn: 'product_id',
    },
    sellerCountriesInverse: {
      kind: 'm:n',
      entity: () => Countries,
      mappedBy: 'sellerCountries',
    },
    sellerCountriesCollection: {
      kind: '1:m',
      entity: () => SellerCountries,
      mappedBy: 'seller',
    },
    sellerProductsCollection: {
      kind: '1:m',
      entity: () => SellerProducts,
      mappedBy: 'seller',
    },
  },
});
",
]
`;
