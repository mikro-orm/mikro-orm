// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`EntityGenerator generate entities from schema [mysql]: mysql-entity-dump 1`] = `
Array [
  "import { Entity, OneToOne, Property } from '@mikro-orm/core';
import { Author2 } from './Author2';

@Entity()
export class Address2 {

  @OneToOne({ entity: () => Author2, onUpdateIntegrity: 'cascade', onDelete: 'cascade', primary: true })
  author!: Author2;

  @Property({ length: 255 })
  value!: string;

}
",
  "import { Entity, Index, ManyToOne, PrimaryKey, Property, Unique } from '@mikro-orm/core';
import { Book2 } from './Book2';

@Entity()
@Index({ name: 'author2_name_age_index', properties: ['name', 'age'] })
@Unique({ name: 'author2_name_email_unique', properties: ['name', 'email'] })
export class Author2 {

  @PrimaryKey()
  id!: number;

  @Property({ length: 3, defaultRaw: \`current_timestamp(3)\` })
  createdAt!: Date;

  @Property({ length: 3, defaultRaw: \`current_timestamp(3)\` })
  updatedAt!: Date;

  @Index({ name: 'custom_idx_name_123' })
  @Property({ length: 255 })
  name!: string;

  @Index({ name: 'custom_email_index_name' })
  @Unique({ name: 'custom_email_unique_name' })
  @Property({ length: 255 })
  email!: string;

  @Property({ nullable: true })
  age?: number;

  @Index({ name: 'author2_terms_accepted_index' })
  @Property()
  termsAccepted: boolean = false;

  @Property({ nullable: true })
  optional?: boolean;

  @Property({ columnType: 'text', length: 65535, nullable: true })
  identities?: string;

  @Index({ name: 'author2_born_index' })
  @Property({ columnType: 'date', nullable: true })
  born?: string;

  @Index({ name: 'born_time_idx' })
  @Property({ columnType: 'time', nullable: true })
  bornTime?: string;

  @ManyToOne({ entity: () => Book2, onDelete: 'cascade', nullable: true })
  favouriteBook?: Book2;

  @ManyToOne({ entity: () => Author2, onUpdateIntegrity: 'cascade', onDelete: 'set null', nullable: true })
  favouriteAuthor?: Author2;

}
",
  "import { Entity, ManyToOne } from '@mikro-orm/core';
import { Author2 } from './Author2';

@Entity({ collection: 'author2_following' })
export class Author2Following {

  @ManyToOne({ entity: () => Author2, fieldName: 'author2_1_id', onUpdateIntegrity: 'cascade', onDelete: 'cascade', primary: true })
  author21!: Author2;

  @ManyToOne({ entity: () => Author2, fieldName: 'author2_2_id', onUpdateIntegrity: 'cascade', onDelete: 'cascade', primary: true })
  author22!: Author2;

}
",
  "import { Entity, ManyToOne } from '@mikro-orm/core';
import { Author2 } from './Author2';

@Entity()
export class AuthorToFriend {

  @ManyToOne({ entity: () => Author2, fieldName: 'author2_1_id', onUpdateIntegrity: 'cascade', onDelete: 'cascade', primary: true })
  author21!: Author2;

  @ManyToOne({ entity: () => Author2, fieldName: 'author2_2_id', onUpdateIntegrity: 'cascade', onDelete: 'cascade', primary: true })
  author22!: Author2;

}
",
  "import { Entity, Index, ManyToOne, OneToOne, PrimaryKey, Property } from '@mikro-orm/core';

@Entity()
export class BaseUser2 {

  @PrimaryKey()
  id!: number;

  @Property({ length: 100 })
  firstName!: string;

  @Property({ length: 100 })
  lastName!: string;

  @Index({ name: 'base_user2_type_index' })
  @Property({ columnType: \`enum('employee','manager','owner')\`, length: 8 })
  type!: string;

  @Property({ length: 255, nullable: true })
  ownerProp?: string;

  @ManyToOne({ entity: () => BaseUser2, onUpdateIntegrity: 'cascade', onDelete: 'set null', nullable: true })
  favouriteEmployee?: BaseUser2;

  @OneToOne({ entity: () => BaseUser2, onUpdateIntegrity: 'cascade', onDelete: 'set null', nullable: true })
  favouriteManager?: BaseUser2;

  @Property({ nullable: true })
  employeeProp?: number;

  @Property({ length: 255, nullable: true })
  managerProp?: string;

}
",
  "import { Entity, ManyToOne, PrimaryKey, Property } from '@mikro-orm/core';
import { Author2 } from './Author2';
import { Publisher2 } from './Publisher2';

@Entity()
export class Book2 {

  @PrimaryKey({ length: 36 })
  uuidPk!: string;

  @Property({ length: 3, defaultRaw: \`current_timestamp(3)\` })
  createdAt!: Date;

  @Property({ length: 255, nullable: true })
  title?: string;

  @Property({ columnType: 'text', length: 65535, nullable: true })
  perex?: string;

  @Property({ columnType: 'decimal(8,2)', nullable: true })
  price?: string;

  @Property({ columnType: 'double', nullable: true })
  double?: string;

  @Property({ columnType: 'json', nullable: true })
  meta?: any;

  @ManyToOne({ entity: () => Author2 })
  author!: Author2;

  @ManyToOne({ entity: () => Publisher2, onUpdateIntegrity: 'cascade', onDelete: 'cascade', nullable: true })
  publisher?: Publisher2;

  @Property({ length: 255, nullable: true, defaultRaw: \`lol\` })
  foo?: string;

}
",
  "import { Entity, ManyToOne, PrimaryKey } from '@mikro-orm/core';
import { Book2 } from './Book2';
import { BookTag2 } from './BookTag2';

@Entity({ collection: 'book2_tags' })
export class Book2Tags {

  @PrimaryKey()
  order!: number;

  @ManyToOne({ entity: () => Book2, onUpdateIntegrity: 'cascade', onDelete: 'cascade' })
  book2!: Book2;

  @ManyToOne({ entity: () => BookTag2, onUpdateIntegrity: 'cascade', onDelete: 'cascade' })
  bookTag2!: BookTag2;

}
",
  "import { Entity, PrimaryKey, Property } from '@mikro-orm/core';

@Entity()
export class BookTag2 {

  @PrimaryKey({ columnType: 'bigint' })
  id!: string;

  @Property({ length: 50 })
  name!: string;

}
",
  "import { Entity, ManyToOne } from '@mikro-orm/core';
import { Book2 } from './Book2';
import { BookTag2 } from './BookTag2';

@Entity()
export class BookToTagUnordered {

  @ManyToOne({ entity: () => Book2, onUpdateIntegrity: 'cascade', onDelete: 'cascade', primary: true })
  book2!: Book2;

  @ManyToOne({ entity: () => BookTag2, onUpdateIntegrity: 'cascade', onDelete: 'cascade', primary: true })
  bookTag2!: BookTag2;

}
",
  "import { Entity, Index, PrimaryKey, Property } from '@mikro-orm/core';

@Entity()
export class Car2 {

  @Index({ name: 'car2_name_index' })
  @PrimaryKey({ length: 100 })
  name!: string;

  @Index({ name: 'car2_year_index' })
  @PrimaryKey()
  year!: number;

  @Property()
  price!: number;

}
",
  "import { Entity, ManyToOne, PrimaryKey, Property } from '@mikro-orm/core';
import { Car2 } from './Car2';

@Entity()
export class CarOwner2 {

  @PrimaryKey()
  id!: number;

  @Property({ length: 255 })
  name!: string;

  @ManyToOne({ entity: () => Car2, onUpdateIntegrity: 'cascade' })
  car!: Car2;

}
",
  "import { Entity, ManyToOne, PrimaryKey, Property } from '@mikro-orm/core';
import { Test2 } from './Test2';

@Entity()
export class Configuration2 {

  @PrimaryKey({ length: 255 })
  property!: string;

  @ManyToOne({ entity: () => Test2, onUpdateIntegrity: 'cascade', primary: true })
  test!: Test2;

  @Property({ length: 255 })
  value!: string;

}
",
  "import { Entity, PrimaryKey } from '@mikro-orm/core';

@Entity()
export class Dummy2 {

  @PrimaryKey()
  id!: number;

}
",
  "import { Entity, OneToOne, PrimaryKey, Property } from '@mikro-orm/core';
import { FooBaz2 } from './FooBaz2';

@Entity()
export class FooBar2 {

  @PrimaryKey()
  id!: number;

  @Property({ length: 255 })
  name!: string;

  @Property({ fieldName: 'name with space', length: 255, nullable: true })
  nameWithSpace?: string;

  @OneToOne({ entity: () => FooBaz2, onUpdateIntegrity: 'cascade', onDelete: 'set null', nullable: true })
  baz?: FooBaz2;

  @OneToOne({ entity: () => FooBar2, onUpdateIntegrity: 'cascade', onDelete: 'set null', nullable: true })
  fooBar?: FooBar2;

  @Property({ defaultRaw: \`CURRENT_TIMESTAMP\` })
  version!: Date;

  @Property({ length: 65535, nullable: true })
  blob?: Buffer;

  @Property({ columnType: 'text', length: 65535, nullable: true })
  array?: string;

  @Property({ columnType: 'json', nullable: true })
  objectProperty?: any;

}
",
  "import { Entity, PrimaryKey, Property } from '@mikro-orm/core';

@Entity()
export class FooBaz2 {

  @PrimaryKey()
  id!: number;

  @Property({ length: 255 })
  name!: string;

  @Property({ length: 3, defaultRaw: \`current_timestamp(3)\` })
  version!: Date;

}
",
  "import { Entity, ManyToOne, Property } from '@mikro-orm/core';
import { FooBar2 } from './FooBar2';
import { FooBaz2 } from './FooBaz2';

@Entity()
export class FooParam2 {

  @ManyToOne({ entity: () => FooBar2, onUpdateIntegrity: 'cascade', primary: true })
  bar!: FooBar2;

  @ManyToOne({ entity: () => FooBaz2, onUpdateIntegrity: 'cascade', primary: true })
  baz!: FooBaz2;

  @Property({ length: 255 })
  value!: string;

  @Property({ length: 3, defaultRaw: \`current_timestamp(3)\` })
  version!: Date;

}
",
  "import { Entity, PrimaryKey, Property } from '@mikro-orm/core';

@Entity()
export class Publisher2 {

  @PrimaryKey()
  id!: number;

  @Property({ length: 255 })
  name!: string;

  @Property({ columnType: \`enum('local','global')\`, length: 6 })
  type!: string;

  @Property({ columnType: \`enum('LOCAL','GLOBAL')\`, length: 6 })
  type2!: string;

  @Property({ columnType: 'tinyint(4)', nullable: true })
  enum1?: number;

  @Property({ columnType: 'tinyint(4)', nullable: true })
  enum2?: number;

  @Property({ columnType: 'tinyint(4)', nullable: true })
  enum3?: number;

  @Property({ columnType: \`enum('a','b','c')\`, length: 1, nullable: true })
  enum4?: string;

  @Property({ columnType: \`enum('a')\`, length: 1, nullable: true })
  enum5?: string;

}
",
  "import { Entity, ManyToOne, PrimaryKey } from '@mikro-orm/core';
import { Publisher2 } from './Publisher2';
import { Test2 } from './Test2';

@Entity({ collection: 'publisher2_tests' })
export class Publisher2Tests {

  @PrimaryKey()
  id!: number;

  @ManyToOne({ entity: () => Publisher2, onUpdateIntegrity: 'cascade', onDelete: 'cascade' })
  publisher2!: Publisher2;

  @ManyToOne({ entity: () => Test2, onUpdateIntegrity: 'cascade', onDelete: 'cascade' })
  test2!: Test2;

}
",
  "import { Entity, PrimaryKey, Property } from '@mikro-orm/core';

@Entity()
export class Sandwich {

  @PrimaryKey()
  id!: number;

  @Property({ length: 255 })
  name!: string;

  @Property()
  price!: number;

}
",
  "import { Entity, ManyToOne, OneToOne, PrimaryKey, Property } from '@mikro-orm/core';
import { Book2 } from './Book2';
import { FooBar2 } from './FooBar2';

@Entity()
export class Test2 {

  @PrimaryKey()
  id!: number;

  @Property({ length: 255, nullable: true })
  name?: string;

  @OneToOne({ entity: () => Book2, onDelete: 'set null', nullable: true })
  book?: Book2;

  @ManyToOne({ entity: () => Test2, onUpdateIntegrity: 'cascade', onDelete: 'set null', nullable: true })
  parent?: Test2;

  @Property()
  version: number = 1;

  @OneToOne({ entity: () => FooBar2, fieldName: 'foo___bar', onUpdateIntegrity: 'cascade', onDelete: 'set null', nullable: true })
  fooBar?: FooBar2;

  @Property({ fieldName: 'foo___baz', nullable: true })
  fooBaz?: number;

}
",
  "import { Entity, ManyToOne } from '@mikro-orm/core';
import { FooBar2 } from './FooBar2';
import { Test2 } from './Test2';

@Entity({ collection: 'test2_bars' })
export class Test2Bars {

  @ManyToOne({ entity: () => Test2, onUpdateIntegrity: 'cascade', onDelete: 'cascade', primary: true })
  test2!: Test2;

  @ManyToOne({ entity: () => FooBar2, onUpdateIntegrity: 'cascade', onDelete: 'cascade', primary: true })
  fooBar2!: FooBar2;

}
",
  "import { Entity, OneToOne, PrimaryKey, Property } from '@mikro-orm/core';
import { Car2 } from './Car2';

@Entity()
export class User2 {

  @PrimaryKey({ length: 100 })
  firstName!: string;

  @PrimaryKey({ length: 100 })
  lastName!: string;

  @Property({ nullable: true })
  foo?: number;

  @OneToOne({ entity: () => Car2, onUpdateIntegrity: 'cascade', onDelete: 'set null', nullable: true })
  favouriteCar?: Car2;

}
",
  "import { Entity, ManyToOne } from '@mikro-orm/core';
import { Car2 } from './Car2';
import { User2 } from './User2';

@Entity({ collection: 'user2_cars' })
export class User2Cars {

  @ManyToOne({ entity: () => User2, onUpdateIntegrity: 'cascade', onDelete: 'cascade', primary: true })
  user2!: User2;

  @ManyToOne({ entity: () => Car2, onUpdateIntegrity: 'cascade', onDelete: 'cascade', primary: true })
  car2!: Car2;

}
",
  "import { Entity, ManyToOne } from '@mikro-orm/core';
import { Sandwich } from './Sandwich';
import { User2 } from './User2';

@Entity({ collection: 'user2_sandwiches' })
export class User2Sandwiches {

  @ManyToOne({ entity: () => User2, onUpdateIntegrity: 'cascade', onDelete: 'cascade', primary: true })
  user2!: User2;

  @ManyToOne({ entity: () => Sandwich, onUpdateIntegrity: 'cascade', onDelete: 'cascade', primary: true })
  sandwich!: Sandwich;

}
",
]
`;

exports[`EntityGenerator generate entities from schema [postgres]: postgres-entity-dump 1`] = `
Array [
  "import { Entity, OneToOne, Property } from '@mikro-orm/core';
import { Author2 } from './Author2';

@Entity()
export class Address2 {

  @OneToOne({ entity: () => Author2, onUpdateIntegrity: 'cascade', onDelete: 'cascade', primary: true })
  author!: Author2;

  @Property({ length: 255 })
  value!: string;

}
",
  "import { Entity, Index, ManyToOne, PrimaryKey, Property, Unique } from '@mikro-orm/core';
import { Book2 } from './Book2';

@Entity()
@Index({ name: 'author2_name_age_index', properties: ['name', 'age'] })
@Unique({ name: 'author2_name_email_unique', properties: ['name', 'email'] })
export class Author2 {

  @PrimaryKey()
  id!: number;

  @Property({ length: 3, defaultRaw: \`current_timestamp(3)\` })
  createdAt!: Date;

  @Property({ length: 3, defaultRaw: \`current_timestamp(3)\` })
  updatedAt!: Date;

  @Index({ name: 'custom_idx_name_123' })
  @Property({ length: 255 })
  name!: string;

  @Index({ name: 'custom_email_index_name' })
  @Unique({ name: 'custom_email_unique_name' })
  @Property({ length: 255 })
  email!: string;

  @Property({ nullable: true })
  age?: number;

  @Index({ name: 'author2_terms_accepted_index' })
  @Property()
  termsAccepted: boolean = false;

  @Property({ nullable: true })
  optional?: boolean;

  @Property({ nullable: true })
  identities?: string[];

  @Index({ name: 'author2_born_index' })
  @Property({ columnType: 'date', nullable: true })
  born?: string;

  @Index({ name: 'born_time_idx' })
  @Property({ columnType: 'time', nullable: true })
  bornTime?: string;

  @ManyToOne({ entity: () => Book2, onDelete: 'cascade', nullable: true })
  favouriteBook?: Book2;

  @ManyToOne({ entity: () => Author2, onUpdateIntegrity: 'cascade', onDelete: 'set null', nullable: true })
  favouriteAuthor?: Author2;

}
",
  "import { Entity, ManyToOne } from '@mikro-orm/core';
import { Author2 } from './Author2';

@Entity({ collection: 'author2_following' })
export class Author2Following {

  @ManyToOne({ entity: () => Author2, fieldName: 'author2_1_id', onUpdateIntegrity: 'cascade', onDelete: 'cascade', primary: true })
  author21!: Author2;

  @ManyToOne({ entity: () => Author2, fieldName: 'author2_2_id', onUpdateIntegrity: 'cascade', onDelete: 'cascade', primary: true })
  author22!: Author2;

}
",
  "import { Entity, ManyToOne } from '@mikro-orm/core';
import { Author2 } from './Author2';

@Entity()
export class AuthorToFriend {

  @ManyToOne({ entity: () => Author2, fieldName: 'author2_1_id', onUpdateIntegrity: 'cascade', onDelete: 'cascade', primary: true })
  author21!: Author2;

  @ManyToOne({ entity: () => Author2, fieldName: 'author2_2_id', onUpdateIntegrity: 'cascade', onDelete: 'cascade', primary: true })
  author22!: Author2;

}
",
  "import { Entity, ManyToOne, PrimaryKey, Property } from '@mikro-orm/core';
import { Author2 } from './Author2';
import { Publisher2 } from './Publisher2';

@Entity()
export class Book2 {

  @PrimaryKey({ columnType: 'uuid' })
  uuidPk!: string;

  @Property({ length: 3, defaultRaw: \`current_timestamp(3)\` })
  createdAt!: Date;

  @Property({ length: 255, nullable: true, default: '' })
  title?: string;

  @Property({ columnType: 'text', nullable: true })
  perex?: string;

  @Property({ columnType: 'numeric', nullable: true })
  price?: string;

  @Property({ columnType: 'numeric', nullable: true })
  double?: string;

  @Property({ columnType: 'jsonb', nullable: true })
  meta?: any;

  @ManyToOne({ entity: () => Author2 })
  author!: Author2;

  @ManyToOne({ entity: () => Publisher2, onUpdateIntegrity: 'cascade', onDelete: 'cascade', nullable: true })
  publisher?: Publisher2;

  @Property({ length: 255, nullable: true, default: 'lol' })
  foo?: string;

}
",
  "import { Entity, ManyToOne, PrimaryKey } from '@mikro-orm/core';
import { Book2 } from './Book2';
import { BookTag2 } from './BookTag2';

@Entity({ collection: 'book2_tags' })
export class Book2Tags {

  @PrimaryKey()
  order!: number;

  @ManyToOne({ entity: () => Book2, onUpdateIntegrity: 'cascade', onDelete: 'cascade' })
  book2!: Book2;

  @ManyToOne({ entity: () => BookTag2, onUpdateIntegrity: 'cascade', onDelete: 'cascade' })
  bookTag2!: BookTag2;

}
",
  "import { Entity, PrimaryKey, Property } from '@mikro-orm/core';

@Entity()
export class BookTag2 {

  @PrimaryKey({ columnType: 'int8' })
  id!: string;

  @Property({ length: 50 })
  name!: string;

}
",
  "import { Entity, ManyToOne } from '@mikro-orm/core';
import { Book2 } from './Book2';
import { BookTag2 } from './BookTag2';

@Entity()
export class BookToTagUnordered {

  @ManyToOne({ entity: () => Book2, onUpdateIntegrity: 'cascade', onDelete: 'cascade', primary: true })
  book2!: Book2;

  @ManyToOne({ entity: () => BookTag2, onUpdateIntegrity: 'cascade', onDelete: 'cascade', primary: true })
  bookTag2!: BookTag2;

}
",
  "import { Entity, ManyToOne, PrimaryKey, Property } from '@mikro-orm/core';
import { Test2 } from './Test2';

@Entity()
export class Configuration2 {

  @PrimaryKey({ length: 255 })
  property!: string;

  @ManyToOne({ entity: () => Test2, onUpdateIntegrity: 'cascade', primary: true })
  test!: Test2;

  @Property({ length: 255 })
  value!: string;

}
",
  "import { Entity, OneToOne, PrimaryKey, Property } from '@mikro-orm/core';
import { FooBaz2 } from './FooBaz2';

@Entity()
export class FooBar2 {

  @PrimaryKey()
  id!: number;

  @Property({ length: 255 })
  name!: string;

  @Property({ fieldName: 'name with space', length: 255, nullable: true })
  nameWithSpace?: string;

  @OneToOne({ entity: () => FooBaz2, onUpdateIntegrity: 'cascade', onDelete: 'set null', nullable: true })
  baz?: FooBaz2;

  @OneToOne({ entity: () => FooBar2, onUpdateIntegrity: 'cascade', onDelete: 'set null', nullable: true })
  fooBar?: FooBar2;

  @Property({ defaultRaw: \`current_timestamp(0)\` })
  version!: Date;

  @Property({ nullable: true })
  blob?: Buffer;

  @Property({ nullable: true })
  array?: string[];

  @Property({ columnType: 'jsonb', nullable: true })
  objectProperty?: any;

}
",
  "import { Entity, PrimaryKey, Property } from '@mikro-orm/core';

@Entity()
export class FooBaz2 {

  @PrimaryKey()
  id!: number;

  @Property({ length: 255 })
  name!: string;

  @Property({ length: 3, defaultRaw: \`current_timestamp(3)\` })
  version!: Date;

}
",
  "import { Entity, ManyToOne, Property } from '@mikro-orm/core';
import { FooBar2 } from './FooBar2';
import { FooBaz2 } from './FooBaz2';

@Entity()
export class FooParam2 {

  @ManyToOne({ entity: () => FooBar2, onUpdateIntegrity: 'cascade', primary: true })
  bar!: FooBar2;

  @ManyToOne({ entity: () => FooBaz2, onUpdateIntegrity: 'cascade', primary: true })
  baz!: FooBaz2;

  @Property({ length: 255 })
  value!: string;

  @Property({ length: 3, defaultRaw: \`current_timestamp(3)\` })
  version!: Date;

}
",
  "import { Entity, PrimaryKey, Property } from '@mikro-orm/core';

@Entity()
export class Label2 {

  @PrimaryKey({ columnType: 'uuid' })
  uuid!: string;

  @Property({ length: 255 })
  name!: string;

}
",
  "import { Entity, PrimaryKey, Property } from '@mikro-orm/core';

@Entity()
export class Publisher2 {

  @PrimaryKey()
  id!: number;

  @Property({ length: 255 })
  name!: string;

  @Property({ columnType: 'text' })
  type!: string;

  @Property({ columnType: 'text' })
  type2!: string;

  @Property({ columnType: 'int2', nullable: true })
  enum1?: number;

  @Property({ columnType: 'int2', nullable: true })
  enum2?: number;

  @Property({ columnType: 'int2', nullable: true })
  enum3?: number;

  @Property({ columnType: 'text', nullable: true })
  enum4?: string;

  @Property({ columnType: 'text', nullable: true })
  enum5?: string;

}
",
  "import { Entity, ManyToOne, PrimaryKey } from '@mikro-orm/core';
import { Publisher2 } from './Publisher2';
import { Test2 } from './Test2';

@Entity({ collection: 'publisher2_tests' })
export class Publisher2Tests {

  @PrimaryKey()
  id!: number;

  @ManyToOne({ entity: () => Publisher2, onUpdateIntegrity: 'cascade', onDelete: 'cascade' })
  publisher2!: Publisher2;

  @ManyToOne({ entity: () => Test2, onUpdateIntegrity: 'cascade', onDelete: 'cascade' })
  test2!: Test2;

}
",
  "import { Entity, ManyToOne, OneToOne, PrimaryKey, Property } from '@mikro-orm/core';
import { Book2 } from './Book2';

@Entity()
export class Test2 {

  @PrimaryKey()
  id!: number;

  @Property({ length: 255, nullable: true })
  name?: string;

  @OneToOne({ entity: () => Book2, onDelete: 'set null', nullable: true })
  book?: Book2;

  @ManyToOne({ entity: () => Test2, onUpdateIntegrity: 'cascade', onDelete: 'set null', nullable: true })
  parent?: Test2;

  @Property()
  version: number = 1;

  @Property({ columnType: 'polygon', nullable: true })
  path?: unknown;

}
",
  "import { Entity, ManyToOne } from '@mikro-orm/core';
import { FooBar2 } from './FooBar2';
import { Test2 } from './Test2';

@Entity({ collection: 'test2_bars' })
export class Test2Bars {

  @ManyToOne({ entity: () => Test2, onUpdateIntegrity: 'cascade', onDelete: 'cascade', primary: true })
  test2!: Test2;

  @ManyToOne({ entity: () => FooBar2, onUpdateIntegrity: 'cascade', onDelete: 'cascade', primary: true })
  fooBar2!: FooBar2;

}
",
]
`;

exports[`EntityGenerator generate entities from schema [sqlite]: sqlite-entity-dump 1`] = `
Array [
  "import { Entity, Index, ManyToOne, PrimaryKey, Property, Unique } from '@mikro-orm/core';
import { Book3 } from './Book3';

@Entity()
@Index({ name: 'author3_name_favourite_book_id_index', properties: ['name', 'favouriteBook'] })
export class Author3 {

  @PrimaryKey()
  id!: number;

  @Property({ nullable: true })
  createdAt?: Date;

  @Property({ nullable: true })
  updatedAt?: Date;

  @Property()
  name!: string;

  @Unique({ name: 'author3_email_unique' })
  @Property()
  email!: string;

  @Property({ nullable: true })
  age?: number;

  @Property()
  termsAccepted: number = 0;

  @Property({ nullable: true })
  identities?: string;

  @Property({ columnType: 'date(3)', nullable: true })
  born?: string;

  @Property({ columnType: 'time(3)', nullable: true })
  bornTime?: string;

  @ManyToOne({ entity: () => Book3, onUpdateIntegrity: 'cascade', nullable: true, index: 'author3_favourite_book_idx' })
  favouriteBook?: Book3;

}
",
  "import { Entity, ManyToOne, PrimaryKey, Property } from '@mikro-orm/core';
import { Author3 } from './Author3';
import { Publisher3 } from './Publisher3';

@Entity()
export class Book3 {

  @PrimaryKey()
  id!: number;

  @Property({ nullable: true })
  createdAt?: Date;

  @Property({ nullable: true })
  updatedAt?: Date;

  @Property({ default: '' })
  title!: string;

  @ManyToOne({ entity: () => Author3, onUpdateIntegrity: 'cascade' })
  author!: Author3;

  @ManyToOne({ entity: () => Publisher3, onUpdateIntegrity: 'cascade' })
  publisher!: Publisher3;

}
",
  "import { Entity, ManyToOne, PrimaryKey } from '@mikro-orm/core';
import { Book3 } from './Book3';
import { BookTag3 } from './BookTag3';

@Entity({ collection: 'book3_tags' })
export class Book3Tags {

  @PrimaryKey()
  id!: number;

  @ManyToOne({ entity: () => Book3, onUpdateIntegrity: 'cascade', onDelete: 'cascade' })
  book3!: Book3;

  @ManyToOne({ entity: () => BookTag3, onUpdateIntegrity: 'cascade', onDelete: 'cascade' })
  bookTag3!: BookTag3;

}
",
  "import { Entity, PrimaryKey, Property } from '@mikro-orm/core';

@Entity()
export class BookTag3 {

  @PrimaryKey()
  id!: number;

  @Property()
  name!: string;

  @Property({ defaultRaw: \`current_timestamp\` })
  version!: Date;

}
",
  "import { Entity, PrimaryKey, Property } from '@mikro-orm/core';

@Entity()
export class Publisher3 {

  @PrimaryKey()
  id!: number;

  @Property()
  name!: string;

  @Property()
  type!: string;

}
",
  "import { Entity, ManyToOne, PrimaryKey } from '@mikro-orm/core';
import { Publisher3 } from './Publisher3';
import { Test3 } from './Test3';

@Entity({ collection: 'publisher3_tests' })
export class Publisher3Tests {

  @PrimaryKey()
  id!: number;

  @ManyToOne({ entity: () => Publisher3, onUpdateIntegrity: 'cascade', onDelete: 'cascade' })
  publisher3!: Publisher3;

  @ManyToOne({ entity: () => Test3, onUpdateIntegrity: 'cascade', onDelete: 'cascade' })
  test3!: Test3;

}
",
  "import { Entity, PrimaryKey, Property } from '@mikro-orm/core';

@Entity()
export class Test3 {

  @PrimaryKey()
  id!: number;

  @Property({ nullable: true })
  name?: string;

  @Property()
  version: number = 1;

}
",
]
`;
