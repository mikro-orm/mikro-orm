// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`4898 ambiguous_fk_example scalarPropertiesForRelations=always bidirectionalRelations=false identifiedReferences=false entitySchema=false: dump 1`] = `
[
  "import { Collection, Entity, ManyToMany, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { Products } from './Products';

@Entity()
export class Colors {

  [PrimaryKeyProp]?: 'colorId';

  @PrimaryKey()
  colorId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property({ length: 255 })
  name!: string;

  @ManyToMany({ entity: () => Products, pivotTable: 'product_colors', pivotEntity: () => ProductColors, joinColumn: 'color_id', inverseJoinColumn: 'product_id' })
  productColors = new Collection<Products>(this);

}
",
  "import { Entity, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';

@Entity()
export class Countries {

  [PrimaryKeyProp]?: 'country';

  @PrimaryKey({ columnType: 'char(2)' })
  country!: unknown;

}
",
  "import { Entity, Index, ManyToOne, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Colors } from './Colors';
import { Products } from './Products';

@Entity()
export class ProductColors {

  [PrimaryKeyProp]?: ['color', 'product'];

  @ManyToOne({ entity: () => Colors, fieldName: 'color_id', primary: true })
  color!: Colors;

  @Property({ persist: false })
  colorId!: number;

  @ManyToOne({ entity: () => Products, fieldName: 'product_id', primary: true, index: 'fk_product_colors_products1_idx' })
  product!: Products;

  @Index({ name: 'fk_product_colors_products1_idx' })
  @Property({ persist: false })
  productId!: number;

}
",
  "import { Entity, Index, ManyToOne, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Countries } from './Countries';
import { ProductSizes } from './ProductSizes';

@Entity()
export class ProductCountries {

  [PrimaryKeyProp]?: ['product', 'countries'];

  @Property({ columnType: 'char(2)', persist: false })
  country!: unknown;

  @ManyToOne({ entity: () => ProductSizes, fieldName: 'product_id', primary: true, index: 'fk_product_countries_product_sizes1_idx' })
  product!: ProductSizes;

  @Index({ name: 'fk_product_countries_product_sizes1_idx' })
  @Property({ persist: false })
  productId!: number;

  @ManyToOne({ entity: () => Countries, fieldName: 'country', primary: true })
  countries!: Countries;

}
",
  "import { Collection, Entity, ManyToMany, OneToOne, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { Countries } from './Countries';
import { ProductCountries } from './ProductCountries';
import { Products } from './Products';

@Entity()
@Unique({ name: 'size__product_id-UNIQUE', properties: ['size', 'productId'] })
export class ProductSizes {

  [PrimaryKeyProp]?: 'product';

  @OneToOne({ entity: () => Products, fieldName: 'product_id', primary: true })
  product!: Products;

  @Property({ persist: false })
  productId!: number;

  @Property({ columnType: 'smallint' })
  size!: number;

  @ManyToMany({ entity: () => Countries, pivotTable: 'product_countries', pivotEntity: () => ProductCountries, joinColumn: 'product_id', inverseJoinColumn: 'country' })
  productCountries = new Collection<Countries>(this);

}
",
  "import { Entity, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';

@Entity()
export class Products {

  [PrimaryKeyProp]?: 'productId';

  @PrimaryKey()
  productId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property({ length: 255 })
  name!: string;

}
",
  "import { Entity, Index, ManyToOne, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { ProductCountries } from './ProductCountries';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { SellerProducts } from './SellerProducts';

@Entity()
@Unique({ name: 'product_id__size__color_id-UNIQUE', properties: ['colorId', 'productSizes'] })
export class Sales {

  [PrimaryKeyProp]?: 'saleId';

  @PrimaryKey()
  saleId!: number;

  @Property({ columnType: 'char(2)', persist: false })
  country!: unknown;

  @Property({ persist: false })
  sellerId!: number;

  @Index({ name: 'product_id_idx' })
  @Property({ persist: false })
  productId!: number;

  @ManyToOne({ entity: () => ProductColors, fieldNames: ['color_id', 'product_id'], nullable: true, index: 'fk_sales_product_colors1_idx' })
  color?: ProductColors;

  @Property({ nullable: true, persist: false })
  colorId?: number;

  @Property({ columnType: 'smallint', nullable: true, persist: false })
  size?: number;

  @ManyToOne({ entity: () => SellerProducts, fieldNames: ['seller_id', 'exchanged_product_id'], nullable: true, index: 'fk_sales_seller_products2_idx' })
  exchanged?: SellerProducts;

  @Property({ nullable: true, persist: false })
  exchangedProductId?: number;

  @ManyToOne({ entity: () => ProductCountries, fieldNames: ['country', 'product_id'], index: 'fk_sales_product_countries1_idx' })
  productCountries!: ProductCountries;

  @ManyToOne({ entity: () => ProductSizes, fieldNames: ['size', 'product_id'], nullable: true, index: 'fk_sales_product_sizes1_idx' })
  productSizes?: ProductSizes;

  @ManyToOne({ entity: () => SellerCountries, fieldNames: ['country', 'seller_id'], index: 'fk_sales_seller_countries1_idx' })
  sellerCountries!: SellerCountries;

  @ManyToOne({ entity: () => SellerProducts, fieldNames: ['seller_id', 'product_id'], index: 'fk_sales_seller_products1_idx' })
  fkSalesSellerProducts1!: SellerProducts;

}
",
  "import { Entity, Index, ManyToOne, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Sellers } from './Sellers';

@Entity()
export class SellerCountries {

  [PrimaryKeyProp]?: ['seller', 'countries'];

  @Property({ columnType: 'char(2)', persist: false })
  country!: unknown;

  @ManyToOne({ entity: () => Sellers, fieldName: 'seller_id', primary: true, index: 'fk_seller_countries_sellers1_idx' })
  seller!: Sellers;

  @Index({ name: 'fk_seller_countries_sellers1_idx' })
  @Property({ persist: false })
  sellerId!: number;

  @ManyToOne({ entity: () => Countries, fieldName: 'country', primary: true })
  countries!: Countries;

}
",
  "import { Entity, Index, ManyToOne, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Products } from './Products';
import { Sellers } from './Sellers';

@Entity()
export class SellerProducts {

  [PrimaryKeyProp]?: ['seller', 'product'];

  @ManyToOne({ entity: () => Sellers, fieldName: 'seller_id', primary: true })
  seller!: Sellers;

  @Property({ persist: false })
  sellerId!: number;

  @ManyToOne({ entity: () => Products, fieldName: 'product_id', primary: true, index: 'fk_seller_products_products1_idx' })
  product!: Products;

  @Index({ name: 'fk_seller_products_products1_idx' })
  @Property({ persist: false })
  productId!: number;

}
",
  "import { Collection, Entity, ManyToMany, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Products } from './Products';
import { SellerCountries } from './SellerCountries';
import { SellerProducts } from './SellerProducts';

@Entity()
export class Sellers {

  [PrimaryKeyProp]?: 'sellerId';

  @PrimaryKey()
  sellerId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property({ length: 255 })
  name!: string;

  @ManyToMany({ entity: () => Countries, pivotTable: 'seller_countries', pivotEntity: () => SellerCountries, joinColumn: 'seller_id', inverseJoinColumn: 'country' })
  sellerCountries = new Collection<Countries>(this);

  @ManyToMany({ entity: () => Products, pivotTable: 'seller_products', pivotEntity: () => SellerProducts, joinColumn: 'seller_id', inverseJoinColumn: 'product_id' })
  sellerProducts = new Collection<Products>(this);

}
",
]
`;

exports[`4898 ambiguous_fk_example scalarPropertiesForRelations=always bidirectionalRelations=false identifiedReferences=false entitySchema=true: dump 1`] = `
[
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Products } from './Products';

export class Colors {
  [PrimaryKeyProp]?: 'colorId';
  colorId!: number;
  name!: string;
  productColors = new Collection<Products>(this);
}

export const ColorsSchema = new EntitySchema({
  class: Colors,
  properties: {
    colorId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255, unique: 'name_UNIQUE' },
    productColors: {
      kind: 'm:n',
      entity: () => Products,
      pivotTable: 'product_colors',
      pivotEntity: () => ProductColors,
      joinColumn: 'color_id',
      inverseJoinColumn: 'product_id',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Countries {
  [PrimaryKeyProp]?: 'country';
  country!: unknown;
}

export const CountriesSchema = new EntitySchema({
  class: Countries,
  properties: {
    country: { primary: true, type: 'unknown', columnType: 'char(2)' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class ProductColors {
  [PrimaryKeyProp]?: ['color', 'product'];
  color!: Colors;
  colorId!: number;
  product!: Products;
  productId!: number;
}

export const ProductColorsSchema = new EntitySchema({
  class: ProductColors,
  properties: {
    color: { primary: true, kind: 'm:1', entity: () => Colors, fieldName: 'color_id' },
    colorId: { type: 'number', persist: false },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => Products,
      fieldName: 'product_id',
      index: 'fk_product_colors_products1_idx',
    },
    productId: { type: 'number', persist: false, index: 'fk_product_colors_products1_idx' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class ProductCountries {
  [PrimaryKeyProp]?: ['product', 'countries'];
  country!: unknown;
  product!: ProductSizes;
  productId!: number;
  countries!: Countries;
}

export const ProductCountriesSchema = new EntitySchema({
  class: ProductCountries,
  properties: {
    country: { type: 'unknown', columnType: 'char(2)', persist: false },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => ProductSizes,
      fieldName: 'product_id',
      index: 'fk_product_countries_product_sizes1_idx',
    },
    productId: {
      type: 'number',
      persist: false,
      index: 'fk_product_countries_product_sizes1_idx',
    },
    countries: { primary: true, kind: 'm:1', entity: () => Countries, fieldName: 'country' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Countries } from './Countries';

export class ProductSizes {
  [PrimaryKeyProp]?: 'product';
  product!: Products;
  productId!: number;
  size!: number;
  productCountries = new Collection<Countries>(this);
}

export const ProductSizesSchema = new EntitySchema({
  class: ProductSizes,
  properties: {
    product: { primary: true, kind: '1:1', entity: () => Products, fieldName: 'product_id' },
    productId: { type: 'number', persist: false },
    size: { type: 'number', columnType: 'smallint' },
    productCountries: {
      kind: 'm:n',
      entity: () => Countries,
      pivotTable: 'product_countries',
      pivotEntity: () => ProductCountries,
      joinColumn: 'product_id',
      inverseJoinColumn: 'country',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Products {
  [PrimaryKeyProp]?: 'productId';
  productId!: number;
  name!: string;
}

export const ProductsSchema = new EntitySchema({
  class: Products,
  properties: {
    productId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255, unique: 'name_UNIQUE' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Sales {
  [PrimaryKeyProp]?: 'saleId';
  saleId!: number;
  country!: unknown;
  sellerId!: number;
  productId!: number;
  color?: ProductColors;
  colorId?: number;
  size?: number;
  exchanged?: SellerProducts;
  exchangedProductId?: number;
  productCountries!: ProductCountries;
  productSizes?: ProductSizes;
  sellerCountries!: SellerCountries;
  fkSalesSellerProducts1!: SellerProducts;
}

export const SalesSchema = new EntitySchema({
  class: Sales,
  properties: {
    saleId: { primary: true, type: 'number' },
    country: { type: 'unknown', columnType: 'char(2)', persist: false },
    sellerId: { type: 'number', persist: false },
    productId: { type: 'number', persist: false, index: 'product_id_idx' },
    color: {
      kind: 'm:1',
      entity: () => ProductColors,
      fieldNames: [
        'color_id',
        'product_id'
      ],
      nullable: true,
      index: 'fk_sales_product_colors1_idx',
    },
    colorId: { type: 'number', nullable: true, persist: false },
    size: { type: 'number', columnType: 'smallint', nullable: true, persist: false },
    exchanged: {
      kind: 'm:1',
      entity: () => SellerProducts,
      fieldNames: [
        'seller_id',
        'exchanged_product_id'
      ],
      nullable: true,
      index: 'fk_sales_seller_products2_idx',
    },
    exchangedProductId: { type: 'number', nullable: true, persist: false },
    productCountries: {
      kind: 'm:1',
      entity: () => ProductCountries,
      fieldNames: [
        'country',
        'product_id'
      ],
      index: 'fk_sales_product_countries1_idx',
    },
    productSizes: {
      kind: 'm:1',
      entity: () => ProductSizes,
      fieldNames: [
        'size',
        'product_id'
      ],
      nullable: true,
      index: 'fk_sales_product_sizes1_idx',
    },
    sellerCountries: {
      kind: 'm:1',
      entity: () => SellerCountries,
      fieldNames: [
        'country',
        'seller_id'
      ],
      index: 'fk_sales_seller_countries1_idx',
    },
    fkSalesSellerProducts1: {
      kind: 'm:1',
      entity: () => SellerProducts,
      fieldNames: [
        'seller_id',
        'product_id'
      ],
      index: 'fk_sales_seller_products1_idx',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class SellerCountries {
  [PrimaryKeyProp]?: ['seller', 'countries'];
  country!: unknown;
  seller!: Sellers;
  sellerId!: number;
  countries!: Countries;
}

export const SellerCountriesSchema = new EntitySchema({
  class: SellerCountries,
  properties: {
    country: { type: 'unknown', columnType: 'char(2)', persist: false },
    seller: {
      primary: true,
      kind: 'm:1',
      entity: () => Sellers,
      fieldName: 'seller_id',
      index: 'fk_seller_countries_sellers1_idx',
    },
    sellerId: { type: 'number', persist: false, index: 'fk_seller_countries_sellers1_idx' },
    countries: { primary: true, kind: 'm:1', entity: () => Countries, fieldName: 'country' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class SellerProducts {
  [PrimaryKeyProp]?: ['seller', 'product'];
  seller!: Sellers;
  sellerId!: number;
  product!: Products;
  productId!: number;
}

export const SellerProductsSchema = new EntitySchema({
  class: SellerProducts,
  properties: {
    seller: { primary: true, kind: 'm:1', entity: () => Sellers, fieldName: 'seller_id' },
    sellerId: { type: 'number', persist: false },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => Products,
      fieldName: 'product_id',
      index: 'fk_seller_products_products1_idx',
    },
    productId: { type: 'number', persist: false, index: 'fk_seller_products_products1_idx' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Products } from './Products';

export class Sellers {
  [PrimaryKeyProp]?: 'sellerId';
  sellerId!: number;
  name!: string;
  sellerCountries = new Collection<Countries>(this);
  sellerProducts = new Collection<Products>(this);
}

export const SellersSchema = new EntitySchema({
  class: Sellers,
  properties: {
    sellerId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255, unique: 'name_UNIQUE' },
    sellerCountries: {
      kind: 'm:n',
      entity: () => Countries,
      pivotTable: 'seller_countries',
      pivotEntity: () => SellerCountries,
      joinColumn: 'seller_id',
      inverseJoinColumn: 'country',
    },
    sellerProducts: {
      kind: 'm:n',
      entity: () => Products,
      pivotTable: 'seller_products',
      pivotEntity: () => SellerProducts,
      joinColumn: 'seller_id',
      inverseJoinColumn: 'product_id',
    },
  },
});
",
]
`;

exports[`4898 ambiguous_fk_example scalarPropertiesForRelations=always bidirectionalRelations=false identifiedReferences=true entitySchema=false: dump 1`] = `
[
  "import { Collection, Entity, ManyToMany, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { Products } from './Products';

@Entity()
export class Colors {

  [PrimaryKeyProp]?: 'colorId';

  @PrimaryKey()
  colorId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property({ length: 255 })
  name!: string;

  @ManyToMany({ entity: () => Products, pivotTable: 'product_colors', pivotEntity: () => ProductColors, joinColumn: 'color_id', inverseJoinColumn: 'product_id' })
  productColors = new Collection<Products>(this);

}
",
  "import { Entity, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';

@Entity()
export class Countries {

  [PrimaryKeyProp]?: 'country';

  @PrimaryKey({ columnType: 'char(2)' })
  country!: unknown;

}
",
  "import { Entity, Index, ManyToOne, PrimaryKeyProp, Property, Ref } from '@mikro-orm/core';
import { Colors } from './Colors';
import { Products } from './Products';

@Entity()
export class ProductColors {

  [PrimaryKeyProp]?: ['color', 'product'];

  @ManyToOne({ entity: () => Colors, ref: true, fieldName: 'color_id', primary: true })
  color!: Ref<Colors>;

  @Property({ persist: false })
  colorId!: number;

  @ManyToOne({ entity: () => Products, ref: true, fieldName: 'product_id', primary: true, index: 'fk_product_colors_products1_idx' })
  product!: Ref<Products>;

  @Index({ name: 'fk_product_colors_products1_idx' })
  @Property({ persist: false })
  productId!: number;

}
",
  "import { Entity, Index, ManyToOne, PrimaryKeyProp, Property, Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { ProductSizes } from './ProductSizes';

@Entity()
export class ProductCountries {

  [PrimaryKeyProp]?: ['product', 'countries'];

  @Property({ columnType: 'char(2)', persist: false })
  country!: unknown;

  @ManyToOne({ entity: () => ProductSizes, ref: true, fieldName: 'product_id', primary: true, index: 'fk_product_countries_product_sizes1_idx' })
  product!: Ref<ProductSizes>;

  @Index({ name: 'fk_product_countries_product_sizes1_idx' })
  @Property({ persist: false })
  productId!: number;

  @ManyToOne({ entity: () => Countries, ref: true, fieldName: 'country', primary: true })
  countries!: Ref<Countries>;

}
",
  "import { Collection, Entity, ManyToMany, OneToOne, PrimaryKeyProp, Property, Ref, Unique } from '@mikro-orm/core';
import { Countries } from './Countries';
import { ProductCountries } from './ProductCountries';
import { Products } from './Products';

@Entity()
@Unique({ name: 'size__product_id-UNIQUE', properties: ['size', 'productId'] })
export class ProductSizes {

  [PrimaryKeyProp]?: 'product';

  @OneToOne({ entity: () => Products, ref: true, fieldName: 'product_id', primary: true })
  product!: Ref<Products>;

  @Property({ persist: false })
  productId!: number;

  @Property({ columnType: 'smallint' })
  size!: number;

  @ManyToMany({ entity: () => Countries, pivotTable: 'product_countries', pivotEntity: () => ProductCountries, joinColumn: 'product_id', inverseJoinColumn: 'country' })
  productCountries = new Collection<Countries>(this);

}
",
  "import { Entity, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';

@Entity()
export class Products {

  [PrimaryKeyProp]?: 'productId';

  @PrimaryKey()
  productId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property({ length: 255 })
  name!: string;

}
",
  "import { Entity, Index, ManyToOne, PrimaryKey, PrimaryKeyProp, Property, Ref, Unique } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { ProductCountries } from './ProductCountries';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { SellerProducts } from './SellerProducts';

@Entity()
@Unique({ name: 'product_id__size__color_id-UNIQUE', properties: ['colorId', 'productSizes'] })
export class Sales {

  [PrimaryKeyProp]?: 'saleId';

  @PrimaryKey()
  saleId!: number;

  @Property({ columnType: 'char(2)', persist: false })
  country!: unknown;

  @Property({ persist: false })
  sellerId!: number;

  @Index({ name: 'product_id_idx' })
  @Property({ persist: false })
  productId!: number;

  @ManyToOne({ entity: () => ProductColors, ref: true, fieldNames: ['color_id', 'product_id'], nullable: true, index: 'fk_sales_product_colors1_idx' })
  color?: Ref<ProductColors>;

  @Property({ nullable: true, persist: false })
  colorId?: number;

  @Property({ columnType: 'smallint', nullable: true, persist: false })
  size?: number;

  @ManyToOne({ entity: () => SellerProducts, ref: true, fieldNames: ['seller_id', 'exchanged_product_id'], nullable: true, index: 'fk_sales_seller_products2_idx' })
  exchanged?: Ref<SellerProducts>;

  @Property({ nullable: true, persist: false })
  exchangedProductId?: number;

  @ManyToOne({ entity: () => ProductCountries, ref: true, fieldNames: ['country', 'product_id'], index: 'fk_sales_product_countries1_idx' })
  productCountries!: Ref<ProductCountries>;

  @ManyToOne({ entity: () => ProductSizes, ref: true, fieldNames: ['size', 'product_id'], nullable: true, index: 'fk_sales_product_sizes1_idx' })
  productSizes?: Ref<ProductSizes>;

  @ManyToOne({ entity: () => SellerCountries, ref: true, fieldNames: ['country', 'seller_id'], index: 'fk_sales_seller_countries1_idx' })
  sellerCountries!: Ref<SellerCountries>;

  @ManyToOne({ entity: () => SellerProducts, ref: true, fieldNames: ['seller_id', 'product_id'], index: 'fk_sales_seller_products1_idx' })
  fkSalesSellerProducts1!: Ref<SellerProducts>;

}
",
  "import { Entity, Index, ManyToOne, PrimaryKeyProp, Property, Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Sellers } from './Sellers';

@Entity()
export class SellerCountries {

  [PrimaryKeyProp]?: ['seller', 'countries'];

  @Property({ columnType: 'char(2)', persist: false })
  country!: unknown;

  @ManyToOne({ entity: () => Sellers, ref: true, fieldName: 'seller_id', primary: true, index: 'fk_seller_countries_sellers1_idx' })
  seller!: Ref<Sellers>;

  @Index({ name: 'fk_seller_countries_sellers1_idx' })
  @Property({ persist: false })
  sellerId!: number;

  @ManyToOne({ entity: () => Countries, ref: true, fieldName: 'country', primary: true })
  countries!: Ref<Countries>;

}
",
  "import { Entity, Index, ManyToOne, PrimaryKeyProp, Property, Ref } from '@mikro-orm/core';
import { Products } from './Products';
import { Sellers } from './Sellers';

@Entity()
export class SellerProducts {

  [PrimaryKeyProp]?: ['seller', 'product'];

  @ManyToOne({ entity: () => Sellers, ref: true, fieldName: 'seller_id', primary: true })
  seller!: Ref<Sellers>;

  @Property({ persist: false })
  sellerId!: number;

  @ManyToOne({ entity: () => Products, ref: true, fieldName: 'product_id', primary: true, index: 'fk_seller_products_products1_idx' })
  product!: Ref<Products>;

  @Index({ name: 'fk_seller_products_products1_idx' })
  @Property({ persist: false })
  productId!: number;

}
",
  "import { Collection, Entity, ManyToMany, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Products } from './Products';
import { SellerCountries } from './SellerCountries';
import { SellerProducts } from './SellerProducts';

@Entity()
export class Sellers {

  [PrimaryKeyProp]?: 'sellerId';

  @PrimaryKey()
  sellerId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property({ length: 255 })
  name!: string;

  @ManyToMany({ entity: () => Countries, pivotTable: 'seller_countries', pivotEntity: () => SellerCountries, joinColumn: 'seller_id', inverseJoinColumn: 'country' })
  sellerCountries = new Collection<Countries>(this);

  @ManyToMany({ entity: () => Products, pivotTable: 'seller_products', pivotEntity: () => SellerProducts, joinColumn: 'seller_id', inverseJoinColumn: 'product_id' })
  sellerProducts = new Collection<Products>(this);

}
",
]
`;

exports[`4898 ambiguous_fk_example scalarPropertiesForRelations=always bidirectionalRelations=false identifiedReferences=true entitySchema=true: dump 1`] = `
[
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Products } from './Products';

export class Colors {
  [PrimaryKeyProp]?: 'colorId';
  colorId!: number;
  name!: string;
  productColors = new Collection<Products>(this);
}

export const ColorsSchema = new EntitySchema({
  class: Colors,
  properties: {
    colorId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255, unique: 'name_UNIQUE' },
    productColors: {
      kind: 'm:n',
      entity: () => Products,
      pivotTable: 'product_colors',
      pivotEntity: () => ProductColors,
      joinColumn: 'color_id',
      inverseJoinColumn: 'product_id',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Countries {
  [PrimaryKeyProp]?: 'country';
  country!: unknown;
}

export const CountriesSchema = new EntitySchema({
  class: Countries,
  properties: {
    country: { primary: true, type: 'unknown', columnType: 'char(2)' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Colors } from './Colors';
import { Products } from './Products';

export class ProductColors {
  [PrimaryKeyProp]?: ['color', 'product'];
  color!: Ref<Colors>;
  colorId!: number;
  product!: Ref<Products>;
  productId!: number;
}

export const ProductColorsSchema = new EntitySchema({
  class: ProductColors,
  properties: {
    color: {
      primary: true,
      kind: 'm:1',
      entity: () => Colors,
      ref: true,
      fieldName: 'color_id',
    },
    colorId: { type: 'number', persist: false },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => Products,
      ref: true,
      fieldName: 'product_id',
      index: 'fk_product_colors_products1_idx',
    },
    productId: { type: 'number', persist: false, index: 'fk_product_colors_products1_idx' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { ProductSizes } from './ProductSizes';

export class ProductCountries {
  [PrimaryKeyProp]?: ['product', 'countries'];
  country!: unknown;
  product!: Ref<ProductSizes>;
  productId!: number;
  countries!: Ref<Countries>;
}

export const ProductCountriesSchema = new EntitySchema({
  class: ProductCountries,
  properties: {
    country: { type: 'unknown', columnType: 'char(2)', persist: false },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => ProductSizes,
      ref: true,
      fieldName: 'product_id',
      index: 'fk_product_countries_product_sizes1_idx',
    },
    productId: {
      type: 'number',
      persist: false,
      index: 'fk_product_countries_product_sizes1_idx',
    },
    countries: {
      primary: true,
      kind: 'm:1',
      entity: () => Countries,
      ref: true,
      fieldName: 'country',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Products } from './Products';

export class ProductSizes {
  [PrimaryKeyProp]?: 'product';
  product!: Ref<Products>;
  productId!: number;
  size!: number;
  productCountries = new Collection<Countries>(this);
}

export const ProductSizesSchema = new EntitySchema({
  class: ProductSizes,
  properties: {
    product: {
      primary: true,
      kind: '1:1',
      entity: () => Products,
      ref: true,
      fieldName: 'product_id',
    },
    productId: { type: 'number', persist: false },
    size: { type: 'number', columnType: 'smallint' },
    productCountries: {
      kind: 'm:n',
      entity: () => Countries,
      pivotTable: 'product_countries',
      pivotEntity: () => ProductCountries,
      joinColumn: 'product_id',
      inverseJoinColumn: 'country',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Products {
  [PrimaryKeyProp]?: 'productId';
  productId!: number;
  name!: string;
}

export const ProductsSchema = new EntitySchema({
  class: Products,
  properties: {
    productId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255, unique: 'name_UNIQUE' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { ProductCountries } from './ProductCountries';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { SellerProducts } from './SellerProducts';

export class Sales {
  [PrimaryKeyProp]?: 'saleId';
  saleId!: number;
  country!: unknown;
  sellerId!: number;
  productId!: number;
  color?: Ref<ProductColors>;
  colorId?: number;
  size?: number;
  exchanged?: Ref<SellerProducts>;
  exchangedProductId?: number;
  productCountries!: Ref<ProductCountries>;
  productSizes?: Ref<ProductSizes>;
  sellerCountries!: Ref<SellerCountries>;
  fkSalesSellerProducts1!: Ref<SellerProducts>;
}

export const SalesSchema = new EntitySchema({
  class: Sales,
  properties: {
    saleId: { primary: true, type: 'number' },
    country: { type: 'unknown', columnType: 'char(2)', persist: false },
    sellerId: { type: 'number', persist: false },
    productId: { type: 'number', persist: false, index: 'product_id_idx' },
    color: {
      kind: 'm:1',
      entity: () => ProductColors,
      ref: true,
      fieldNames: [
        'color_id',
        'product_id'
      ],
      nullable: true,
      index: 'fk_sales_product_colors1_idx',
    },
    colorId: { type: 'number', nullable: true, persist: false },
    size: { type: 'number', columnType: 'smallint', nullable: true, persist: false },
    exchanged: {
      kind: 'm:1',
      entity: () => SellerProducts,
      ref: true,
      fieldNames: [
        'seller_id',
        'exchanged_product_id'
      ],
      nullable: true,
      index: 'fk_sales_seller_products2_idx',
    },
    exchangedProductId: { type: 'number', nullable: true, persist: false },
    productCountries: {
      kind: 'm:1',
      entity: () => ProductCountries,
      ref: true,
      fieldNames: [
        'country',
        'product_id'
      ],
      index: 'fk_sales_product_countries1_idx',
    },
    productSizes: {
      kind: 'm:1',
      entity: () => ProductSizes,
      ref: true,
      fieldNames: [
        'size',
        'product_id'
      ],
      nullable: true,
      index: 'fk_sales_product_sizes1_idx',
    },
    sellerCountries: {
      kind: 'm:1',
      entity: () => SellerCountries,
      ref: true,
      fieldNames: [
        'country',
        'seller_id'
      ],
      index: 'fk_sales_seller_countries1_idx',
    },
    fkSalesSellerProducts1: {
      kind: 'm:1',
      entity: () => SellerProducts,
      ref: true,
      fieldNames: [
        'seller_id',
        'product_id'
      ],
      index: 'fk_sales_seller_products1_idx',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Sellers } from './Sellers';

export class SellerCountries {
  [PrimaryKeyProp]?: ['seller', 'countries'];
  country!: unknown;
  seller!: Ref<Sellers>;
  sellerId!: number;
  countries!: Ref<Countries>;
}

export const SellerCountriesSchema = new EntitySchema({
  class: SellerCountries,
  properties: {
    country: { type: 'unknown', columnType: 'char(2)', persist: false },
    seller: {
      primary: true,
      kind: 'm:1',
      entity: () => Sellers,
      ref: true,
      fieldName: 'seller_id',
      index: 'fk_seller_countries_sellers1_idx',
    },
    sellerId: { type: 'number', persist: false, index: 'fk_seller_countries_sellers1_idx' },
    countries: {
      primary: true,
      kind: 'm:1',
      entity: () => Countries,
      ref: true,
      fieldName: 'country',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Products } from './Products';
import { Sellers } from './Sellers';

export class SellerProducts {
  [PrimaryKeyProp]?: ['seller', 'product'];
  seller!: Ref<Sellers>;
  sellerId!: number;
  product!: Ref<Products>;
  productId!: number;
}

export const SellerProductsSchema = new EntitySchema({
  class: SellerProducts,
  properties: {
    seller: {
      primary: true,
      kind: 'm:1',
      entity: () => Sellers,
      ref: true,
      fieldName: 'seller_id',
    },
    sellerId: { type: 'number', persist: false },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => Products,
      ref: true,
      fieldName: 'product_id',
      index: 'fk_seller_products_products1_idx',
    },
    productId: { type: 'number', persist: false, index: 'fk_seller_products_products1_idx' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Products } from './Products';

export class Sellers {
  [PrimaryKeyProp]?: 'sellerId';
  sellerId!: number;
  name!: string;
  sellerCountries = new Collection<Countries>(this);
  sellerProducts = new Collection<Products>(this);
}

export const SellersSchema = new EntitySchema({
  class: Sellers,
  properties: {
    sellerId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255, unique: 'name_UNIQUE' },
    sellerCountries: {
      kind: 'm:n',
      entity: () => Countries,
      pivotTable: 'seller_countries',
      pivotEntity: () => SellerCountries,
      joinColumn: 'seller_id',
      inverseJoinColumn: 'country',
    },
    sellerProducts: {
      kind: 'm:n',
      entity: () => Products,
      pivotTable: 'seller_products',
      pivotEntity: () => SellerProducts,
      joinColumn: 'seller_id',
      inverseJoinColumn: 'product_id',
    },
  },
});
",
]
`;

exports[`4898 ambiguous_fk_example scalarPropertiesForRelations=always bidirectionalRelations=true identifiedReferences=false entitySchema=false: dump 1`] = `
[
  "import { Collection, Entity, ManyToMany, OneToMany, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { Products } from './Products';

@Entity()
export class Colors {

  [PrimaryKeyProp]?: 'colorId';

  @PrimaryKey()
  colorId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property({ length: 255 })
  name!: string;

  @ManyToMany({ entity: () => Products, pivotTable: 'product_colors', pivotEntity: () => ProductColors, joinColumn: 'color_id', inverseJoinColumn: 'product_id' })
  productColors = new Collection<Products>(this);

  @OneToMany({ entity: () => ProductColors, mappedBy: 'color' })
  colorInverse = new Collection<ProductColors>(this);

}
",
  "import { Collection, Entity, ManyToMany, OneToMany, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { Sellers } from './Sellers';

@Entity()
export class Countries {

  [PrimaryKeyProp]?: 'country';

  @PrimaryKey({ columnType: 'char(2)' })
  country!: unknown;

  @OneToMany({ entity: () => SellerCountries, mappedBy: 'countries' })
  countriesInverse = new Collection<SellerCountries>(this);

  @ManyToMany({ entity: () => ProductSizes, mappedBy: 'productCountries' })
  productCountriesInverse = new Collection<ProductSizes>(this);

  @ManyToMany({ entity: () => Sellers, mappedBy: 'sellerCountries' })
  sellerCountriesInverse = new Collection<Sellers>(this);

}
",
  "import { Collection, Entity, Index, ManyToOne, OneToMany, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Colors } from './Colors';
import { Products } from './Products';
import { Sales } from './Sales';

@Entity()
export class ProductColors {

  [PrimaryKeyProp]?: ['color', 'product'];

  @ManyToOne({ entity: () => Colors, fieldName: 'color_id', primary: true })
  color!: Colors;

  @Property({ persist: false })
  colorId!: number;

  @ManyToOne({ entity: () => Products, fieldName: 'product_id', primary: true, index: 'fk_product_colors_products1_idx' })
  product!: Products;

  @Index({ name: 'fk_product_colors_products1_idx' })
  @Property({ persist: false })
  productId!: number;

  @OneToMany({ entity: () => Sales, mappedBy: 'color' })
  colorInverse = new Collection<Sales>(this);

}
",
  "import { Collection, Entity, Index, ManyToOne, OneToMany, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Countries } from './Countries';
import { ProductSizes } from './ProductSizes';
import { Sales } from './Sales';

@Entity()
export class ProductCountries {

  [PrimaryKeyProp]?: ['product', 'countries'];

  @Property({ columnType: 'char(2)', persist: false })
  country!: unknown;

  @ManyToOne({ entity: () => ProductSizes, fieldName: 'product_id', primary: true, index: 'fk_product_countries_product_sizes1_idx' })
  product!: ProductSizes;

  @Index({ name: 'fk_product_countries_product_sizes1_idx' })
  @Property({ persist: false })
  productId!: number;

  @ManyToOne({ entity: () => Countries, fieldName: 'country', primary: true })
  countries!: Countries;

  @OneToMany({ entity: () => Sales, mappedBy: 'productCountries' })
  productCountriesInverse = new Collection<Sales>(this);

}
",
  "import { Collection, Entity, ManyToMany, OneToMany, OneToOne, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { Countries } from './Countries';
import { ProductCountries } from './ProductCountries';
import { Products } from './Products';
import { Sales } from './Sales';

@Entity()
@Unique({ name: 'size__product_id-UNIQUE', properties: ['size', 'productId'] })
export class ProductSizes {

  [PrimaryKeyProp]?: 'product';

  @OneToOne({ entity: () => Products, fieldName: 'product_id', primary: true })
  product!: Products;

  @Property({ persist: false })
  productId!: number;

  @Property({ columnType: 'smallint' })
  size!: number;

  @ManyToMany({ entity: () => Countries, pivotTable: 'product_countries', pivotEntity: () => ProductCountries, joinColumn: 'product_id', inverseJoinColumn: 'country' })
  productCountries = new Collection<Countries>(this);

  @OneToMany({ entity: () => ProductCountries, mappedBy: 'product' })
  productInverse = new Collection<ProductCountries>(this);

  @OneToMany({ entity: () => Sales, mappedBy: 'productSizes' })
  productSizesInverse = new Collection<Sales>(this);

}
",
  "import { Collection, Entity, ManyToMany, OneToMany, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { Colors } from './Colors';
import { SellerProducts } from './SellerProducts';
import { Sellers } from './Sellers';

@Entity()
export class Products {

  [PrimaryKeyProp]?: 'productId';

  @PrimaryKey()
  productId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property({ length: 255 })
  name!: string;

  @ManyToMany({ entity: () => Colors, mappedBy: 'productColors' })
  productColorsInverse = new Collection<Colors>(this);

  @OneToMany({ entity: () => SellerProducts, mappedBy: 'product' })
  productInverse = new Collection<SellerProducts>(this);

  @ManyToMany({ entity: () => Sellers, mappedBy: 'sellerProducts' })
  sellerProductsInverse = new Collection<Sellers>(this);

}
",
  "import { Entity, Index, ManyToOne, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { ProductCountries } from './ProductCountries';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { SellerProducts } from './SellerProducts';

@Entity()
@Unique({ name: 'product_id__size__color_id-UNIQUE', properties: ['colorId', 'productSizes'] })
export class Sales {

  [PrimaryKeyProp]?: 'saleId';

  @PrimaryKey()
  saleId!: number;

  @Property({ columnType: 'char(2)', persist: false })
  country!: unknown;

  @Property({ persist: false })
  sellerId!: number;

  @Index({ name: 'product_id_idx' })
  @Property({ persist: false })
  productId!: number;

  @ManyToOne({ entity: () => ProductColors, fieldNames: ['color_id', 'product_id'], nullable: true, index: 'fk_sales_product_colors1_idx' })
  color?: ProductColors;

  @Property({ nullable: true, persist: false })
  colorId?: number;

  @Property({ columnType: 'smallint', nullable: true, persist: false })
  size?: number;

  @ManyToOne({ entity: () => SellerProducts, fieldNames: ['seller_id', 'exchanged_product_id'], nullable: true, index: 'fk_sales_seller_products2_idx' })
  exchanged?: SellerProducts;

  @Property({ nullable: true, persist: false })
  exchangedProductId?: number;

  @ManyToOne({ entity: () => ProductCountries, fieldNames: ['country', 'product_id'], index: 'fk_sales_product_countries1_idx' })
  productCountries!: ProductCountries;

  @ManyToOne({ entity: () => ProductSizes, fieldNames: ['size', 'product_id'], nullable: true, index: 'fk_sales_product_sizes1_idx' })
  productSizes?: ProductSizes;

  @ManyToOne({ entity: () => SellerCountries, fieldNames: ['country', 'seller_id'], index: 'fk_sales_seller_countries1_idx' })
  sellerCountries!: SellerCountries;

  @ManyToOne({ entity: () => SellerProducts, fieldNames: ['seller_id', 'product_id'], index: 'fk_sales_seller_products1_idx' })
  fkSalesSellerProducts1!: SellerProducts;

}
",
  "import { Collection, Entity, Index, ManyToOne, OneToMany, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Sales } from './Sales';
import { Sellers } from './Sellers';

@Entity()
export class SellerCountries {

  [PrimaryKeyProp]?: ['seller', 'countries'];

  @Property({ columnType: 'char(2)', persist: false })
  country!: unknown;

  @ManyToOne({ entity: () => Sellers, fieldName: 'seller_id', primary: true, index: 'fk_seller_countries_sellers1_idx' })
  seller!: Sellers;

  @Index({ name: 'fk_seller_countries_sellers1_idx' })
  @Property({ persist: false })
  sellerId!: number;

  @ManyToOne({ entity: () => Countries, fieldName: 'country', primary: true })
  countries!: Countries;

  @OneToMany({ entity: () => Sales, mappedBy: 'sellerCountries' })
  sellerCountriesInverse = new Collection<Sales>(this);

}
",
  "import { Collection, Entity, Index, ManyToOne, OneToMany, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Products } from './Products';
import { Sales } from './Sales';
import { Sellers } from './Sellers';

@Entity()
export class SellerProducts {

  [PrimaryKeyProp]?: ['seller', 'product'];

  @ManyToOne({ entity: () => Sellers, fieldName: 'seller_id', primary: true })
  seller!: Sellers;

  @Property({ persist: false })
  sellerId!: number;

  @ManyToOne({ entity: () => Products, fieldName: 'product_id', primary: true, index: 'fk_seller_products_products1_idx' })
  product!: Products;

  @Index({ name: 'fk_seller_products_products1_idx' })
  @Property({ persist: false })
  productId!: number;

  @OneToMany({ entity: () => Sales, mappedBy: 'exchanged' })
  exchangedInverse = new Collection<Sales>(this);

  @OneToMany({ entity: () => Sales, mappedBy: 'fkSalesSellerProducts1' })
  fkSalesSellerProducts1Inverse = new Collection<Sales>(this);

}
",
  "import { Collection, Entity, ManyToMany, OneToMany, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Products } from './Products';
import { SellerCountries } from './SellerCountries';
import { SellerProducts } from './SellerProducts';

@Entity()
export class Sellers {

  [PrimaryKeyProp]?: 'sellerId';

  @PrimaryKey()
  sellerId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property({ length: 255 })
  name!: string;

  @ManyToMany({ entity: () => Countries, pivotTable: 'seller_countries', pivotEntity: () => SellerCountries, joinColumn: 'seller_id', inverseJoinColumn: 'country' })
  sellerCountries = new Collection<Countries>(this);

  @ManyToMany({ entity: () => Products, pivotTable: 'seller_products', pivotEntity: () => SellerProducts, joinColumn: 'seller_id', inverseJoinColumn: 'product_id' })
  sellerProducts = new Collection<Products>(this);

  @OneToMany({ entity: () => SellerProducts, mappedBy: 'seller' })
  sellerInverse = new Collection<SellerProducts>(this);

}
",
]
`;

exports[`4898 ambiguous_fk_example scalarPropertiesForRelations=always bidirectionalRelations=true identifiedReferences=false entitySchema=true: dump 1`] = `
[
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { Products } from './Products';

export class Colors {
  [PrimaryKeyProp]?: 'colorId';
  colorId!: number;
  name!: string;
  productColors = new Collection<Products>(this);
  colorInverse = new Collection<ProductColors>(this);
}

export const ColorsSchema = new EntitySchema({
  class: Colors,
  properties: {
    colorId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255, unique: 'name_UNIQUE' },
    productColors: {
      kind: 'm:n',
      entity: () => Products,
      pivotTable: 'product_colors',
      pivotEntity: () => ProductColors,
      joinColumn: 'color_id',
      inverseJoinColumn: 'product_id',
    },
    colorInverse: { kind: '1:m', entity: () => ProductColors, mappedBy: 'color' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { Sellers } from './Sellers';

export class Countries {
  [PrimaryKeyProp]?: 'country';
  country!: unknown;
  countriesInverse = new Collection<SellerCountries>(this);
  productCountriesInverse = new Collection<ProductSizes>(this);
  sellerCountriesInverse = new Collection<Sellers>(this);
}

export const CountriesSchema = new EntitySchema({
  class: Countries,
  properties: {
    country: { primary: true, type: 'unknown', columnType: 'char(2)' },
    countriesInverse: { kind: '1:m', entity: () => SellerCountries, mappedBy: 'countries' },
    productCountriesInverse: { kind: 'm:n', entity: () => ProductSizes, mappedBy: 'productCountries' },
    sellerCountriesInverse: { kind: 'm:n', entity: () => Sellers, mappedBy: 'sellerCountries' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Sales } from './Sales';

export class ProductColors {
  [PrimaryKeyProp]?: ['color', 'product'];
  color!: Colors;
  colorId!: number;
  product!: Products;
  productId!: number;
  colorInverse = new Collection<Sales>(this);
}

export const ProductColorsSchema = new EntitySchema({
  class: ProductColors,
  properties: {
    color: { primary: true, kind: 'm:1', entity: () => Colors, fieldName: 'color_id' },
    colorId: { type: 'number', persist: false },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => Products,
      fieldName: 'product_id',
      index: 'fk_product_colors_products1_idx',
    },
    productId: { type: 'number', persist: false, index: 'fk_product_colors_products1_idx' },
    colorInverse: { kind: '1:m', entity: () => Sales, mappedBy: 'color' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Sales } from './Sales';

export class ProductCountries {
  [PrimaryKeyProp]?: ['product', 'countries'];
  country!: unknown;
  product!: ProductSizes;
  productId!: number;
  countries!: Countries;
  productCountriesInverse = new Collection<Sales>(this);
}

export const ProductCountriesSchema = new EntitySchema({
  class: ProductCountries,
  properties: {
    country: { type: 'unknown', columnType: 'char(2)', persist: false },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => ProductSizes,
      fieldName: 'product_id',
      index: 'fk_product_countries_product_sizes1_idx',
    },
    productId: {
      type: 'number',
      persist: false,
      index: 'fk_product_countries_product_sizes1_idx',
    },
    countries: { primary: true, kind: 'm:1', entity: () => Countries, fieldName: 'country' },
    productCountriesInverse: { kind: '1:m', entity: () => Sales, mappedBy: 'productCountries' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Countries } from './Countries';
import { ProductCountries } from './ProductCountries';
import { Sales } from './Sales';

export class ProductSizes {
  [PrimaryKeyProp]?: 'product';
  product!: Products;
  productId!: number;
  size!: number;
  productCountries = new Collection<Countries>(this);
  productInverse = new Collection<ProductCountries>(this);
  productSizesInverse = new Collection<Sales>(this);
}

export const ProductSizesSchema = new EntitySchema({
  class: ProductSizes,
  properties: {
    product: { primary: true, kind: '1:1', entity: () => Products, fieldName: 'product_id' },
    productId: { type: 'number', persist: false },
    size: { type: 'number', columnType: 'smallint' },
    productCountries: {
      kind: 'm:n',
      entity: () => Countries,
      pivotTable: 'product_countries',
      pivotEntity: () => ProductCountries,
      joinColumn: 'product_id',
      inverseJoinColumn: 'country',
    },
    productInverse: { kind: '1:m', entity: () => ProductCountries, mappedBy: 'product' },
    productSizesInverse: { kind: '1:m', entity: () => Sales, mappedBy: 'productSizes' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Colors } from './Colors';
import { SellerProducts } from './SellerProducts';
import { Sellers } from './Sellers';

export class Products {
  [PrimaryKeyProp]?: 'productId';
  productId!: number;
  name!: string;
  productColorsInverse = new Collection<Colors>(this);
  productInverse = new Collection<SellerProducts>(this);
  sellerProductsInverse = new Collection<Sellers>(this);
}

export const ProductsSchema = new EntitySchema({
  class: Products,
  properties: {
    productId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255, unique: 'name_UNIQUE' },
    productColorsInverse: { kind: 'm:n', entity: () => Colors, mappedBy: 'productColors' },
    productInverse: { kind: '1:m', entity: () => SellerProducts, mappedBy: 'product' },
    sellerProductsInverse: { kind: 'm:n', entity: () => Sellers, mappedBy: 'sellerProducts' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Sales {
  [PrimaryKeyProp]?: 'saleId';
  saleId!: number;
  country!: unknown;
  sellerId!: number;
  productId!: number;
  color?: ProductColors;
  colorId?: number;
  size?: number;
  exchanged?: SellerProducts;
  exchangedProductId?: number;
  productCountries!: ProductCountries;
  productSizes?: ProductSizes;
  sellerCountries!: SellerCountries;
  fkSalesSellerProducts1!: SellerProducts;
}

export const SalesSchema = new EntitySchema({
  class: Sales,
  properties: {
    saleId: { primary: true, type: 'number' },
    country: { type: 'unknown', columnType: 'char(2)', persist: false },
    sellerId: { type: 'number', persist: false },
    productId: { type: 'number', persist: false, index: 'product_id_idx' },
    color: {
      kind: 'm:1',
      entity: () => ProductColors,
      fieldNames: [
        'color_id',
        'product_id'
      ],
      nullable: true,
      index: 'fk_sales_product_colors1_idx',
    },
    colorId: { type: 'number', nullable: true, persist: false },
    size: { type: 'number', columnType: 'smallint', nullable: true, persist: false },
    exchanged: {
      kind: 'm:1',
      entity: () => SellerProducts,
      fieldNames: [
        'seller_id',
        'exchanged_product_id'
      ],
      nullable: true,
      index: 'fk_sales_seller_products2_idx',
    },
    exchangedProductId: { type: 'number', nullable: true, persist: false },
    productCountries: {
      kind: 'm:1',
      entity: () => ProductCountries,
      fieldNames: [
        'country',
        'product_id'
      ],
      index: 'fk_sales_product_countries1_idx',
    },
    productSizes: {
      kind: 'm:1',
      entity: () => ProductSizes,
      fieldNames: [
        'size',
        'product_id'
      ],
      nullable: true,
      index: 'fk_sales_product_sizes1_idx',
    },
    sellerCountries: {
      kind: 'm:1',
      entity: () => SellerCountries,
      fieldNames: [
        'country',
        'seller_id'
      ],
      index: 'fk_sales_seller_countries1_idx',
    },
    fkSalesSellerProducts1: {
      kind: 'm:1',
      entity: () => SellerProducts,
      fieldNames: [
        'seller_id',
        'product_id'
      ],
      index: 'fk_sales_seller_products1_idx',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Sales } from './Sales';

export class SellerCountries {
  [PrimaryKeyProp]?: ['seller', 'countries'];
  country!: unknown;
  seller!: Sellers;
  sellerId!: number;
  countries!: Countries;
  sellerCountriesInverse = new Collection<Sales>(this);
}

export const SellerCountriesSchema = new EntitySchema({
  class: SellerCountries,
  properties: {
    country: { type: 'unknown', columnType: 'char(2)', persist: false },
    seller: {
      primary: true,
      kind: 'm:1',
      entity: () => Sellers,
      fieldName: 'seller_id',
      index: 'fk_seller_countries_sellers1_idx',
    },
    sellerId: { type: 'number', persist: false, index: 'fk_seller_countries_sellers1_idx' },
    countries: { primary: true, kind: 'm:1', entity: () => Countries, fieldName: 'country' },
    sellerCountriesInverse: { kind: '1:m', entity: () => Sales, mappedBy: 'sellerCountries' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Sales } from './Sales';

export class SellerProducts {
  [PrimaryKeyProp]?: ['seller', 'product'];
  seller!: Sellers;
  sellerId!: number;
  product!: Products;
  productId!: number;
  exchangedInverse = new Collection<Sales>(this);
  fkSalesSellerProducts1Inverse = new Collection<Sales>(this);
}

export const SellerProductsSchema = new EntitySchema({
  class: SellerProducts,
  properties: {
    seller: { primary: true, kind: 'm:1', entity: () => Sellers, fieldName: 'seller_id' },
    sellerId: { type: 'number', persist: false },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => Products,
      fieldName: 'product_id',
      index: 'fk_seller_products_products1_idx',
    },
    productId: { type: 'number', persist: false, index: 'fk_seller_products_products1_idx' },
    exchangedInverse: { kind: '1:m', entity: () => Sales, mappedBy: 'exchanged' },
    fkSalesSellerProducts1Inverse: { kind: '1:m', entity: () => Sales, mappedBy: 'fkSalesSellerProducts1' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Products } from './Products';
import { SellerProducts } from './SellerProducts';

export class Sellers {
  [PrimaryKeyProp]?: 'sellerId';
  sellerId!: number;
  name!: string;
  sellerCountries = new Collection<Countries>(this);
  sellerProducts = new Collection<Products>(this);
  sellerInverse = new Collection<SellerProducts>(this);
}

export const SellersSchema = new EntitySchema({
  class: Sellers,
  properties: {
    sellerId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255, unique: 'name_UNIQUE' },
    sellerCountries: {
      kind: 'm:n',
      entity: () => Countries,
      pivotTable: 'seller_countries',
      pivotEntity: () => SellerCountries,
      joinColumn: 'seller_id',
      inverseJoinColumn: 'country',
    },
    sellerProducts: {
      kind: 'm:n',
      entity: () => Products,
      pivotTable: 'seller_products',
      pivotEntity: () => SellerProducts,
      joinColumn: 'seller_id',
      inverseJoinColumn: 'product_id',
    },
    sellerInverse: { kind: '1:m', entity: () => SellerProducts, mappedBy: 'seller' },
  },
});
",
]
`;

exports[`4898 ambiguous_fk_example scalarPropertiesForRelations=always bidirectionalRelations=true identifiedReferences=true entitySchema=false: dump 1`] = `
[
  "import { Collection, Entity, ManyToMany, OneToMany, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { Products } from './Products';

@Entity()
export class Colors {

  [PrimaryKeyProp]?: 'colorId';

  @PrimaryKey()
  colorId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property({ length: 255 })
  name!: string;

  @ManyToMany({ entity: () => Products, pivotTable: 'product_colors', pivotEntity: () => ProductColors, joinColumn: 'color_id', inverseJoinColumn: 'product_id' })
  productColors = new Collection<Products>(this);

  @OneToMany({ entity: () => ProductColors, mappedBy: 'color' })
  colorInverse = new Collection<ProductColors>(this);

}
",
  "import { Collection, Entity, ManyToMany, OneToMany, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { Sellers } from './Sellers';

@Entity()
export class Countries {

  [PrimaryKeyProp]?: 'country';

  @PrimaryKey({ columnType: 'char(2)' })
  country!: unknown;

  @OneToMany({ entity: () => SellerCountries, mappedBy: 'countries' })
  countriesInverse = new Collection<SellerCountries>(this);

  @ManyToMany({ entity: () => ProductSizes, mappedBy: 'productCountries' })
  productCountriesInverse = new Collection<ProductSizes>(this);

  @ManyToMany({ entity: () => Sellers, mappedBy: 'sellerCountries' })
  sellerCountriesInverse = new Collection<Sellers>(this);

}
",
  "import { Collection, Entity, Index, ManyToOne, OneToMany, PrimaryKeyProp, Property, Ref } from '@mikro-orm/core';
import { Colors } from './Colors';
import { Products } from './Products';
import { Sales } from './Sales';

@Entity()
export class ProductColors {

  [PrimaryKeyProp]?: ['color', 'product'];

  @ManyToOne({ entity: () => Colors, ref: true, fieldName: 'color_id', primary: true })
  color!: Ref<Colors>;

  @Property({ persist: false })
  colorId!: number;

  @ManyToOne({ entity: () => Products, ref: true, fieldName: 'product_id', primary: true, index: 'fk_product_colors_products1_idx' })
  product!: Ref<Products>;

  @Index({ name: 'fk_product_colors_products1_idx' })
  @Property({ persist: false })
  productId!: number;

  @OneToMany({ entity: () => Sales, mappedBy: 'color' })
  colorInverse = new Collection<Sales>(this);

}
",
  "import { Collection, Entity, Index, ManyToOne, OneToMany, PrimaryKeyProp, Property, Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { ProductSizes } from './ProductSizes';
import { Sales } from './Sales';

@Entity()
export class ProductCountries {

  [PrimaryKeyProp]?: ['product', 'countries'];

  @Property({ columnType: 'char(2)', persist: false })
  country!: unknown;

  @ManyToOne({ entity: () => ProductSizes, ref: true, fieldName: 'product_id', primary: true, index: 'fk_product_countries_product_sizes1_idx' })
  product!: Ref<ProductSizes>;

  @Index({ name: 'fk_product_countries_product_sizes1_idx' })
  @Property({ persist: false })
  productId!: number;

  @ManyToOne({ entity: () => Countries, ref: true, fieldName: 'country', primary: true })
  countries!: Ref<Countries>;

  @OneToMany({ entity: () => Sales, mappedBy: 'productCountries' })
  productCountriesInverse = new Collection<Sales>(this);

}
",
  "import { Collection, Entity, ManyToMany, OneToMany, OneToOne, PrimaryKeyProp, Property, Ref, Unique } from '@mikro-orm/core';
import { Countries } from './Countries';
import { ProductCountries } from './ProductCountries';
import { Products } from './Products';
import { Sales } from './Sales';

@Entity()
@Unique({ name: 'size__product_id-UNIQUE', properties: ['size', 'productId'] })
export class ProductSizes {

  [PrimaryKeyProp]?: 'product';

  @OneToOne({ entity: () => Products, ref: true, fieldName: 'product_id', primary: true })
  product!: Ref<Products>;

  @Property({ persist: false })
  productId!: number;

  @Property({ columnType: 'smallint' })
  size!: number;

  @ManyToMany({ entity: () => Countries, pivotTable: 'product_countries', pivotEntity: () => ProductCountries, joinColumn: 'product_id', inverseJoinColumn: 'country' })
  productCountries = new Collection<Countries>(this);

  @OneToMany({ entity: () => ProductCountries, mappedBy: 'product' })
  productInverse = new Collection<ProductCountries>(this);

  @OneToMany({ entity: () => Sales, mappedBy: 'productSizes' })
  productSizesInverse = new Collection<Sales>(this);

}
",
  "import { Collection, Entity, ManyToMany, OneToMany, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { Colors } from './Colors';
import { SellerProducts } from './SellerProducts';
import { Sellers } from './Sellers';

@Entity()
export class Products {

  [PrimaryKeyProp]?: 'productId';

  @PrimaryKey()
  productId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property({ length: 255 })
  name!: string;

  @ManyToMany({ entity: () => Colors, mappedBy: 'productColors' })
  productColorsInverse = new Collection<Colors>(this);

  @OneToMany({ entity: () => SellerProducts, mappedBy: 'product' })
  productInverse = new Collection<SellerProducts>(this);

  @ManyToMany({ entity: () => Sellers, mappedBy: 'sellerProducts' })
  sellerProductsInverse = new Collection<Sellers>(this);

}
",
  "import { Entity, Index, ManyToOne, PrimaryKey, PrimaryKeyProp, Property, Ref, Unique } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { ProductCountries } from './ProductCountries';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { SellerProducts } from './SellerProducts';

@Entity()
@Unique({ name: 'product_id__size__color_id-UNIQUE', properties: ['colorId', 'productSizes'] })
export class Sales {

  [PrimaryKeyProp]?: 'saleId';

  @PrimaryKey()
  saleId!: number;

  @Property({ columnType: 'char(2)', persist: false })
  country!: unknown;

  @Property({ persist: false })
  sellerId!: number;

  @Index({ name: 'product_id_idx' })
  @Property({ persist: false })
  productId!: number;

  @ManyToOne({ entity: () => ProductColors, ref: true, fieldNames: ['color_id', 'product_id'], nullable: true, index: 'fk_sales_product_colors1_idx' })
  color?: Ref<ProductColors>;

  @Property({ nullable: true, persist: false })
  colorId?: number;

  @Property({ columnType: 'smallint', nullable: true, persist: false })
  size?: number;

  @ManyToOne({ entity: () => SellerProducts, ref: true, fieldNames: ['seller_id', 'exchanged_product_id'], nullable: true, index: 'fk_sales_seller_products2_idx' })
  exchanged?: Ref<SellerProducts>;

  @Property({ nullable: true, persist: false })
  exchangedProductId?: number;

  @ManyToOne({ entity: () => ProductCountries, ref: true, fieldNames: ['country', 'product_id'], index: 'fk_sales_product_countries1_idx' })
  productCountries!: Ref<ProductCountries>;

  @ManyToOne({ entity: () => ProductSizes, ref: true, fieldNames: ['size', 'product_id'], nullable: true, index: 'fk_sales_product_sizes1_idx' })
  productSizes?: Ref<ProductSizes>;

  @ManyToOne({ entity: () => SellerCountries, ref: true, fieldNames: ['country', 'seller_id'], index: 'fk_sales_seller_countries1_idx' })
  sellerCountries!: Ref<SellerCountries>;

  @ManyToOne({ entity: () => SellerProducts, ref: true, fieldNames: ['seller_id', 'product_id'], index: 'fk_sales_seller_products1_idx' })
  fkSalesSellerProducts1!: Ref<SellerProducts>;

}
",
  "import { Collection, Entity, Index, ManyToOne, OneToMany, PrimaryKeyProp, Property, Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Sales } from './Sales';
import { Sellers } from './Sellers';

@Entity()
export class SellerCountries {

  [PrimaryKeyProp]?: ['seller', 'countries'];

  @Property({ columnType: 'char(2)', persist: false })
  country!: unknown;

  @ManyToOne({ entity: () => Sellers, ref: true, fieldName: 'seller_id', primary: true, index: 'fk_seller_countries_sellers1_idx' })
  seller!: Ref<Sellers>;

  @Index({ name: 'fk_seller_countries_sellers1_idx' })
  @Property({ persist: false })
  sellerId!: number;

  @ManyToOne({ entity: () => Countries, ref: true, fieldName: 'country', primary: true })
  countries!: Ref<Countries>;

  @OneToMany({ entity: () => Sales, mappedBy: 'sellerCountries' })
  sellerCountriesInverse = new Collection<Sales>(this);

}
",
  "import { Collection, Entity, Index, ManyToOne, OneToMany, PrimaryKeyProp, Property, Ref } from '@mikro-orm/core';
import { Products } from './Products';
import { Sales } from './Sales';
import { Sellers } from './Sellers';

@Entity()
export class SellerProducts {

  [PrimaryKeyProp]?: ['seller', 'product'];

  @ManyToOne({ entity: () => Sellers, ref: true, fieldName: 'seller_id', primary: true })
  seller!: Ref<Sellers>;

  @Property({ persist: false })
  sellerId!: number;

  @ManyToOne({ entity: () => Products, ref: true, fieldName: 'product_id', primary: true, index: 'fk_seller_products_products1_idx' })
  product!: Ref<Products>;

  @Index({ name: 'fk_seller_products_products1_idx' })
  @Property({ persist: false })
  productId!: number;

  @OneToMany({ entity: () => Sales, mappedBy: 'exchanged' })
  exchangedInverse = new Collection<Sales>(this);

  @OneToMany({ entity: () => Sales, mappedBy: 'fkSalesSellerProducts1' })
  fkSalesSellerProducts1Inverse = new Collection<Sales>(this);

}
",
  "import { Collection, Entity, ManyToMany, OneToMany, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Products } from './Products';
import { SellerCountries } from './SellerCountries';
import { SellerProducts } from './SellerProducts';

@Entity()
export class Sellers {

  [PrimaryKeyProp]?: 'sellerId';

  @PrimaryKey()
  sellerId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property({ length: 255 })
  name!: string;

  @ManyToMany({ entity: () => Countries, pivotTable: 'seller_countries', pivotEntity: () => SellerCountries, joinColumn: 'seller_id', inverseJoinColumn: 'country' })
  sellerCountries = new Collection<Countries>(this);

  @ManyToMany({ entity: () => Products, pivotTable: 'seller_products', pivotEntity: () => SellerProducts, joinColumn: 'seller_id', inverseJoinColumn: 'product_id' })
  sellerProducts = new Collection<Products>(this);

  @OneToMany({ entity: () => SellerProducts, mappedBy: 'seller' })
  sellerInverse = new Collection<SellerProducts>(this);

}
",
]
`;

exports[`4898 ambiguous_fk_example scalarPropertiesForRelations=always bidirectionalRelations=true identifiedReferences=true entitySchema=true: dump 1`] = `
[
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { Products } from './Products';

export class Colors {
  [PrimaryKeyProp]?: 'colorId';
  colorId!: number;
  name!: string;
  productColors = new Collection<Products>(this);
  colorInverse = new Collection<ProductColors>(this);
}

export const ColorsSchema = new EntitySchema({
  class: Colors,
  properties: {
    colorId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255, unique: 'name_UNIQUE' },
    productColors: {
      kind: 'm:n',
      entity: () => Products,
      pivotTable: 'product_colors',
      pivotEntity: () => ProductColors,
      joinColumn: 'color_id',
      inverseJoinColumn: 'product_id',
    },
    colorInverse: { kind: '1:m', entity: () => ProductColors, mappedBy: 'color' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { Sellers } from './Sellers';

export class Countries {
  [PrimaryKeyProp]?: 'country';
  country!: unknown;
  countriesInverse = new Collection<SellerCountries>(this);
  productCountriesInverse = new Collection<ProductSizes>(this);
  sellerCountriesInverse = new Collection<Sellers>(this);
}

export const CountriesSchema = new EntitySchema({
  class: Countries,
  properties: {
    country: { primary: true, type: 'unknown', columnType: 'char(2)' },
    countriesInverse: { kind: '1:m', entity: () => SellerCountries, mappedBy: 'countries' },
    productCountriesInverse: { kind: 'm:n', entity: () => ProductSizes, mappedBy: 'productCountries' },
    sellerCountriesInverse: { kind: 'm:n', entity: () => Sellers, mappedBy: 'sellerCountries' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Colors } from './Colors';
import { Products } from './Products';
import { Sales } from './Sales';

export class ProductColors {
  [PrimaryKeyProp]?: ['color', 'product'];
  color!: Ref<Colors>;
  colorId!: number;
  product!: Ref<Products>;
  productId!: number;
  colorInverse = new Collection<Sales>(this);
}

export const ProductColorsSchema = new EntitySchema({
  class: ProductColors,
  properties: {
    color: {
      primary: true,
      kind: 'm:1',
      entity: () => Colors,
      ref: true,
      fieldName: 'color_id',
    },
    colorId: { type: 'number', persist: false },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => Products,
      ref: true,
      fieldName: 'product_id',
      index: 'fk_product_colors_products1_idx',
    },
    productId: { type: 'number', persist: false, index: 'fk_product_colors_products1_idx' },
    colorInverse: { kind: '1:m', entity: () => Sales, mappedBy: 'color' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { ProductSizes } from './ProductSizes';
import { Sales } from './Sales';

export class ProductCountries {
  [PrimaryKeyProp]?: ['product', 'countries'];
  country!: unknown;
  product!: Ref<ProductSizes>;
  productId!: number;
  countries!: Ref<Countries>;
  productCountriesInverse = new Collection<Sales>(this);
}

export const ProductCountriesSchema = new EntitySchema({
  class: ProductCountries,
  properties: {
    country: { type: 'unknown', columnType: 'char(2)', persist: false },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => ProductSizes,
      ref: true,
      fieldName: 'product_id',
      index: 'fk_product_countries_product_sizes1_idx',
    },
    productId: {
      type: 'number',
      persist: false,
      index: 'fk_product_countries_product_sizes1_idx',
    },
    countries: {
      primary: true,
      kind: 'm:1',
      entity: () => Countries,
      ref: true,
      fieldName: 'country',
    },
    productCountriesInverse: { kind: '1:m', entity: () => Sales, mappedBy: 'productCountries' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { ProductCountries } from './ProductCountries';
import { Products } from './Products';
import { Sales } from './Sales';

export class ProductSizes {
  [PrimaryKeyProp]?: 'product';
  product!: Ref<Products>;
  productId!: number;
  size!: number;
  productCountries = new Collection<Countries>(this);
  productInverse = new Collection<ProductCountries>(this);
  productSizesInverse = new Collection<Sales>(this);
}

export const ProductSizesSchema = new EntitySchema({
  class: ProductSizes,
  properties: {
    product: {
      primary: true,
      kind: '1:1',
      entity: () => Products,
      ref: true,
      fieldName: 'product_id',
    },
    productId: { type: 'number', persist: false },
    size: { type: 'number', columnType: 'smallint' },
    productCountries: {
      kind: 'm:n',
      entity: () => Countries,
      pivotTable: 'product_countries',
      pivotEntity: () => ProductCountries,
      joinColumn: 'product_id',
      inverseJoinColumn: 'country',
    },
    productInverse: { kind: '1:m', entity: () => ProductCountries, mappedBy: 'product' },
    productSizesInverse: { kind: '1:m', entity: () => Sales, mappedBy: 'productSizes' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Colors } from './Colors';
import { SellerProducts } from './SellerProducts';
import { Sellers } from './Sellers';

export class Products {
  [PrimaryKeyProp]?: 'productId';
  productId!: number;
  name!: string;
  productColorsInverse = new Collection<Colors>(this);
  productInverse = new Collection<SellerProducts>(this);
  sellerProductsInverse = new Collection<Sellers>(this);
}

export const ProductsSchema = new EntitySchema({
  class: Products,
  properties: {
    productId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255, unique: 'name_UNIQUE' },
    productColorsInverse: { kind: 'm:n', entity: () => Colors, mappedBy: 'productColors' },
    productInverse: { kind: '1:m', entity: () => SellerProducts, mappedBy: 'product' },
    sellerProductsInverse: { kind: 'm:n', entity: () => Sellers, mappedBy: 'sellerProducts' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { ProductCountries } from './ProductCountries';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { SellerProducts } from './SellerProducts';

export class Sales {
  [PrimaryKeyProp]?: 'saleId';
  saleId!: number;
  country!: unknown;
  sellerId!: number;
  productId!: number;
  color?: Ref<ProductColors>;
  colorId?: number;
  size?: number;
  exchanged?: Ref<SellerProducts>;
  exchangedProductId?: number;
  productCountries!: Ref<ProductCountries>;
  productSizes?: Ref<ProductSizes>;
  sellerCountries!: Ref<SellerCountries>;
  fkSalesSellerProducts1!: Ref<SellerProducts>;
}

export const SalesSchema = new EntitySchema({
  class: Sales,
  properties: {
    saleId: { primary: true, type: 'number' },
    country: { type: 'unknown', columnType: 'char(2)', persist: false },
    sellerId: { type: 'number', persist: false },
    productId: { type: 'number', persist: false, index: 'product_id_idx' },
    color: {
      kind: 'm:1',
      entity: () => ProductColors,
      ref: true,
      fieldNames: [
        'color_id',
        'product_id'
      ],
      nullable: true,
      index: 'fk_sales_product_colors1_idx',
    },
    colorId: { type: 'number', nullable: true, persist: false },
    size: { type: 'number', columnType: 'smallint', nullable: true, persist: false },
    exchanged: {
      kind: 'm:1',
      entity: () => SellerProducts,
      ref: true,
      fieldNames: [
        'seller_id',
        'exchanged_product_id'
      ],
      nullable: true,
      index: 'fk_sales_seller_products2_idx',
    },
    exchangedProductId: { type: 'number', nullable: true, persist: false },
    productCountries: {
      kind: 'm:1',
      entity: () => ProductCountries,
      ref: true,
      fieldNames: [
        'country',
        'product_id'
      ],
      index: 'fk_sales_product_countries1_idx',
    },
    productSizes: {
      kind: 'm:1',
      entity: () => ProductSizes,
      ref: true,
      fieldNames: [
        'size',
        'product_id'
      ],
      nullable: true,
      index: 'fk_sales_product_sizes1_idx',
    },
    sellerCountries: {
      kind: 'm:1',
      entity: () => SellerCountries,
      ref: true,
      fieldNames: [
        'country',
        'seller_id'
      ],
      index: 'fk_sales_seller_countries1_idx',
    },
    fkSalesSellerProducts1: {
      kind: 'm:1',
      entity: () => SellerProducts,
      ref: true,
      fieldNames: [
        'seller_id',
        'product_id'
      ],
      index: 'fk_sales_seller_products1_idx',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Sales } from './Sales';
import { Sellers } from './Sellers';

export class SellerCountries {
  [PrimaryKeyProp]?: ['seller', 'countries'];
  country!: unknown;
  seller!: Ref<Sellers>;
  sellerId!: number;
  countries!: Ref<Countries>;
  sellerCountriesInverse = new Collection<Sales>(this);
}

export const SellerCountriesSchema = new EntitySchema({
  class: SellerCountries,
  properties: {
    country: { type: 'unknown', columnType: 'char(2)', persist: false },
    seller: {
      primary: true,
      kind: 'm:1',
      entity: () => Sellers,
      ref: true,
      fieldName: 'seller_id',
      index: 'fk_seller_countries_sellers1_idx',
    },
    sellerId: { type: 'number', persist: false, index: 'fk_seller_countries_sellers1_idx' },
    countries: {
      primary: true,
      kind: 'm:1',
      entity: () => Countries,
      ref: true,
      fieldName: 'country',
    },
    sellerCountriesInverse: { kind: '1:m', entity: () => Sales, mappedBy: 'sellerCountries' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Products } from './Products';
import { Sales } from './Sales';
import { Sellers } from './Sellers';

export class SellerProducts {
  [PrimaryKeyProp]?: ['seller', 'product'];
  seller!: Ref<Sellers>;
  sellerId!: number;
  product!: Ref<Products>;
  productId!: number;
  exchangedInverse = new Collection<Sales>(this);
  fkSalesSellerProducts1Inverse = new Collection<Sales>(this);
}

export const SellerProductsSchema = new EntitySchema({
  class: SellerProducts,
  properties: {
    seller: {
      primary: true,
      kind: 'm:1',
      entity: () => Sellers,
      ref: true,
      fieldName: 'seller_id',
    },
    sellerId: { type: 'number', persist: false },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => Products,
      ref: true,
      fieldName: 'product_id',
      index: 'fk_seller_products_products1_idx',
    },
    productId: { type: 'number', persist: false, index: 'fk_seller_products_products1_idx' },
    exchangedInverse: { kind: '1:m', entity: () => Sales, mappedBy: 'exchanged' },
    fkSalesSellerProducts1Inverse: { kind: '1:m', entity: () => Sales, mappedBy: 'fkSalesSellerProducts1' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Products } from './Products';
import { SellerProducts } from './SellerProducts';

export class Sellers {
  [PrimaryKeyProp]?: 'sellerId';
  sellerId!: number;
  name!: string;
  sellerCountries = new Collection<Countries>(this);
  sellerProducts = new Collection<Products>(this);
  sellerInverse = new Collection<SellerProducts>(this);
}

export const SellersSchema = new EntitySchema({
  class: Sellers,
  properties: {
    sellerId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255, unique: 'name_UNIQUE' },
    sellerCountries: {
      kind: 'm:n',
      entity: () => Countries,
      pivotTable: 'seller_countries',
      pivotEntity: () => SellerCountries,
      joinColumn: 'seller_id',
      inverseJoinColumn: 'country',
    },
    sellerProducts: {
      kind: 'm:n',
      entity: () => Products,
      pivotTable: 'seller_products',
      pivotEntity: () => SellerProducts,
      joinColumn: 'seller_id',
      inverseJoinColumn: 'product_id',
    },
    sellerInverse: { kind: '1:m', entity: () => SellerProducts, mappedBy: 'seller' },
  },
});
",
]
`;

exports[`4898 ambiguous_fk_example scalarPropertiesForRelations=never bidirectionalRelations=false identifiedReferences=false entitySchema=false: dump 1`] = `
[
  "import { Collection, Entity, ManyToMany, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { Products } from './Products';

@Entity()
export class Colors {

  [PrimaryKeyProp]?: 'colorId';

  @PrimaryKey()
  colorId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property({ length: 255 })
  name!: string;

  @ManyToMany({ entity: () => Products, pivotTable: 'product_colors', pivotEntity: () => ProductColors, joinColumn: 'color_id', inverseJoinColumn: 'product_id' })
  productColors = new Collection<Products>(this);

}
",
  "import { Collection, Entity, ManyToMany, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductCountries } from './ProductCountries';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { Sellers } from './Sellers';

@Entity()
export class Countries {

  [PrimaryKeyProp]?: 'country';

  @PrimaryKey({ columnType: 'char(2)' })
  country!: unknown;

  @ManyToMany({ entity: () => ProductSizes, pivotTable: 'product_countries', pivotEntity: () => ProductCountries, joinColumn: 'country', inverseJoinColumn: 'product_id' })
  productCountries = new Collection<ProductSizes>(this);

  @ManyToMany({ entity: () => Sellers, pivotTable: 'seller_countries', pivotEntity: () => SellerCountries, joinColumn: 'country', inverseJoinColumn: 'seller_id' })
  sellerCountries = new Collection<Sellers>(this);

}
",
  "import { Entity, ManyToOne, PrimaryKeyProp } from '@mikro-orm/core';
import { Colors } from './Colors';
import { Products } from './Products';

@Entity()
export class ProductColors {

  [PrimaryKeyProp]?: ['color', 'product'];

  @ManyToOne({ entity: () => Colors, fieldName: 'color_id', primary: true })
  color!: Colors;

  @ManyToOne({ entity: () => Products, fieldName: 'product_id', primary: true, index: 'fk_product_colors_products1_idx' })
  product!: Products;

}
",
  "import { Entity, ManyToOne, PrimaryKeyProp } from '@mikro-orm/core';
import { Countries } from './Countries';
import { ProductSizes } from './ProductSizes';

@Entity()
export class ProductCountries {

  [PrimaryKeyProp]?: ['country', 'product'];

  @ManyToOne({ entity: () => Countries, fieldName: 'country', primary: true })
  country!: Countries;

  @ManyToOne({ entity: () => ProductSizes, fieldName: 'product_id', primary: true, index: 'fk_product_countries_product_sizes1_idx' })
  product!: ProductSizes;

}
",
  "import { Entity, OneToOne, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { Products } from './Products';

@Entity()
@Unique({ name: 'size__product_id-UNIQUE', properties: ['size', 'product'] })
export class ProductSizes {

  [PrimaryKeyProp]?: 'product';

  @OneToOne({ entity: () => Products, fieldName: 'product_id', primary: true })
  product!: Products;

  @Property({ columnType: 'smallint' })
  size!: number;

}
",
  "import { Entity, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';

@Entity()
export class Products {

  [PrimaryKeyProp]?: 'productId';

  @PrimaryKey()
  productId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property({ length: 255 })
  name!: string;

}
",
  "import { Entity, Index, ManyToOne, PrimaryKey, PrimaryKeyProp, Unique } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { ProductCountries } from './ProductCountries';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { SellerProducts } from './SellerProducts';

@Entity()
@Index({ name: 'product_id_idx', expression: 'create index \`product_id_idx\` on \`sales\` (\`product_id\`)')
@Unique({ name: 'product_id__size__color_id-UNIQUE', expression: 'create unique index \`product_id__size__color_id-UNIQUE\` on \`sales\` (\`product_id\`, \`color_id\`, \`size\`)')
export class Sales {

  [PrimaryKeyProp]?: 'saleId';

  @PrimaryKey()
  saleId!: number;

  @ManyToOne({ entity: () => ProductColors, fieldNames: ['color_id', 'product_id'], nullable: true, index: 'fk_sales_product_colors1_idx' })
  color?: ProductColors;

  @ManyToOne({ entity: () => ProductSizes, fieldNames: ['size', 'product_id'], nullable: true, index: 'fk_sales_product_sizes1_idx' })
  size?: ProductSizes;

  @ManyToOne({ entity: () => SellerProducts, fieldNames: ['seller_id', 'exchanged_product_id'], nullable: true, index: 'fk_sales_seller_products2_idx' })
  exchanged?: SellerProducts;

  @ManyToOne({ entity: () => ProductCountries, fieldNames: ['country', 'product_id'], index: 'fk_sales_product_countries1_idx' })
  productCountries!: ProductCountries;

  @ManyToOne({ entity: () => SellerCountries, fieldNames: ['country', 'seller_id'], index: 'fk_sales_seller_countries1_idx' })
  sellerCountries!: SellerCountries;

  @ManyToOne({ entity: () => SellerProducts, fieldNames: ['seller_id', 'product_id'], index: 'fk_sales_seller_products1_idx' })
  fkSalesSellerProducts1!: SellerProducts;

}
",
  "import { Entity, ManyToOne, PrimaryKeyProp } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Sellers } from './Sellers';

@Entity()
export class SellerCountries {

  [PrimaryKeyProp]?: ['country', 'seller'];

  @ManyToOne({ entity: () => Countries, fieldName: 'country', primary: true })
  country!: Countries;

  @ManyToOne({ entity: () => Sellers, fieldName: 'seller_id', primary: true, index: 'fk_seller_countries_sellers1_idx' })
  seller!: Sellers;

}
",
  "import { Entity, ManyToOne, PrimaryKeyProp } from '@mikro-orm/core';
import { Products } from './Products';
import { Sellers } from './Sellers';

@Entity()
export class SellerProducts {

  [PrimaryKeyProp]?: ['seller', 'product'];

  @ManyToOne({ entity: () => Sellers, fieldName: 'seller_id', primary: true })
  seller!: Sellers;

  @ManyToOne({ entity: () => Products, fieldName: 'product_id', primary: true, index: 'fk_seller_products_products1_idx' })
  product!: Products;

}
",
  "import { Collection, Entity, ManyToMany, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { Products } from './Products';
import { SellerProducts } from './SellerProducts';

@Entity()
export class Sellers {

  [PrimaryKeyProp]?: 'sellerId';

  @PrimaryKey()
  sellerId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property({ length: 255 })
  name!: string;

  @ManyToMany({ entity: () => Products, pivotTable: 'seller_products', pivotEntity: () => SellerProducts, joinColumn: 'seller_id', inverseJoinColumn: 'product_id' })
  sellerProducts = new Collection<Products>(this);

}
",
]
`;

exports[`4898 ambiguous_fk_example scalarPropertiesForRelations=never bidirectionalRelations=false identifiedReferences=false entitySchema=true: dump 1`] = `
[
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Products } from './Products';

export class Colors {
  [PrimaryKeyProp]?: 'colorId';
  colorId!: number;
  name!: string;
  productColors = new Collection<Products>(this);
}

export const ColorsSchema = new EntitySchema({
  class: Colors,
  properties: {
    colorId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255, unique: 'name_UNIQUE' },
    productColors: {
      kind: 'm:n',
      entity: () => Products,
      pivotTable: 'product_colors',
      pivotEntity: () => ProductColors,
      joinColumn: 'color_id',
      inverseJoinColumn: 'product_id',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductSizes } from './ProductSizes';
import { Sellers } from './Sellers';

export class Countries {
  [PrimaryKeyProp]?: 'country';
  country!: unknown;
  productCountries = new Collection<ProductSizes>(this);
  sellerCountries = new Collection<Sellers>(this);
}

export const CountriesSchema = new EntitySchema({
  class: Countries,
  properties: {
    country: { primary: true, type: 'unknown', columnType: 'char(2)' },
    productCountries: {
      kind: 'm:n',
      entity: () => ProductSizes,
      pivotTable: 'product_countries',
      pivotEntity: () => ProductCountries,
      joinColumn: 'country',
      inverseJoinColumn: 'product_id',
    },
    sellerCountries: {
      kind: 'm:n',
      entity: () => Sellers,
      pivotTable: 'seller_countries',
      pivotEntity: () => SellerCountries,
      joinColumn: 'country',
      inverseJoinColumn: 'seller_id',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class ProductColors {
  [PrimaryKeyProp]?: ['color', 'product'];
  color!: Colors;
  product!: Products;
}

export const ProductColorsSchema = new EntitySchema({
  class: ProductColors,
  properties: {
    color: { primary: true, kind: 'm:1', entity: () => Colors, fieldName: 'color_id' },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => Products,
      fieldName: 'product_id',
      index: 'fk_product_colors_products1_idx',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class ProductCountries {
  [PrimaryKeyProp]?: ['country', 'product'];
  country!: Countries;
  product!: ProductSizes;
}

export const ProductCountriesSchema = new EntitySchema({
  class: ProductCountries,
  properties: {
    country: { primary: true, kind: 'm:1', entity: () => Countries, fieldName: 'country' },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => ProductSizes,
      fieldName: 'product_id',
      index: 'fk_product_countries_product_sizes1_idx',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class ProductSizes {
  [PrimaryKeyProp]?: 'product';
  product!: Products;
  size!: number;
}

export const ProductSizesSchema = new EntitySchema({
  class: ProductSizes,
  properties: {
    product: { primary: true, kind: '1:1', entity: () => Products, fieldName: 'product_id' },
    size: { type: 'number', columnType: 'smallint' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Products {
  [PrimaryKeyProp]?: 'productId';
  productId!: number;
  name!: string;
}

export const ProductsSchema = new EntitySchema({
  class: Products,
  properties: {
    productId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255, unique: 'name_UNIQUE' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Sales {
  [PrimaryKeyProp]?: 'saleId';
  saleId!: number;
  color?: ProductColors;
  size?: ProductSizes;
  exchanged?: SellerProducts;
  productCountries!: ProductCountries;
  sellerCountries!: SellerCountries;
  fkSalesSellerProducts1!: SellerProducts;
}

export const SalesSchema = new EntitySchema({
  class: Sales,
  indexes: [
    { name: 'product_id_idx', expression: 'create index \`product_id_idx\` on \`sales\` (\`product_id\`)' },
  ],
  uniques: [
    { name: 'product_id__size__color_id-UNIQUE', expression: 'create unique index \`product_id__size__color_id-UNIQUE\` on \`sales\` (\`product_id\`, \`color_id\`, \`size\`)' },
  ],
  properties: {
    saleId: { primary: true, type: 'number' },
    color: {
      kind: 'm:1',
      entity: () => ProductColors,
      fieldNames: [
        'color_id',
        'product_id'
      ],
      nullable: true,
      index: 'fk_sales_product_colors1_idx',
    },
    size: {
      kind: 'm:1',
      entity: () => ProductSizes,
      fieldNames: [
        'size',
        'product_id'
      ],
      nullable: true,
      index: 'fk_sales_product_sizes1_idx',
    },
    exchanged: {
      kind: 'm:1',
      entity: () => SellerProducts,
      fieldNames: [
        'seller_id',
        'exchanged_product_id'
      ],
      nullable: true,
      index: 'fk_sales_seller_products2_idx',
    },
    productCountries: {
      kind: 'm:1',
      entity: () => ProductCountries,
      fieldNames: [
        'country',
        'product_id'
      ],
      index: 'fk_sales_product_countries1_idx',
    },
    sellerCountries: {
      kind: 'm:1',
      entity: () => SellerCountries,
      fieldNames: [
        'country',
        'seller_id'
      ],
      index: 'fk_sales_seller_countries1_idx',
    },
    fkSalesSellerProducts1: {
      kind: 'm:1',
      entity: () => SellerProducts,
      fieldNames: [
        'seller_id',
        'product_id'
      ],
      index: 'fk_sales_seller_products1_idx',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class SellerCountries {
  [PrimaryKeyProp]?: ['country', 'seller'];
  country!: Countries;
  seller!: Sellers;
}

export const SellerCountriesSchema = new EntitySchema({
  class: SellerCountries,
  properties: {
    country: { primary: true, kind: 'm:1', entity: () => Countries, fieldName: 'country' },
    seller: {
      primary: true,
      kind: 'm:1',
      entity: () => Sellers,
      fieldName: 'seller_id',
      index: 'fk_seller_countries_sellers1_idx',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class SellerProducts {
  [PrimaryKeyProp]?: ['seller', 'product'];
  seller!: Sellers;
  product!: Products;
}

export const SellerProductsSchema = new EntitySchema({
  class: SellerProducts,
  properties: {
    seller: { primary: true, kind: 'm:1', entity: () => Sellers, fieldName: 'seller_id' },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => Products,
      fieldName: 'product_id',
      index: 'fk_seller_products_products1_idx',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Products } from './Products';

export class Sellers {
  [PrimaryKeyProp]?: 'sellerId';
  sellerId!: number;
  name!: string;
  sellerProducts = new Collection<Products>(this);
}

export const SellersSchema = new EntitySchema({
  class: Sellers,
  properties: {
    sellerId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255, unique: 'name_UNIQUE' },
    sellerProducts: {
      kind: 'm:n',
      entity: () => Products,
      pivotTable: 'seller_products',
      pivotEntity: () => SellerProducts,
      joinColumn: 'seller_id',
      inverseJoinColumn: 'product_id',
    },
  },
});
",
]
`;

exports[`4898 ambiguous_fk_example scalarPropertiesForRelations=never bidirectionalRelations=false identifiedReferences=true entitySchema=false: dump 1`] = `
[
  "import { Collection, Entity, ManyToMany, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { Products } from './Products';

@Entity()
export class Colors {

  [PrimaryKeyProp]?: 'colorId';

  @PrimaryKey()
  colorId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property({ length: 255 })
  name!: string;

  @ManyToMany({ entity: () => Products, pivotTable: 'product_colors', pivotEntity: () => ProductColors, joinColumn: 'color_id', inverseJoinColumn: 'product_id' })
  productColors = new Collection<Products>(this);

}
",
  "import { Collection, Entity, ManyToMany, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductCountries } from './ProductCountries';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { Sellers } from './Sellers';

@Entity()
export class Countries {

  [PrimaryKeyProp]?: 'country';

  @PrimaryKey({ columnType: 'char(2)' })
  country!: unknown;

  @ManyToMany({ entity: () => ProductSizes, pivotTable: 'product_countries', pivotEntity: () => ProductCountries, joinColumn: 'country', inverseJoinColumn: 'product_id' })
  productCountries = new Collection<ProductSizes>(this);

  @ManyToMany({ entity: () => Sellers, pivotTable: 'seller_countries', pivotEntity: () => SellerCountries, joinColumn: 'country', inverseJoinColumn: 'seller_id' })
  sellerCountries = new Collection<Sellers>(this);

}
",
  "import { Entity, ManyToOne, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Colors } from './Colors';
import { Products } from './Products';

@Entity()
export class ProductColors {

  [PrimaryKeyProp]?: ['color', 'product'];

  @ManyToOne({ entity: () => Colors, ref: true, fieldName: 'color_id', primary: true })
  color!: Ref<Colors>;

  @ManyToOne({ entity: () => Products, ref: true, fieldName: 'product_id', primary: true, index: 'fk_product_colors_products1_idx' })
  product!: Ref<Products>;

}
",
  "import { Entity, ManyToOne, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { ProductSizes } from './ProductSizes';

@Entity()
export class ProductCountries {

  [PrimaryKeyProp]?: ['country', 'product'];

  @ManyToOne({ entity: () => Countries, ref: true, fieldName: 'country', primary: true })
  country!: Ref<Countries>;

  @ManyToOne({ entity: () => ProductSizes, ref: true, fieldName: 'product_id', primary: true, index: 'fk_product_countries_product_sizes1_idx' })
  product!: Ref<ProductSizes>;

}
",
  "import { Entity, OneToOne, PrimaryKeyProp, Property, Ref, Unique } from '@mikro-orm/core';
import { Products } from './Products';

@Entity()
@Unique({ name: 'size__product_id-UNIQUE', properties: ['size', 'product'] })
export class ProductSizes {

  [PrimaryKeyProp]?: 'product';

  @OneToOne({ entity: () => Products, ref: true, fieldName: 'product_id', primary: true })
  product!: Ref<Products>;

  @Property({ columnType: 'smallint' })
  size!: number;

}
",
  "import { Entity, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';

@Entity()
export class Products {

  [PrimaryKeyProp]?: 'productId';

  @PrimaryKey()
  productId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property({ length: 255 })
  name!: string;

}
",
  "import { Entity, Index, ManyToOne, PrimaryKey, PrimaryKeyProp, Ref, Unique } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { ProductCountries } from './ProductCountries';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { SellerProducts } from './SellerProducts';

@Entity()
@Index({ name: 'product_id_idx', expression: 'create index \`product_id_idx\` on \`sales\` (\`product_id\`)')
@Unique({ name: 'product_id__size__color_id-UNIQUE', expression: 'create unique index \`product_id__size__color_id-UNIQUE\` on \`sales\` (\`product_id\`, \`color_id\`, \`size\`)')
export class Sales {

  [PrimaryKeyProp]?: 'saleId';

  @PrimaryKey()
  saleId!: number;

  @ManyToOne({ entity: () => ProductColors, ref: true, fieldNames: ['color_id', 'product_id'], nullable: true, index: 'fk_sales_product_colors1_idx' })
  color?: Ref<ProductColors>;

  @ManyToOne({ entity: () => ProductSizes, ref: true, fieldNames: ['size', 'product_id'], nullable: true, index: 'fk_sales_product_sizes1_idx' })
  size?: Ref<ProductSizes>;

  @ManyToOne({ entity: () => SellerProducts, ref: true, fieldNames: ['seller_id', 'exchanged_product_id'], nullable: true, index: 'fk_sales_seller_products2_idx' })
  exchanged?: Ref<SellerProducts>;

  @ManyToOne({ entity: () => ProductCountries, ref: true, fieldNames: ['country', 'product_id'], index: 'fk_sales_product_countries1_idx' })
  productCountries!: Ref<ProductCountries>;

  @ManyToOne({ entity: () => SellerCountries, ref: true, fieldNames: ['country', 'seller_id'], index: 'fk_sales_seller_countries1_idx' })
  sellerCountries!: Ref<SellerCountries>;

  @ManyToOne({ entity: () => SellerProducts, ref: true, fieldNames: ['seller_id', 'product_id'], index: 'fk_sales_seller_products1_idx' })
  fkSalesSellerProducts1!: Ref<SellerProducts>;

}
",
  "import { Entity, ManyToOne, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Sellers } from './Sellers';

@Entity()
export class SellerCountries {

  [PrimaryKeyProp]?: ['country', 'seller'];

  @ManyToOne({ entity: () => Countries, ref: true, fieldName: 'country', primary: true })
  country!: Ref<Countries>;

  @ManyToOne({ entity: () => Sellers, ref: true, fieldName: 'seller_id', primary: true, index: 'fk_seller_countries_sellers1_idx' })
  seller!: Ref<Sellers>;

}
",
  "import { Entity, ManyToOne, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Products } from './Products';
import { Sellers } from './Sellers';

@Entity()
export class SellerProducts {

  [PrimaryKeyProp]?: ['seller', 'product'];

  @ManyToOne({ entity: () => Sellers, ref: true, fieldName: 'seller_id', primary: true })
  seller!: Ref<Sellers>;

  @ManyToOne({ entity: () => Products, ref: true, fieldName: 'product_id', primary: true, index: 'fk_seller_products_products1_idx' })
  product!: Ref<Products>;

}
",
  "import { Collection, Entity, ManyToMany, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { Products } from './Products';
import { SellerProducts } from './SellerProducts';

@Entity()
export class Sellers {

  [PrimaryKeyProp]?: 'sellerId';

  @PrimaryKey()
  sellerId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property({ length: 255 })
  name!: string;

  @ManyToMany({ entity: () => Products, pivotTable: 'seller_products', pivotEntity: () => SellerProducts, joinColumn: 'seller_id', inverseJoinColumn: 'product_id' })
  sellerProducts = new Collection<Products>(this);

}
",
]
`;

exports[`4898 ambiguous_fk_example scalarPropertiesForRelations=never bidirectionalRelations=false identifiedReferences=true entitySchema=true: dump 1`] = `
[
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Products } from './Products';

export class Colors {
  [PrimaryKeyProp]?: 'colorId';
  colorId!: number;
  name!: string;
  productColors = new Collection<Products>(this);
}

export const ColorsSchema = new EntitySchema({
  class: Colors,
  properties: {
    colorId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255, unique: 'name_UNIQUE' },
    productColors: {
      kind: 'm:n',
      entity: () => Products,
      pivotTable: 'product_colors',
      pivotEntity: () => ProductColors,
      joinColumn: 'color_id',
      inverseJoinColumn: 'product_id',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductSizes } from './ProductSizes';
import { Sellers } from './Sellers';

export class Countries {
  [PrimaryKeyProp]?: 'country';
  country!: unknown;
  productCountries = new Collection<ProductSizes>(this);
  sellerCountries = new Collection<Sellers>(this);
}

export const CountriesSchema = new EntitySchema({
  class: Countries,
  properties: {
    country: { primary: true, type: 'unknown', columnType: 'char(2)' },
    productCountries: {
      kind: 'm:n',
      entity: () => ProductSizes,
      pivotTable: 'product_countries',
      pivotEntity: () => ProductCountries,
      joinColumn: 'country',
      inverseJoinColumn: 'product_id',
    },
    sellerCountries: {
      kind: 'm:n',
      entity: () => Sellers,
      pivotTable: 'seller_countries',
      pivotEntity: () => SellerCountries,
      joinColumn: 'country',
      inverseJoinColumn: 'seller_id',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Colors } from './Colors';
import { Products } from './Products';

export class ProductColors {
  [PrimaryKeyProp]?: ['color', 'product'];
  color!: Ref<Colors>;
  product!: Ref<Products>;
}

export const ProductColorsSchema = new EntitySchema({
  class: ProductColors,
  properties: {
    color: {
      primary: true,
      kind: 'm:1',
      entity: () => Colors,
      ref: true,
      fieldName: 'color_id',
    },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => Products,
      ref: true,
      fieldName: 'product_id',
      index: 'fk_product_colors_products1_idx',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { ProductSizes } from './ProductSizes';

export class ProductCountries {
  [PrimaryKeyProp]?: ['country', 'product'];
  country!: Ref<Countries>;
  product!: Ref<ProductSizes>;
}

export const ProductCountriesSchema = new EntitySchema({
  class: ProductCountries,
  properties: {
    country: {
      primary: true,
      kind: 'm:1',
      entity: () => Countries,
      ref: true,
      fieldName: 'country',
    },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => ProductSizes,
      ref: true,
      fieldName: 'product_id',
      index: 'fk_product_countries_product_sizes1_idx',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Products } from './Products';

export class ProductSizes {
  [PrimaryKeyProp]?: 'product';
  product!: Ref<Products>;
  size!: number;
}

export const ProductSizesSchema = new EntitySchema({
  class: ProductSizes,
  properties: {
    product: {
      primary: true,
      kind: '1:1',
      entity: () => Products,
      ref: true,
      fieldName: 'product_id',
    },
    size: { type: 'number', columnType: 'smallint' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Products {
  [PrimaryKeyProp]?: 'productId';
  productId!: number;
  name!: string;
}

export const ProductsSchema = new EntitySchema({
  class: Products,
  properties: {
    productId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255, unique: 'name_UNIQUE' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { ProductCountries } from './ProductCountries';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { SellerProducts } from './SellerProducts';

export class Sales {
  [PrimaryKeyProp]?: 'saleId';
  saleId!: number;
  color?: Ref<ProductColors>;
  size?: Ref<ProductSizes>;
  exchanged?: Ref<SellerProducts>;
  productCountries!: Ref<ProductCountries>;
  sellerCountries!: Ref<SellerCountries>;
  fkSalesSellerProducts1!: Ref<SellerProducts>;
}

export const SalesSchema = new EntitySchema({
  class: Sales,
  indexes: [
    { name: 'product_id_idx', expression: 'create index \`product_id_idx\` on \`sales\` (\`product_id\`)' },
  ],
  uniques: [
    { name: 'product_id__size__color_id-UNIQUE', expression: 'create unique index \`product_id__size__color_id-UNIQUE\` on \`sales\` (\`product_id\`, \`color_id\`, \`size\`)' },
  ],
  properties: {
    saleId: { primary: true, type: 'number' },
    color: {
      kind: 'm:1',
      entity: () => ProductColors,
      ref: true,
      fieldNames: [
        'color_id',
        'product_id'
      ],
      nullable: true,
      index: 'fk_sales_product_colors1_idx',
    },
    size: {
      kind: 'm:1',
      entity: () => ProductSizes,
      ref: true,
      fieldNames: [
        'size',
        'product_id'
      ],
      nullable: true,
      index: 'fk_sales_product_sizes1_idx',
    },
    exchanged: {
      kind: 'm:1',
      entity: () => SellerProducts,
      ref: true,
      fieldNames: [
        'seller_id',
        'exchanged_product_id'
      ],
      nullable: true,
      index: 'fk_sales_seller_products2_idx',
    },
    productCountries: {
      kind: 'm:1',
      entity: () => ProductCountries,
      ref: true,
      fieldNames: [
        'country',
        'product_id'
      ],
      index: 'fk_sales_product_countries1_idx',
    },
    sellerCountries: {
      kind: 'm:1',
      entity: () => SellerCountries,
      ref: true,
      fieldNames: [
        'country',
        'seller_id'
      ],
      index: 'fk_sales_seller_countries1_idx',
    },
    fkSalesSellerProducts1: {
      kind: 'm:1',
      entity: () => SellerProducts,
      ref: true,
      fieldNames: [
        'seller_id',
        'product_id'
      ],
      index: 'fk_sales_seller_products1_idx',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Sellers } from './Sellers';

export class SellerCountries {
  [PrimaryKeyProp]?: ['country', 'seller'];
  country!: Ref<Countries>;
  seller!: Ref<Sellers>;
}

export const SellerCountriesSchema = new EntitySchema({
  class: SellerCountries,
  properties: {
    country: {
      primary: true,
      kind: 'm:1',
      entity: () => Countries,
      ref: true,
      fieldName: 'country',
    },
    seller: {
      primary: true,
      kind: 'm:1',
      entity: () => Sellers,
      ref: true,
      fieldName: 'seller_id',
      index: 'fk_seller_countries_sellers1_idx',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Products } from './Products';
import { Sellers } from './Sellers';

export class SellerProducts {
  [PrimaryKeyProp]?: ['seller', 'product'];
  seller!: Ref<Sellers>;
  product!: Ref<Products>;
}

export const SellerProductsSchema = new EntitySchema({
  class: SellerProducts,
  properties: {
    seller: {
      primary: true,
      kind: 'm:1',
      entity: () => Sellers,
      ref: true,
      fieldName: 'seller_id',
    },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => Products,
      ref: true,
      fieldName: 'product_id',
      index: 'fk_seller_products_products1_idx',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Products } from './Products';

export class Sellers {
  [PrimaryKeyProp]?: 'sellerId';
  sellerId!: number;
  name!: string;
  sellerProducts = new Collection<Products>(this);
}

export const SellersSchema = new EntitySchema({
  class: Sellers,
  properties: {
    sellerId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255, unique: 'name_UNIQUE' },
    sellerProducts: {
      kind: 'm:n',
      entity: () => Products,
      pivotTable: 'seller_products',
      pivotEntity: () => SellerProducts,
      joinColumn: 'seller_id',
      inverseJoinColumn: 'product_id',
    },
  },
});
",
]
`;

exports[`4898 ambiguous_fk_example scalarPropertiesForRelations=never bidirectionalRelations=true identifiedReferences=false entitySchema=false: dump 1`] = `
[
  "import { Collection, Entity, ManyToMany, OneToMany, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { Products } from './Products';

@Entity()
export class Colors {

  [PrimaryKeyProp]?: 'colorId';

  @PrimaryKey()
  colorId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property({ length: 255 })
  name!: string;

  @ManyToMany({ entity: () => Products, pivotTable: 'product_colors', pivotEntity: () => ProductColors, joinColumn: 'color_id', inverseJoinColumn: 'product_id' })
  productColors = new Collection<Products>(this);

  @OneToMany({ entity: () => ProductColors, mappedBy: 'color' })
  colorInverse = new Collection<ProductColors>(this);

}
",
  "import { Collection, Entity, ManyToMany, OneToMany, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductCountries } from './ProductCountries';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { Sellers } from './Sellers';

@Entity()
export class Countries {

  [PrimaryKeyProp]?: 'country';

  @PrimaryKey({ columnType: 'char(2)' })
  country!: unknown;

  @ManyToMany({ entity: () => ProductSizes, pivotTable: 'product_countries', pivotEntity: () => ProductCountries, joinColumn: 'country', inverseJoinColumn: 'product_id' })
  productCountries = new Collection<ProductSizes>(this);

  @ManyToMany({ entity: () => Sellers, pivotTable: 'seller_countries', pivotEntity: () => SellerCountries, joinColumn: 'country', inverseJoinColumn: 'seller_id' })
  sellerCountries = new Collection<Sellers>(this);

  @OneToMany({ entity: () => SellerCountries, mappedBy: 'country' })
  countryInverse = new Collection<SellerCountries>(this);

}
",
  "import { Collection, Entity, ManyToOne, OneToMany, PrimaryKeyProp } from '@mikro-orm/core';
import { Colors } from './Colors';
import { Products } from './Products';
import { Sales } from './Sales';

@Entity()
export class ProductColors {

  [PrimaryKeyProp]?: ['color', 'product'];

  @ManyToOne({ entity: () => Colors, fieldName: 'color_id', primary: true })
  color!: Colors;

  @ManyToOne({ entity: () => Products, fieldName: 'product_id', primary: true, index: 'fk_product_colors_products1_idx' })
  product!: Products;

  @OneToMany({ entity: () => Sales, mappedBy: 'color' })
  colorInverse = new Collection<Sales>(this);

}
",
  "import { Collection, Entity, ManyToOne, OneToMany, PrimaryKeyProp } from '@mikro-orm/core';
import { Countries } from './Countries';
import { ProductSizes } from './ProductSizes';
import { Sales } from './Sales';

@Entity()
export class ProductCountries {

  [PrimaryKeyProp]?: ['country', 'product'];

  @ManyToOne({ entity: () => Countries, fieldName: 'country', primary: true })
  country!: Countries;

  @ManyToOne({ entity: () => ProductSizes, fieldName: 'product_id', primary: true, index: 'fk_product_countries_product_sizes1_idx' })
  product!: ProductSizes;

  @OneToMany({ entity: () => Sales, mappedBy: 'productCountries' })
  productCountriesInverse = new Collection<Sales>(this);

}
",
  "import { Collection, Entity, ManyToMany, OneToMany, OneToOne, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { Countries } from './Countries';
import { ProductCountries } from './ProductCountries';
import { Products } from './Products';
import { Sales } from './Sales';

@Entity()
@Unique({ name: 'size__product_id-UNIQUE', properties: ['size', 'product'] })
export class ProductSizes {

  [PrimaryKeyProp]?: 'product';

  @OneToOne({ entity: () => Products, fieldName: 'product_id', primary: true })
  product!: Products;

  @Property({ columnType: 'smallint' })
  size!: number;

  @ManyToMany({ entity: () => Countries, mappedBy: 'productCountries' })
  productCountriesInverse = new Collection<Countries>(this);

  @OneToMany({ entity: () => ProductCountries, mappedBy: 'product' })
  productInverse = new Collection<ProductCountries>(this);

  @OneToMany({ entity: () => Sales, mappedBy: 'size' })
  sizeInverse = new Collection<Sales>(this);

}
",
  "import { Collection, Entity, ManyToMany, OneToMany, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { Colors } from './Colors';
import { SellerProducts } from './SellerProducts';
import { Sellers } from './Sellers';

@Entity()
export class Products {

  [PrimaryKeyProp]?: 'productId';

  @PrimaryKey()
  productId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property({ length: 255 })
  name!: string;

  @ManyToMany({ entity: () => Colors, mappedBy: 'productColors' })
  productColorsInverse = new Collection<Colors>(this);

  @OneToMany({ entity: () => SellerProducts, mappedBy: 'product' })
  productInverse = new Collection<SellerProducts>(this);

  @ManyToMany({ entity: () => Sellers, mappedBy: 'sellerProducts' })
  sellerProductsInverse = new Collection<Sellers>(this);

}
",
  "import { Entity, Index, ManyToOne, PrimaryKey, PrimaryKeyProp, Unique } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { ProductCountries } from './ProductCountries';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { SellerProducts } from './SellerProducts';

@Entity()
@Index({ name: 'product_id_idx', expression: 'create index \`product_id_idx\` on \`sales\` (\`product_id\`)')
@Unique({ name: 'product_id__size__color_id-UNIQUE', expression: 'create unique index \`product_id__size__color_id-UNIQUE\` on \`sales\` (\`product_id\`, \`color_id\`, \`size\`)')
export class Sales {

  [PrimaryKeyProp]?: 'saleId';

  @PrimaryKey()
  saleId!: number;

  @ManyToOne({ entity: () => ProductColors, fieldNames: ['color_id', 'product_id'], nullable: true, index: 'fk_sales_product_colors1_idx' })
  color?: ProductColors;

  @ManyToOne({ entity: () => ProductSizes, fieldNames: ['size', 'product_id'], nullable: true, index: 'fk_sales_product_sizes1_idx' })
  size?: ProductSizes;

  @ManyToOne({ entity: () => SellerProducts, fieldNames: ['seller_id', 'exchanged_product_id'], nullable: true, index: 'fk_sales_seller_products2_idx' })
  exchanged?: SellerProducts;

  @ManyToOne({ entity: () => ProductCountries, fieldNames: ['country', 'product_id'], index: 'fk_sales_product_countries1_idx' })
  productCountries!: ProductCountries;

  @ManyToOne({ entity: () => SellerCountries, fieldNames: ['country', 'seller_id'], index: 'fk_sales_seller_countries1_idx' })
  sellerCountries!: SellerCountries;

  @ManyToOne({ entity: () => SellerProducts, fieldNames: ['seller_id', 'product_id'], index: 'fk_sales_seller_products1_idx' })
  fkSalesSellerProducts1!: SellerProducts;

}
",
  "import { Collection, Entity, ManyToOne, OneToMany, PrimaryKeyProp } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Sales } from './Sales';
import { Sellers } from './Sellers';

@Entity()
export class SellerCountries {

  [PrimaryKeyProp]?: ['country', 'seller'];

  @ManyToOne({ entity: () => Countries, fieldName: 'country', primary: true })
  country!: Countries;

  @ManyToOne({ entity: () => Sellers, fieldName: 'seller_id', primary: true, index: 'fk_seller_countries_sellers1_idx' })
  seller!: Sellers;

  @OneToMany({ entity: () => Sales, mappedBy: 'sellerCountries' })
  sellerCountriesInverse = new Collection<Sales>(this);

}
",
  "import { Collection, Entity, ManyToOne, OneToMany, PrimaryKeyProp } from '@mikro-orm/core';
import { Products } from './Products';
import { Sales } from './Sales';
import { Sellers } from './Sellers';

@Entity()
export class SellerProducts {

  [PrimaryKeyProp]?: ['seller', 'product'];

  @ManyToOne({ entity: () => Sellers, fieldName: 'seller_id', primary: true })
  seller!: Sellers;

  @ManyToOne({ entity: () => Products, fieldName: 'product_id', primary: true, index: 'fk_seller_products_products1_idx' })
  product!: Products;

  @OneToMany({ entity: () => Sales, mappedBy: 'exchanged' })
  exchangedInverse = new Collection<Sales>(this);

  @OneToMany({ entity: () => Sales, mappedBy: 'fkSalesSellerProducts1' })
  fkSalesSellerProducts1Inverse = new Collection<Sales>(this);

}
",
  "import { Collection, Entity, ManyToMany, OneToMany, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Products } from './Products';
import { SellerProducts } from './SellerProducts';

@Entity()
export class Sellers {

  [PrimaryKeyProp]?: 'sellerId';

  @PrimaryKey()
  sellerId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property({ length: 255 })
  name!: string;

  @ManyToMany({ entity: () => Products, pivotTable: 'seller_products', pivotEntity: () => SellerProducts, joinColumn: 'seller_id', inverseJoinColumn: 'product_id' })
  sellerProducts = new Collection<Products>(this);

  @ManyToMany({ entity: () => Countries, mappedBy: 'sellerCountries' })
  sellerCountriesInverse = new Collection<Countries>(this);

  @OneToMany({ entity: () => SellerProducts, mappedBy: 'seller' })
  sellerInverse = new Collection<SellerProducts>(this);

}
",
]
`;

exports[`4898 ambiguous_fk_example scalarPropertiesForRelations=never bidirectionalRelations=true identifiedReferences=false entitySchema=true: dump 1`] = `
[
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { Products } from './Products';

export class Colors {
  [PrimaryKeyProp]?: 'colorId';
  colorId!: number;
  name!: string;
  productColors = new Collection<Products>(this);
  colorInverse = new Collection<ProductColors>(this);
}

export const ColorsSchema = new EntitySchema({
  class: Colors,
  properties: {
    colorId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255, unique: 'name_UNIQUE' },
    productColors: {
      kind: 'm:n',
      entity: () => Products,
      pivotTable: 'product_colors',
      pivotEntity: () => ProductColors,
      joinColumn: 'color_id',
      inverseJoinColumn: 'product_id',
    },
    colorInverse: { kind: '1:m', entity: () => ProductColors, mappedBy: 'color' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { Sellers } from './Sellers';

export class Countries {
  [PrimaryKeyProp]?: 'country';
  country!: unknown;
  productCountries = new Collection<ProductSizes>(this);
  sellerCountries = new Collection<Sellers>(this);
  countryInverse = new Collection<SellerCountries>(this);
}

export const CountriesSchema = new EntitySchema({
  class: Countries,
  properties: {
    country: { primary: true, type: 'unknown', columnType: 'char(2)' },
    productCountries: {
      kind: 'm:n',
      entity: () => ProductSizes,
      pivotTable: 'product_countries',
      pivotEntity: () => ProductCountries,
      joinColumn: 'country',
      inverseJoinColumn: 'product_id',
    },
    sellerCountries: {
      kind: 'm:n',
      entity: () => Sellers,
      pivotTable: 'seller_countries',
      pivotEntity: () => SellerCountries,
      joinColumn: 'country',
      inverseJoinColumn: 'seller_id',
    },
    countryInverse: { kind: '1:m', entity: () => SellerCountries, mappedBy: 'country' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Sales } from './Sales';

export class ProductColors {
  [PrimaryKeyProp]?: ['color', 'product'];
  color!: Colors;
  product!: Products;
  colorInverse = new Collection<Sales>(this);
}

export const ProductColorsSchema = new EntitySchema({
  class: ProductColors,
  properties: {
    color: { primary: true, kind: 'm:1', entity: () => Colors, fieldName: 'color_id' },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => Products,
      fieldName: 'product_id',
      index: 'fk_product_colors_products1_idx',
    },
    colorInverse: { kind: '1:m', entity: () => Sales, mappedBy: 'color' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Sales } from './Sales';

export class ProductCountries {
  [PrimaryKeyProp]?: ['country', 'product'];
  country!: Countries;
  product!: ProductSizes;
  productCountriesInverse = new Collection<Sales>(this);
}

export const ProductCountriesSchema = new EntitySchema({
  class: ProductCountries,
  properties: {
    country: { primary: true, kind: 'm:1', entity: () => Countries, fieldName: 'country' },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => ProductSizes,
      fieldName: 'product_id',
      index: 'fk_product_countries_product_sizes1_idx',
    },
    productCountriesInverse: { kind: '1:m', entity: () => Sales, mappedBy: 'productCountries' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Countries } from './Countries';
import { ProductCountries } from './ProductCountries';
import { Sales } from './Sales';

export class ProductSizes {
  [PrimaryKeyProp]?: 'product';
  product!: Products;
  size!: number;
  productCountriesInverse = new Collection<Countries>(this);
  productInverse = new Collection<ProductCountries>(this);
  sizeInverse = new Collection<Sales>(this);
}

export const ProductSizesSchema = new EntitySchema({
  class: ProductSizes,
  properties: {
    product: { primary: true, kind: '1:1', entity: () => Products, fieldName: 'product_id' },
    size: { type: 'number', columnType: 'smallint' },
    productCountriesInverse: { kind: 'm:n', entity: () => Countries, mappedBy: 'productCountries' },
    productInverse: { kind: '1:m', entity: () => ProductCountries, mappedBy: 'product' },
    sizeInverse: { kind: '1:m', entity: () => Sales, mappedBy: 'size' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Colors } from './Colors';
import { SellerProducts } from './SellerProducts';
import { Sellers } from './Sellers';

export class Products {
  [PrimaryKeyProp]?: 'productId';
  productId!: number;
  name!: string;
  productColorsInverse = new Collection<Colors>(this);
  productInverse = new Collection<SellerProducts>(this);
  sellerProductsInverse = new Collection<Sellers>(this);
}

export const ProductsSchema = new EntitySchema({
  class: Products,
  properties: {
    productId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255, unique: 'name_UNIQUE' },
    productColorsInverse: { kind: 'm:n', entity: () => Colors, mappedBy: 'productColors' },
    productInverse: { kind: '1:m', entity: () => SellerProducts, mappedBy: 'product' },
    sellerProductsInverse: { kind: 'm:n', entity: () => Sellers, mappedBy: 'sellerProducts' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Sales {
  [PrimaryKeyProp]?: 'saleId';
  saleId!: number;
  color?: ProductColors;
  size?: ProductSizes;
  exchanged?: SellerProducts;
  productCountries!: ProductCountries;
  sellerCountries!: SellerCountries;
  fkSalesSellerProducts1!: SellerProducts;
}

export const SalesSchema = new EntitySchema({
  class: Sales,
  indexes: [
    { name: 'product_id_idx', expression: 'create index \`product_id_idx\` on \`sales\` (\`product_id\`)' },
  ],
  uniques: [
    { name: 'product_id__size__color_id-UNIQUE', expression: 'create unique index \`product_id__size__color_id-UNIQUE\` on \`sales\` (\`product_id\`, \`color_id\`, \`size\`)' },
  ],
  properties: {
    saleId: { primary: true, type: 'number' },
    color: {
      kind: 'm:1',
      entity: () => ProductColors,
      fieldNames: [
        'color_id',
        'product_id'
      ],
      nullable: true,
      index: 'fk_sales_product_colors1_idx',
    },
    size: {
      kind: 'm:1',
      entity: () => ProductSizes,
      fieldNames: [
        'size',
        'product_id'
      ],
      nullable: true,
      index: 'fk_sales_product_sizes1_idx',
    },
    exchanged: {
      kind: 'm:1',
      entity: () => SellerProducts,
      fieldNames: [
        'seller_id',
        'exchanged_product_id'
      ],
      nullable: true,
      index: 'fk_sales_seller_products2_idx',
    },
    productCountries: {
      kind: 'm:1',
      entity: () => ProductCountries,
      fieldNames: [
        'country',
        'product_id'
      ],
      index: 'fk_sales_product_countries1_idx',
    },
    sellerCountries: {
      kind: 'm:1',
      entity: () => SellerCountries,
      fieldNames: [
        'country',
        'seller_id'
      ],
      index: 'fk_sales_seller_countries1_idx',
    },
    fkSalesSellerProducts1: {
      kind: 'm:1',
      entity: () => SellerProducts,
      fieldNames: [
        'seller_id',
        'product_id'
      ],
      index: 'fk_sales_seller_products1_idx',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Sales } from './Sales';

export class SellerCountries {
  [PrimaryKeyProp]?: ['country', 'seller'];
  country!: Countries;
  seller!: Sellers;
  sellerCountriesInverse = new Collection<Sales>(this);
}

export const SellerCountriesSchema = new EntitySchema({
  class: SellerCountries,
  properties: {
    country: { primary: true, kind: 'm:1', entity: () => Countries, fieldName: 'country' },
    seller: {
      primary: true,
      kind: 'm:1',
      entity: () => Sellers,
      fieldName: 'seller_id',
      index: 'fk_seller_countries_sellers1_idx',
    },
    sellerCountriesInverse: { kind: '1:m', entity: () => Sales, mappedBy: 'sellerCountries' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Sales } from './Sales';

export class SellerProducts {
  [PrimaryKeyProp]?: ['seller', 'product'];
  seller!: Sellers;
  product!: Products;
  exchangedInverse = new Collection<Sales>(this);
  fkSalesSellerProducts1Inverse = new Collection<Sales>(this);
}

export const SellerProductsSchema = new EntitySchema({
  class: SellerProducts,
  properties: {
    seller: { primary: true, kind: 'm:1', entity: () => Sellers, fieldName: 'seller_id' },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => Products,
      fieldName: 'product_id',
      index: 'fk_seller_products_products1_idx',
    },
    exchangedInverse: { kind: '1:m', entity: () => Sales, mappedBy: 'exchanged' },
    fkSalesSellerProducts1Inverse: { kind: '1:m', entity: () => Sales, mappedBy: 'fkSalesSellerProducts1' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Products } from './Products';
import { SellerProducts } from './SellerProducts';

export class Sellers {
  [PrimaryKeyProp]?: 'sellerId';
  sellerId!: number;
  name!: string;
  sellerProducts = new Collection<Products>(this);
  sellerCountriesInverse = new Collection<Countries>(this);
  sellerInverse = new Collection<SellerProducts>(this);
}

export const SellersSchema = new EntitySchema({
  class: Sellers,
  properties: {
    sellerId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255, unique: 'name_UNIQUE' },
    sellerProducts: {
      kind: 'm:n',
      entity: () => Products,
      pivotTable: 'seller_products',
      pivotEntity: () => SellerProducts,
      joinColumn: 'seller_id',
      inverseJoinColumn: 'product_id',
    },
    sellerCountriesInverse: { kind: 'm:n', entity: () => Countries, mappedBy: 'sellerCountries' },
    sellerInverse: { kind: '1:m', entity: () => SellerProducts, mappedBy: 'seller' },
  },
});
",
]
`;

exports[`4898 ambiguous_fk_example scalarPropertiesForRelations=never bidirectionalRelations=true identifiedReferences=true entitySchema=false: dump 1`] = `
[
  "import { Collection, Entity, ManyToMany, OneToMany, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { Products } from './Products';

@Entity()
export class Colors {

  [PrimaryKeyProp]?: 'colorId';

  @PrimaryKey()
  colorId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property({ length: 255 })
  name!: string;

  @ManyToMany({ entity: () => Products, pivotTable: 'product_colors', pivotEntity: () => ProductColors, joinColumn: 'color_id', inverseJoinColumn: 'product_id' })
  productColors = new Collection<Products>(this);

  @OneToMany({ entity: () => ProductColors, mappedBy: 'color' })
  colorInverse = new Collection<ProductColors>(this);

}
",
  "import { Collection, Entity, ManyToMany, OneToMany, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductCountries } from './ProductCountries';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { Sellers } from './Sellers';

@Entity()
export class Countries {

  [PrimaryKeyProp]?: 'country';

  @PrimaryKey({ columnType: 'char(2)' })
  country!: unknown;

  @ManyToMany({ entity: () => ProductSizes, pivotTable: 'product_countries', pivotEntity: () => ProductCountries, joinColumn: 'country', inverseJoinColumn: 'product_id' })
  productCountries = new Collection<ProductSizes>(this);

  @ManyToMany({ entity: () => Sellers, pivotTable: 'seller_countries', pivotEntity: () => SellerCountries, joinColumn: 'country', inverseJoinColumn: 'seller_id' })
  sellerCountries = new Collection<Sellers>(this);

  @OneToMany({ entity: () => SellerCountries, mappedBy: 'country' })
  countryInverse = new Collection<SellerCountries>(this);

}
",
  "import { Collection, Entity, ManyToOne, OneToMany, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Colors } from './Colors';
import { Products } from './Products';
import { Sales } from './Sales';

@Entity()
export class ProductColors {

  [PrimaryKeyProp]?: ['color', 'product'];

  @ManyToOne({ entity: () => Colors, ref: true, fieldName: 'color_id', primary: true })
  color!: Ref<Colors>;

  @ManyToOne({ entity: () => Products, ref: true, fieldName: 'product_id', primary: true, index: 'fk_product_colors_products1_idx' })
  product!: Ref<Products>;

  @OneToMany({ entity: () => Sales, mappedBy: 'color' })
  colorInverse = new Collection<Sales>(this);

}
",
  "import { Collection, Entity, ManyToOne, OneToMany, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { ProductSizes } from './ProductSizes';
import { Sales } from './Sales';

@Entity()
export class ProductCountries {

  [PrimaryKeyProp]?: ['country', 'product'];

  @ManyToOne({ entity: () => Countries, ref: true, fieldName: 'country', primary: true })
  country!: Ref<Countries>;

  @ManyToOne({ entity: () => ProductSizes, ref: true, fieldName: 'product_id', primary: true, index: 'fk_product_countries_product_sizes1_idx' })
  product!: Ref<ProductSizes>;

  @OneToMany({ entity: () => Sales, mappedBy: 'productCountries' })
  productCountriesInverse = new Collection<Sales>(this);

}
",
  "import { Collection, Entity, ManyToMany, OneToMany, OneToOne, PrimaryKeyProp, Property, Ref, Unique } from '@mikro-orm/core';
import { Countries } from './Countries';
import { ProductCountries } from './ProductCountries';
import { Products } from './Products';
import { Sales } from './Sales';

@Entity()
@Unique({ name: 'size__product_id-UNIQUE', properties: ['size', 'product'] })
export class ProductSizes {

  [PrimaryKeyProp]?: 'product';

  @OneToOne({ entity: () => Products, ref: true, fieldName: 'product_id', primary: true })
  product!: Ref<Products>;

  @Property({ columnType: 'smallint' })
  size!: number;

  @ManyToMany({ entity: () => Countries, mappedBy: 'productCountries' })
  productCountriesInverse = new Collection<Countries>(this);

  @OneToMany({ entity: () => ProductCountries, mappedBy: 'product' })
  productInverse = new Collection<ProductCountries>(this);

  @OneToMany({ entity: () => Sales, mappedBy: 'size' })
  sizeInverse = new Collection<Sales>(this);

}
",
  "import { Collection, Entity, ManyToMany, OneToMany, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { Colors } from './Colors';
import { SellerProducts } from './SellerProducts';
import { Sellers } from './Sellers';

@Entity()
export class Products {

  [PrimaryKeyProp]?: 'productId';

  @PrimaryKey()
  productId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property({ length: 255 })
  name!: string;

  @ManyToMany({ entity: () => Colors, mappedBy: 'productColors' })
  productColorsInverse = new Collection<Colors>(this);

  @OneToMany({ entity: () => SellerProducts, mappedBy: 'product' })
  productInverse = new Collection<SellerProducts>(this);

  @ManyToMany({ entity: () => Sellers, mappedBy: 'sellerProducts' })
  sellerProductsInverse = new Collection<Sellers>(this);

}
",
  "import { Entity, Index, ManyToOne, PrimaryKey, PrimaryKeyProp, Ref, Unique } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { ProductCountries } from './ProductCountries';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { SellerProducts } from './SellerProducts';

@Entity()
@Index({ name: 'product_id_idx', expression: 'create index \`product_id_idx\` on \`sales\` (\`product_id\`)')
@Unique({ name: 'product_id__size__color_id-UNIQUE', expression: 'create unique index \`product_id__size__color_id-UNIQUE\` on \`sales\` (\`product_id\`, \`color_id\`, \`size\`)')
export class Sales {

  [PrimaryKeyProp]?: 'saleId';

  @PrimaryKey()
  saleId!: number;

  @ManyToOne({ entity: () => ProductColors, ref: true, fieldNames: ['color_id', 'product_id'], nullable: true, index: 'fk_sales_product_colors1_idx' })
  color?: Ref<ProductColors>;

  @ManyToOne({ entity: () => ProductSizes, ref: true, fieldNames: ['size', 'product_id'], nullable: true, index: 'fk_sales_product_sizes1_idx' })
  size?: Ref<ProductSizes>;

  @ManyToOne({ entity: () => SellerProducts, ref: true, fieldNames: ['seller_id', 'exchanged_product_id'], nullable: true, index: 'fk_sales_seller_products2_idx' })
  exchanged?: Ref<SellerProducts>;

  @ManyToOne({ entity: () => ProductCountries, ref: true, fieldNames: ['country', 'product_id'], index: 'fk_sales_product_countries1_idx' })
  productCountries!: Ref<ProductCountries>;

  @ManyToOne({ entity: () => SellerCountries, ref: true, fieldNames: ['country', 'seller_id'], index: 'fk_sales_seller_countries1_idx' })
  sellerCountries!: Ref<SellerCountries>;

  @ManyToOne({ entity: () => SellerProducts, ref: true, fieldNames: ['seller_id', 'product_id'], index: 'fk_sales_seller_products1_idx' })
  fkSalesSellerProducts1!: Ref<SellerProducts>;

}
",
  "import { Collection, Entity, ManyToOne, OneToMany, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Sales } from './Sales';
import { Sellers } from './Sellers';

@Entity()
export class SellerCountries {

  [PrimaryKeyProp]?: ['country', 'seller'];

  @ManyToOne({ entity: () => Countries, ref: true, fieldName: 'country', primary: true })
  country!: Ref<Countries>;

  @ManyToOne({ entity: () => Sellers, ref: true, fieldName: 'seller_id', primary: true, index: 'fk_seller_countries_sellers1_idx' })
  seller!: Ref<Sellers>;

  @OneToMany({ entity: () => Sales, mappedBy: 'sellerCountries' })
  sellerCountriesInverse = new Collection<Sales>(this);

}
",
  "import { Collection, Entity, ManyToOne, OneToMany, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Products } from './Products';
import { Sales } from './Sales';
import { Sellers } from './Sellers';

@Entity()
export class SellerProducts {

  [PrimaryKeyProp]?: ['seller', 'product'];

  @ManyToOne({ entity: () => Sellers, ref: true, fieldName: 'seller_id', primary: true })
  seller!: Ref<Sellers>;

  @ManyToOne({ entity: () => Products, ref: true, fieldName: 'product_id', primary: true, index: 'fk_seller_products_products1_idx' })
  product!: Ref<Products>;

  @OneToMany({ entity: () => Sales, mappedBy: 'exchanged' })
  exchangedInverse = new Collection<Sales>(this);

  @OneToMany({ entity: () => Sales, mappedBy: 'fkSalesSellerProducts1' })
  fkSalesSellerProducts1Inverse = new Collection<Sales>(this);

}
",
  "import { Collection, Entity, ManyToMany, OneToMany, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Products } from './Products';
import { SellerProducts } from './SellerProducts';

@Entity()
export class Sellers {

  [PrimaryKeyProp]?: 'sellerId';

  @PrimaryKey()
  sellerId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property({ length: 255 })
  name!: string;

  @ManyToMany({ entity: () => Products, pivotTable: 'seller_products', pivotEntity: () => SellerProducts, joinColumn: 'seller_id', inverseJoinColumn: 'product_id' })
  sellerProducts = new Collection<Products>(this);

  @ManyToMany({ entity: () => Countries, mappedBy: 'sellerCountries' })
  sellerCountriesInverse = new Collection<Countries>(this);

  @OneToMany({ entity: () => SellerProducts, mappedBy: 'seller' })
  sellerInverse = new Collection<SellerProducts>(this);

}
",
]
`;

exports[`4898 ambiguous_fk_example scalarPropertiesForRelations=never bidirectionalRelations=true identifiedReferences=true entitySchema=true: dump 1`] = `
[
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { Products } from './Products';

export class Colors {
  [PrimaryKeyProp]?: 'colorId';
  colorId!: number;
  name!: string;
  productColors = new Collection<Products>(this);
  colorInverse = new Collection<ProductColors>(this);
}

export const ColorsSchema = new EntitySchema({
  class: Colors,
  properties: {
    colorId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255, unique: 'name_UNIQUE' },
    productColors: {
      kind: 'm:n',
      entity: () => Products,
      pivotTable: 'product_colors',
      pivotEntity: () => ProductColors,
      joinColumn: 'color_id',
      inverseJoinColumn: 'product_id',
    },
    colorInverse: { kind: '1:m', entity: () => ProductColors, mappedBy: 'color' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { Sellers } from './Sellers';

export class Countries {
  [PrimaryKeyProp]?: 'country';
  country!: unknown;
  productCountries = new Collection<ProductSizes>(this);
  sellerCountries = new Collection<Sellers>(this);
  countryInverse = new Collection<SellerCountries>(this);
}

export const CountriesSchema = new EntitySchema({
  class: Countries,
  properties: {
    country: { primary: true, type: 'unknown', columnType: 'char(2)' },
    productCountries: {
      kind: 'm:n',
      entity: () => ProductSizes,
      pivotTable: 'product_countries',
      pivotEntity: () => ProductCountries,
      joinColumn: 'country',
      inverseJoinColumn: 'product_id',
    },
    sellerCountries: {
      kind: 'm:n',
      entity: () => Sellers,
      pivotTable: 'seller_countries',
      pivotEntity: () => SellerCountries,
      joinColumn: 'country',
      inverseJoinColumn: 'seller_id',
    },
    countryInverse: { kind: '1:m', entity: () => SellerCountries, mappedBy: 'country' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Colors } from './Colors';
import { Products } from './Products';
import { Sales } from './Sales';

export class ProductColors {
  [PrimaryKeyProp]?: ['color', 'product'];
  color!: Ref<Colors>;
  product!: Ref<Products>;
  colorInverse = new Collection<Sales>(this);
}

export const ProductColorsSchema = new EntitySchema({
  class: ProductColors,
  properties: {
    color: {
      primary: true,
      kind: 'm:1',
      entity: () => Colors,
      ref: true,
      fieldName: 'color_id',
    },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => Products,
      ref: true,
      fieldName: 'product_id',
      index: 'fk_product_colors_products1_idx',
    },
    colorInverse: { kind: '1:m', entity: () => Sales, mappedBy: 'color' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { ProductSizes } from './ProductSizes';
import { Sales } from './Sales';

export class ProductCountries {
  [PrimaryKeyProp]?: ['country', 'product'];
  country!: Ref<Countries>;
  product!: Ref<ProductSizes>;
  productCountriesInverse = new Collection<Sales>(this);
}

export const ProductCountriesSchema = new EntitySchema({
  class: ProductCountries,
  properties: {
    country: {
      primary: true,
      kind: 'm:1',
      entity: () => Countries,
      ref: true,
      fieldName: 'country',
    },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => ProductSizes,
      ref: true,
      fieldName: 'product_id',
      index: 'fk_product_countries_product_sizes1_idx',
    },
    productCountriesInverse: { kind: '1:m', entity: () => Sales, mappedBy: 'productCountries' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { ProductCountries } from './ProductCountries';
import { Products } from './Products';
import { Sales } from './Sales';

export class ProductSizes {
  [PrimaryKeyProp]?: 'product';
  product!: Ref<Products>;
  size!: number;
  productCountriesInverse = new Collection<Countries>(this);
  productInverse = new Collection<ProductCountries>(this);
  sizeInverse = new Collection<Sales>(this);
}

export const ProductSizesSchema = new EntitySchema({
  class: ProductSizes,
  properties: {
    product: {
      primary: true,
      kind: '1:1',
      entity: () => Products,
      ref: true,
      fieldName: 'product_id',
    },
    size: { type: 'number', columnType: 'smallint' },
    productCountriesInverse: { kind: 'm:n', entity: () => Countries, mappedBy: 'productCountries' },
    productInverse: { kind: '1:m', entity: () => ProductCountries, mappedBy: 'product' },
    sizeInverse: { kind: '1:m', entity: () => Sales, mappedBy: 'size' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Colors } from './Colors';
import { SellerProducts } from './SellerProducts';
import { Sellers } from './Sellers';

export class Products {
  [PrimaryKeyProp]?: 'productId';
  productId!: number;
  name!: string;
  productColorsInverse = new Collection<Colors>(this);
  productInverse = new Collection<SellerProducts>(this);
  sellerProductsInverse = new Collection<Sellers>(this);
}

export const ProductsSchema = new EntitySchema({
  class: Products,
  properties: {
    productId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255, unique: 'name_UNIQUE' },
    productColorsInverse: { kind: 'm:n', entity: () => Colors, mappedBy: 'productColors' },
    productInverse: { kind: '1:m', entity: () => SellerProducts, mappedBy: 'product' },
    sellerProductsInverse: { kind: 'm:n', entity: () => Sellers, mappedBy: 'sellerProducts' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { ProductCountries } from './ProductCountries';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { SellerProducts } from './SellerProducts';

export class Sales {
  [PrimaryKeyProp]?: 'saleId';
  saleId!: number;
  color?: Ref<ProductColors>;
  size?: Ref<ProductSizes>;
  exchanged?: Ref<SellerProducts>;
  productCountries!: Ref<ProductCountries>;
  sellerCountries!: Ref<SellerCountries>;
  fkSalesSellerProducts1!: Ref<SellerProducts>;
}

export const SalesSchema = new EntitySchema({
  class: Sales,
  indexes: [
    { name: 'product_id_idx', expression: 'create index \`product_id_idx\` on \`sales\` (\`product_id\`)' },
  ],
  uniques: [
    { name: 'product_id__size__color_id-UNIQUE', expression: 'create unique index \`product_id__size__color_id-UNIQUE\` on \`sales\` (\`product_id\`, \`color_id\`, \`size\`)' },
  ],
  properties: {
    saleId: { primary: true, type: 'number' },
    color: {
      kind: 'm:1',
      entity: () => ProductColors,
      ref: true,
      fieldNames: [
        'color_id',
        'product_id'
      ],
      nullable: true,
      index: 'fk_sales_product_colors1_idx',
    },
    size: {
      kind: 'm:1',
      entity: () => ProductSizes,
      ref: true,
      fieldNames: [
        'size',
        'product_id'
      ],
      nullable: true,
      index: 'fk_sales_product_sizes1_idx',
    },
    exchanged: {
      kind: 'm:1',
      entity: () => SellerProducts,
      ref: true,
      fieldNames: [
        'seller_id',
        'exchanged_product_id'
      ],
      nullable: true,
      index: 'fk_sales_seller_products2_idx',
    },
    productCountries: {
      kind: 'm:1',
      entity: () => ProductCountries,
      ref: true,
      fieldNames: [
        'country',
        'product_id'
      ],
      index: 'fk_sales_product_countries1_idx',
    },
    sellerCountries: {
      kind: 'm:1',
      entity: () => SellerCountries,
      ref: true,
      fieldNames: [
        'country',
        'seller_id'
      ],
      index: 'fk_sales_seller_countries1_idx',
    },
    fkSalesSellerProducts1: {
      kind: 'm:1',
      entity: () => SellerProducts,
      ref: true,
      fieldNames: [
        'seller_id',
        'product_id'
      ],
      index: 'fk_sales_seller_products1_idx',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Sales } from './Sales';
import { Sellers } from './Sellers';

export class SellerCountries {
  [PrimaryKeyProp]?: ['country', 'seller'];
  country!: Ref<Countries>;
  seller!: Ref<Sellers>;
  sellerCountriesInverse = new Collection<Sales>(this);
}

export const SellerCountriesSchema = new EntitySchema({
  class: SellerCountries,
  properties: {
    country: {
      primary: true,
      kind: 'm:1',
      entity: () => Countries,
      ref: true,
      fieldName: 'country',
    },
    seller: {
      primary: true,
      kind: 'm:1',
      entity: () => Sellers,
      ref: true,
      fieldName: 'seller_id',
      index: 'fk_seller_countries_sellers1_idx',
    },
    sellerCountriesInverse: { kind: '1:m', entity: () => Sales, mappedBy: 'sellerCountries' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Products } from './Products';
import { Sales } from './Sales';
import { Sellers } from './Sellers';

export class SellerProducts {
  [PrimaryKeyProp]?: ['seller', 'product'];
  seller!: Ref<Sellers>;
  product!: Ref<Products>;
  exchangedInverse = new Collection<Sales>(this);
  fkSalesSellerProducts1Inverse = new Collection<Sales>(this);
}

export const SellerProductsSchema = new EntitySchema({
  class: SellerProducts,
  properties: {
    seller: {
      primary: true,
      kind: 'm:1',
      entity: () => Sellers,
      ref: true,
      fieldName: 'seller_id',
    },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => Products,
      ref: true,
      fieldName: 'product_id',
      index: 'fk_seller_products_products1_idx',
    },
    exchangedInverse: { kind: '1:m', entity: () => Sales, mappedBy: 'exchanged' },
    fkSalesSellerProducts1Inverse: { kind: '1:m', entity: () => Sales, mappedBy: 'fkSalesSellerProducts1' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Products } from './Products';
import { SellerProducts } from './SellerProducts';

export class Sellers {
  [PrimaryKeyProp]?: 'sellerId';
  sellerId!: number;
  name!: string;
  sellerProducts = new Collection<Products>(this);
  sellerCountriesInverse = new Collection<Countries>(this);
  sellerInverse = new Collection<SellerProducts>(this);
}

export const SellersSchema = new EntitySchema({
  class: Sellers,
  properties: {
    sellerId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255, unique: 'name_UNIQUE' },
    sellerProducts: {
      kind: 'm:n',
      entity: () => Products,
      pivotTable: 'seller_products',
      pivotEntity: () => SellerProducts,
      joinColumn: 'seller_id',
      inverseJoinColumn: 'product_id',
    },
    sellerCountriesInverse: { kind: 'm:n', entity: () => Countries, mappedBy: 'sellerCountries' },
    sellerInverse: { kind: '1:m', entity: () => SellerProducts, mappedBy: 'seller' },
  },
});
",
]
`;

exports[`4898 ambiguous_fk_example scalarPropertiesForRelations=smart bidirectionalRelations=false identifiedReferences=false entitySchema=false: dump 1`] = `
[
  "import { Collection, Entity, ManyToMany, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { Products } from './Products';

@Entity()
export class Colors {

  [PrimaryKeyProp]?: 'colorId';

  @PrimaryKey()
  colorId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property({ length: 255 })
  name!: string;

  @ManyToMany({ entity: () => Products, pivotTable: 'product_colors', pivotEntity: () => ProductColors, joinColumn: 'color_id', inverseJoinColumn: 'product_id' })
  productColors = new Collection<Products>(this);

}
",
  "import { Collection, Entity, ManyToMany, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductCountries } from './ProductCountries';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { Sellers } from './Sellers';

@Entity()
export class Countries {

  [PrimaryKeyProp]?: 'country';

  @PrimaryKey({ columnType: 'char(2)' })
  country!: unknown;

  @ManyToMany({ entity: () => ProductSizes, pivotTable: 'product_countries', pivotEntity: () => ProductCountries, joinColumn: 'country', inverseJoinColumn: 'product_id' })
  productCountries = new Collection<ProductSizes>(this);

  @ManyToMany({ entity: () => Sellers, pivotTable: 'seller_countries', pivotEntity: () => SellerCountries, joinColumn: 'country', inverseJoinColumn: 'seller_id' })
  sellerCountries = new Collection<Sellers>(this);

}
",
  "import { Entity, ManyToOne, PrimaryKeyProp } from '@mikro-orm/core';
import { Colors } from './Colors';
import { Products } from './Products';

@Entity()
export class ProductColors {

  [PrimaryKeyProp]?: ['color', 'product'];

  @ManyToOne({ entity: () => Colors, fieldName: 'color_id', primary: true })
  color!: Colors;

  @ManyToOne({ entity: () => Products, fieldName: 'product_id', primary: true, index: 'fk_product_colors_products1_idx' })
  product!: Products;

}
",
  "import { Entity, ManyToOne, PrimaryKeyProp } from '@mikro-orm/core';
import { Countries } from './Countries';
import { ProductSizes } from './ProductSizes';

@Entity()
export class ProductCountries {

  [PrimaryKeyProp]?: ['country', 'product'];

  @ManyToOne({ entity: () => Countries, fieldName: 'country', primary: true })
  country!: Countries;

  @ManyToOne({ entity: () => ProductSizes, fieldName: 'product_id', primary: true, index: 'fk_product_countries_product_sizes1_idx' })
  product!: ProductSizes;

}
",
  "import { Entity, OneToOne, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { Products } from './Products';

@Entity()
@Unique({ name: 'size__product_id-UNIQUE', properties: ['size', 'product'] })
export class ProductSizes {

  [PrimaryKeyProp]?: 'product';

  @OneToOne({ entity: () => Products, fieldName: 'product_id', primary: true })
  product!: Products;

  @Property({ columnType: 'smallint' })
  size!: number;

}
",
  "import { Entity, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';

@Entity()
export class Products {

  [PrimaryKeyProp]?: 'productId';

  @PrimaryKey()
  productId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property({ length: 255 })
  name!: string;

}
",
  "import { Entity, Index, ManyToOne, PrimaryKey, PrimaryKeyProp, Unique } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { ProductCountries } from './ProductCountries';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { SellerProducts } from './SellerProducts';

@Entity()
@Index({ name: 'product_id_idx', expression: 'create index \`product_id_idx\` on \`sales\` (\`product_id\`)')
@Unique({ name: 'product_id__size__color_id-UNIQUE', expression: 'create unique index \`product_id__size__color_id-UNIQUE\` on \`sales\` (\`product_id\`, \`color_id\`, \`size\`)')
export class Sales {

  [PrimaryKeyProp]?: 'saleId';

  @PrimaryKey()
  saleId!: number;

  @ManyToOne({ entity: () => ProductColors, fieldNames: ['color_id', 'product_id'], nullable: true, index: 'fk_sales_product_colors1_idx' })
  color?: ProductColors;

  @ManyToOne({ entity: () => ProductSizes, fieldNames: ['size', 'product_id'], nullable: true, index: 'fk_sales_product_sizes1_idx' })
  size?: ProductSizes;

  @ManyToOne({ entity: () => SellerProducts, fieldNames: ['seller_id', 'exchanged_product_id'], nullable: true, index: 'fk_sales_seller_products2_idx' })
  exchanged?: SellerProducts;

  @ManyToOne({ entity: () => ProductCountries, fieldNames: ['country', 'product_id'], index: 'fk_sales_product_countries1_idx' })
  productCountries!: ProductCountries;

  @ManyToOne({ entity: () => SellerCountries, fieldNames: ['country', 'seller_id'], index: 'fk_sales_seller_countries1_idx' })
  sellerCountries!: SellerCountries;

  @ManyToOne({ entity: () => SellerProducts, fieldNames: ['seller_id', 'product_id'], index: 'fk_sales_seller_products1_idx' })
  fkSalesSellerProducts1!: SellerProducts;

}
",
  "import { Entity, ManyToOne, PrimaryKeyProp } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Sellers } from './Sellers';

@Entity()
export class SellerCountries {

  [PrimaryKeyProp]?: ['country', 'seller'];

  @ManyToOne({ entity: () => Countries, fieldName: 'country', primary: true })
  country!: Countries;

  @ManyToOne({ entity: () => Sellers, fieldName: 'seller_id', primary: true, index: 'fk_seller_countries_sellers1_idx' })
  seller!: Sellers;

}
",
  "import { Entity, ManyToOne, PrimaryKeyProp } from '@mikro-orm/core';
import { Products } from './Products';
import { Sellers } from './Sellers';

@Entity()
export class SellerProducts {

  [PrimaryKeyProp]?: ['seller', 'product'];

  @ManyToOne({ entity: () => Sellers, fieldName: 'seller_id', primary: true })
  seller!: Sellers;

  @ManyToOne({ entity: () => Products, fieldName: 'product_id', primary: true, index: 'fk_seller_products_products1_idx' })
  product!: Products;

}
",
  "import { Collection, Entity, ManyToMany, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { Products } from './Products';
import { SellerProducts } from './SellerProducts';

@Entity()
export class Sellers {

  [PrimaryKeyProp]?: 'sellerId';

  @PrimaryKey()
  sellerId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property({ length: 255 })
  name!: string;

  @ManyToMany({ entity: () => Products, pivotTable: 'seller_products', pivotEntity: () => SellerProducts, joinColumn: 'seller_id', inverseJoinColumn: 'product_id' })
  sellerProducts = new Collection<Products>(this);

}
",
]
`;

exports[`4898 ambiguous_fk_example scalarPropertiesForRelations=smart bidirectionalRelations=false identifiedReferences=false entitySchema=true: dump 1`] = `
[
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Products } from './Products';

export class Colors {
  [PrimaryKeyProp]?: 'colorId';
  colorId!: number;
  name!: string;
  productColors = new Collection<Products>(this);
}

export const ColorsSchema = new EntitySchema({
  class: Colors,
  properties: {
    colorId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255, unique: 'name_UNIQUE' },
    productColors: {
      kind: 'm:n',
      entity: () => Products,
      pivotTable: 'product_colors',
      pivotEntity: () => ProductColors,
      joinColumn: 'color_id',
      inverseJoinColumn: 'product_id',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductSizes } from './ProductSizes';
import { Sellers } from './Sellers';

export class Countries {
  [PrimaryKeyProp]?: 'country';
  country!: unknown;
  productCountries = new Collection<ProductSizes>(this);
  sellerCountries = new Collection<Sellers>(this);
}

export const CountriesSchema = new EntitySchema({
  class: Countries,
  properties: {
    country: { primary: true, type: 'unknown', columnType: 'char(2)' },
    productCountries: {
      kind: 'm:n',
      entity: () => ProductSizes,
      pivotTable: 'product_countries',
      pivotEntity: () => ProductCountries,
      joinColumn: 'country',
      inverseJoinColumn: 'product_id',
    },
    sellerCountries: {
      kind: 'm:n',
      entity: () => Sellers,
      pivotTable: 'seller_countries',
      pivotEntity: () => SellerCountries,
      joinColumn: 'country',
      inverseJoinColumn: 'seller_id',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class ProductColors {
  [PrimaryKeyProp]?: ['color', 'product'];
  color!: Colors;
  product!: Products;
}

export const ProductColorsSchema = new EntitySchema({
  class: ProductColors,
  properties: {
    color: { primary: true, kind: 'm:1', entity: () => Colors, fieldName: 'color_id' },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => Products,
      fieldName: 'product_id',
      index: 'fk_product_colors_products1_idx',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class ProductCountries {
  [PrimaryKeyProp]?: ['country', 'product'];
  country!: Countries;
  product!: ProductSizes;
}

export const ProductCountriesSchema = new EntitySchema({
  class: ProductCountries,
  properties: {
    country: { primary: true, kind: 'm:1', entity: () => Countries, fieldName: 'country' },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => ProductSizes,
      fieldName: 'product_id',
      index: 'fk_product_countries_product_sizes1_idx',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class ProductSizes {
  [PrimaryKeyProp]?: 'product';
  product!: Products;
  size!: number;
}

export const ProductSizesSchema = new EntitySchema({
  class: ProductSizes,
  properties: {
    product: { primary: true, kind: '1:1', entity: () => Products, fieldName: 'product_id' },
    size: { type: 'number', columnType: 'smallint' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Products {
  [PrimaryKeyProp]?: 'productId';
  productId!: number;
  name!: string;
}

export const ProductsSchema = new EntitySchema({
  class: Products,
  properties: {
    productId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255, unique: 'name_UNIQUE' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Sales {
  [PrimaryKeyProp]?: 'saleId';
  saleId!: number;
  color?: ProductColors;
  size?: ProductSizes;
  exchanged?: SellerProducts;
  productCountries!: ProductCountries;
  sellerCountries!: SellerCountries;
  fkSalesSellerProducts1!: SellerProducts;
}

export const SalesSchema = new EntitySchema({
  class: Sales,
  indexes: [
    { name: 'product_id_idx', expression: 'create index \`product_id_idx\` on \`sales\` (\`product_id\`)' },
  ],
  uniques: [
    { name: 'product_id__size__color_id-UNIQUE', expression: 'create unique index \`product_id__size__color_id-UNIQUE\` on \`sales\` (\`product_id\`, \`color_id\`, \`size\`)' },
  ],
  properties: {
    saleId: { primary: true, type: 'number' },
    color: {
      kind: 'm:1',
      entity: () => ProductColors,
      fieldNames: [
        'color_id',
        'product_id'
      ],
      nullable: true,
      index: 'fk_sales_product_colors1_idx',
    },
    size: {
      kind: 'm:1',
      entity: () => ProductSizes,
      fieldNames: [
        'size',
        'product_id'
      ],
      nullable: true,
      index: 'fk_sales_product_sizes1_idx',
    },
    exchanged: {
      kind: 'm:1',
      entity: () => SellerProducts,
      fieldNames: [
        'seller_id',
        'exchanged_product_id'
      ],
      nullable: true,
      index: 'fk_sales_seller_products2_idx',
    },
    productCountries: {
      kind: 'm:1',
      entity: () => ProductCountries,
      fieldNames: [
        'country',
        'product_id'
      ],
      index: 'fk_sales_product_countries1_idx',
    },
    sellerCountries: {
      kind: 'm:1',
      entity: () => SellerCountries,
      fieldNames: [
        'country',
        'seller_id'
      ],
      index: 'fk_sales_seller_countries1_idx',
    },
    fkSalesSellerProducts1: {
      kind: 'm:1',
      entity: () => SellerProducts,
      fieldNames: [
        'seller_id',
        'product_id'
      ],
      index: 'fk_sales_seller_products1_idx',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class SellerCountries {
  [PrimaryKeyProp]?: ['country', 'seller'];
  country!: Countries;
  seller!: Sellers;
}

export const SellerCountriesSchema = new EntitySchema({
  class: SellerCountries,
  properties: {
    country: { primary: true, kind: 'm:1', entity: () => Countries, fieldName: 'country' },
    seller: {
      primary: true,
      kind: 'm:1',
      entity: () => Sellers,
      fieldName: 'seller_id',
      index: 'fk_seller_countries_sellers1_idx',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class SellerProducts {
  [PrimaryKeyProp]?: ['seller', 'product'];
  seller!: Sellers;
  product!: Products;
}

export const SellerProductsSchema = new EntitySchema({
  class: SellerProducts,
  properties: {
    seller: { primary: true, kind: 'm:1', entity: () => Sellers, fieldName: 'seller_id' },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => Products,
      fieldName: 'product_id',
      index: 'fk_seller_products_products1_idx',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Products } from './Products';

export class Sellers {
  [PrimaryKeyProp]?: 'sellerId';
  sellerId!: number;
  name!: string;
  sellerProducts = new Collection<Products>(this);
}

export const SellersSchema = new EntitySchema({
  class: Sellers,
  properties: {
    sellerId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255, unique: 'name_UNIQUE' },
    sellerProducts: {
      kind: 'm:n',
      entity: () => Products,
      pivotTable: 'seller_products',
      pivotEntity: () => SellerProducts,
      joinColumn: 'seller_id',
      inverseJoinColumn: 'product_id',
    },
  },
});
",
]
`;

exports[`4898 ambiguous_fk_example scalarPropertiesForRelations=smart bidirectionalRelations=false identifiedReferences=true entitySchema=false: dump 1`] = `
[
  "import { Collection, Entity, ManyToMany, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { Products } from './Products';

@Entity()
export class Colors {

  [PrimaryKeyProp]?: 'colorId';

  @PrimaryKey()
  colorId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property({ length: 255 })
  name!: string;

  @ManyToMany({ entity: () => Products, pivotTable: 'product_colors', pivotEntity: () => ProductColors, joinColumn: 'color_id', inverseJoinColumn: 'product_id' })
  productColors = new Collection<Products>(this);

}
",
  "import { Collection, Entity, ManyToMany, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductCountries } from './ProductCountries';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { Sellers } from './Sellers';

@Entity()
export class Countries {

  [PrimaryKeyProp]?: 'country';

  @PrimaryKey({ columnType: 'char(2)' })
  country!: unknown;

  @ManyToMany({ entity: () => ProductSizes, pivotTable: 'product_countries', pivotEntity: () => ProductCountries, joinColumn: 'country', inverseJoinColumn: 'product_id' })
  productCountries = new Collection<ProductSizes>(this);

  @ManyToMany({ entity: () => Sellers, pivotTable: 'seller_countries', pivotEntity: () => SellerCountries, joinColumn: 'country', inverseJoinColumn: 'seller_id' })
  sellerCountries = new Collection<Sellers>(this);

}
",
  "import { Entity, ManyToOne, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Colors } from './Colors';
import { Products } from './Products';

@Entity()
export class ProductColors {

  [PrimaryKeyProp]?: ['color', 'product'];

  @ManyToOne({ entity: () => Colors, ref: true, fieldName: 'color_id', primary: true })
  color!: Ref<Colors>;

  @ManyToOne({ entity: () => Products, ref: true, fieldName: 'product_id', primary: true, index: 'fk_product_colors_products1_idx' })
  product!: Ref<Products>;

}
",
  "import { Entity, ManyToOne, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { ProductSizes } from './ProductSizes';

@Entity()
export class ProductCountries {

  [PrimaryKeyProp]?: ['country', 'product'];

  @ManyToOne({ entity: () => Countries, ref: true, fieldName: 'country', primary: true })
  country!: Ref<Countries>;

  @ManyToOne({ entity: () => ProductSizes, ref: true, fieldName: 'product_id', primary: true, index: 'fk_product_countries_product_sizes1_idx' })
  product!: Ref<ProductSizes>;

}
",
  "import { Entity, OneToOne, PrimaryKeyProp, Property, Ref, Unique } from '@mikro-orm/core';
import { Products } from './Products';

@Entity()
@Unique({ name: 'size__product_id-UNIQUE', properties: ['size', 'product'] })
export class ProductSizes {

  [PrimaryKeyProp]?: 'product';

  @OneToOne({ entity: () => Products, ref: true, fieldName: 'product_id', primary: true })
  product!: Ref<Products>;

  @Property({ columnType: 'smallint' })
  size!: number;

}
",
  "import { Entity, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';

@Entity()
export class Products {

  [PrimaryKeyProp]?: 'productId';

  @PrimaryKey()
  productId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property({ length: 255 })
  name!: string;

}
",
  "import { Entity, Index, ManyToOne, PrimaryKey, PrimaryKeyProp, Ref, Unique } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { ProductCountries } from './ProductCountries';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { SellerProducts } from './SellerProducts';

@Entity()
@Index({ name: 'product_id_idx', expression: 'create index \`product_id_idx\` on \`sales\` (\`product_id\`)')
@Unique({ name: 'product_id__size__color_id-UNIQUE', expression: 'create unique index \`product_id__size__color_id-UNIQUE\` on \`sales\` (\`product_id\`, \`color_id\`, \`size\`)')
export class Sales {

  [PrimaryKeyProp]?: 'saleId';

  @PrimaryKey()
  saleId!: number;

  @ManyToOne({ entity: () => ProductColors, ref: true, fieldNames: ['color_id', 'product_id'], nullable: true, index: 'fk_sales_product_colors1_idx' })
  color?: Ref<ProductColors>;

  @ManyToOne({ entity: () => ProductSizes, ref: true, fieldNames: ['size', 'product_id'], nullable: true, index: 'fk_sales_product_sizes1_idx' })
  size?: Ref<ProductSizes>;

  @ManyToOne({ entity: () => SellerProducts, ref: true, fieldNames: ['seller_id', 'exchanged_product_id'], nullable: true, index: 'fk_sales_seller_products2_idx' })
  exchanged?: Ref<SellerProducts>;

  @ManyToOne({ entity: () => ProductCountries, ref: true, fieldNames: ['country', 'product_id'], index: 'fk_sales_product_countries1_idx' })
  productCountries!: Ref<ProductCountries>;

  @ManyToOne({ entity: () => SellerCountries, ref: true, fieldNames: ['country', 'seller_id'], index: 'fk_sales_seller_countries1_idx' })
  sellerCountries!: Ref<SellerCountries>;

  @ManyToOne({ entity: () => SellerProducts, ref: true, fieldNames: ['seller_id', 'product_id'], index: 'fk_sales_seller_products1_idx' })
  fkSalesSellerProducts1!: Ref<SellerProducts>;

}
",
  "import { Entity, ManyToOne, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Sellers } from './Sellers';

@Entity()
export class SellerCountries {

  [PrimaryKeyProp]?: ['country', 'seller'];

  @ManyToOne({ entity: () => Countries, ref: true, fieldName: 'country', primary: true })
  country!: Ref<Countries>;

  @ManyToOne({ entity: () => Sellers, ref: true, fieldName: 'seller_id', primary: true, index: 'fk_seller_countries_sellers1_idx' })
  seller!: Ref<Sellers>;

}
",
  "import { Entity, ManyToOne, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Products } from './Products';
import { Sellers } from './Sellers';

@Entity()
export class SellerProducts {

  [PrimaryKeyProp]?: ['seller', 'product'];

  @ManyToOne({ entity: () => Sellers, ref: true, fieldName: 'seller_id', primary: true })
  seller!: Ref<Sellers>;

  @ManyToOne({ entity: () => Products, ref: true, fieldName: 'product_id', primary: true, index: 'fk_seller_products_products1_idx' })
  product!: Ref<Products>;

}
",
  "import { Collection, Entity, ManyToMany, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { Products } from './Products';
import { SellerProducts } from './SellerProducts';

@Entity()
export class Sellers {

  [PrimaryKeyProp]?: 'sellerId';

  @PrimaryKey()
  sellerId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property({ length: 255 })
  name!: string;

  @ManyToMany({ entity: () => Products, pivotTable: 'seller_products', pivotEntity: () => SellerProducts, joinColumn: 'seller_id', inverseJoinColumn: 'product_id' })
  sellerProducts = new Collection<Products>(this);

}
",
]
`;

exports[`4898 ambiguous_fk_example scalarPropertiesForRelations=smart bidirectionalRelations=false identifiedReferences=true entitySchema=true: dump 1`] = `
[
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Products } from './Products';

export class Colors {
  [PrimaryKeyProp]?: 'colorId';
  colorId!: number;
  name!: string;
  productColors = new Collection<Products>(this);
}

export const ColorsSchema = new EntitySchema({
  class: Colors,
  properties: {
    colorId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255, unique: 'name_UNIQUE' },
    productColors: {
      kind: 'm:n',
      entity: () => Products,
      pivotTable: 'product_colors',
      pivotEntity: () => ProductColors,
      joinColumn: 'color_id',
      inverseJoinColumn: 'product_id',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductSizes } from './ProductSizes';
import { Sellers } from './Sellers';

export class Countries {
  [PrimaryKeyProp]?: 'country';
  country!: unknown;
  productCountries = new Collection<ProductSizes>(this);
  sellerCountries = new Collection<Sellers>(this);
}

export const CountriesSchema = new EntitySchema({
  class: Countries,
  properties: {
    country: { primary: true, type: 'unknown', columnType: 'char(2)' },
    productCountries: {
      kind: 'm:n',
      entity: () => ProductSizes,
      pivotTable: 'product_countries',
      pivotEntity: () => ProductCountries,
      joinColumn: 'country',
      inverseJoinColumn: 'product_id',
    },
    sellerCountries: {
      kind: 'm:n',
      entity: () => Sellers,
      pivotTable: 'seller_countries',
      pivotEntity: () => SellerCountries,
      joinColumn: 'country',
      inverseJoinColumn: 'seller_id',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Colors } from './Colors';
import { Products } from './Products';

export class ProductColors {
  [PrimaryKeyProp]?: ['color', 'product'];
  color!: Ref<Colors>;
  product!: Ref<Products>;
}

export const ProductColorsSchema = new EntitySchema({
  class: ProductColors,
  properties: {
    color: {
      primary: true,
      kind: 'm:1',
      entity: () => Colors,
      ref: true,
      fieldName: 'color_id',
    },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => Products,
      ref: true,
      fieldName: 'product_id',
      index: 'fk_product_colors_products1_idx',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { ProductSizes } from './ProductSizes';

export class ProductCountries {
  [PrimaryKeyProp]?: ['country', 'product'];
  country!: Ref<Countries>;
  product!: Ref<ProductSizes>;
}

export const ProductCountriesSchema = new EntitySchema({
  class: ProductCountries,
  properties: {
    country: {
      primary: true,
      kind: 'm:1',
      entity: () => Countries,
      ref: true,
      fieldName: 'country',
    },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => ProductSizes,
      ref: true,
      fieldName: 'product_id',
      index: 'fk_product_countries_product_sizes1_idx',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Products } from './Products';

export class ProductSizes {
  [PrimaryKeyProp]?: 'product';
  product!: Ref<Products>;
  size!: number;
}

export const ProductSizesSchema = new EntitySchema({
  class: ProductSizes,
  properties: {
    product: {
      primary: true,
      kind: '1:1',
      entity: () => Products,
      ref: true,
      fieldName: 'product_id',
    },
    size: { type: 'number', columnType: 'smallint' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Products {
  [PrimaryKeyProp]?: 'productId';
  productId!: number;
  name!: string;
}

export const ProductsSchema = new EntitySchema({
  class: Products,
  properties: {
    productId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255, unique: 'name_UNIQUE' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { ProductCountries } from './ProductCountries';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { SellerProducts } from './SellerProducts';

export class Sales {
  [PrimaryKeyProp]?: 'saleId';
  saleId!: number;
  color?: Ref<ProductColors>;
  size?: Ref<ProductSizes>;
  exchanged?: Ref<SellerProducts>;
  productCountries!: Ref<ProductCountries>;
  sellerCountries!: Ref<SellerCountries>;
  fkSalesSellerProducts1!: Ref<SellerProducts>;
}

export const SalesSchema = new EntitySchema({
  class: Sales,
  indexes: [
    { name: 'product_id_idx', expression: 'create index \`product_id_idx\` on \`sales\` (\`product_id\`)' },
  ],
  uniques: [
    { name: 'product_id__size__color_id-UNIQUE', expression: 'create unique index \`product_id__size__color_id-UNIQUE\` on \`sales\` (\`product_id\`, \`color_id\`, \`size\`)' },
  ],
  properties: {
    saleId: { primary: true, type: 'number' },
    color: {
      kind: 'm:1',
      entity: () => ProductColors,
      ref: true,
      fieldNames: [
        'color_id',
        'product_id'
      ],
      nullable: true,
      index: 'fk_sales_product_colors1_idx',
    },
    size: {
      kind: 'm:1',
      entity: () => ProductSizes,
      ref: true,
      fieldNames: [
        'size',
        'product_id'
      ],
      nullable: true,
      index: 'fk_sales_product_sizes1_idx',
    },
    exchanged: {
      kind: 'm:1',
      entity: () => SellerProducts,
      ref: true,
      fieldNames: [
        'seller_id',
        'exchanged_product_id'
      ],
      nullable: true,
      index: 'fk_sales_seller_products2_idx',
    },
    productCountries: {
      kind: 'm:1',
      entity: () => ProductCountries,
      ref: true,
      fieldNames: [
        'country',
        'product_id'
      ],
      index: 'fk_sales_product_countries1_idx',
    },
    sellerCountries: {
      kind: 'm:1',
      entity: () => SellerCountries,
      ref: true,
      fieldNames: [
        'country',
        'seller_id'
      ],
      index: 'fk_sales_seller_countries1_idx',
    },
    fkSalesSellerProducts1: {
      kind: 'm:1',
      entity: () => SellerProducts,
      ref: true,
      fieldNames: [
        'seller_id',
        'product_id'
      ],
      index: 'fk_sales_seller_products1_idx',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Sellers } from './Sellers';

export class SellerCountries {
  [PrimaryKeyProp]?: ['country', 'seller'];
  country!: Ref<Countries>;
  seller!: Ref<Sellers>;
}

export const SellerCountriesSchema = new EntitySchema({
  class: SellerCountries,
  properties: {
    country: {
      primary: true,
      kind: 'm:1',
      entity: () => Countries,
      ref: true,
      fieldName: 'country',
    },
    seller: {
      primary: true,
      kind: 'm:1',
      entity: () => Sellers,
      ref: true,
      fieldName: 'seller_id',
      index: 'fk_seller_countries_sellers1_idx',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Products } from './Products';
import { Sellers } from './Sellers';

export class SellerProducts {
  [PrimaryKeyProp]?: ['seller', 'product'];
  seller!: Ref<Sellers>;
  product!: Ref<Products>;
}

export const SellerProductsSchema = new EntitySchema({
  class: SellerProducts,
  properties: {
    seller: {
      primary: true,
      kind: 'm:1',
      entity: () => Sellers,
      ref: true,
      fieldName: 'seller_id',
    },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => Products,
      ref: true,
      fieldName: 'product_id',
      index: 'fk_seller_products_products1_idx',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Products } from './Products';

export class Sellers {
  [PrimaryKeyProp]?: 'sellerId';
  sellerId!: number;
  name!: string;
  sellerProducts = new Collection<Products>(this);
}

export const SellersSchema = new EntitySchema({
  class: Sellers,
  properties: {
    sellerId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255, unique: 'name_UNIQUE' },
    sellerProducts: {
      kind: 'm:n',
      entity: () => Products,
      pivotTable: 'seller_products',
      pivotEntity: () => SellerProducts,
      joinColumn: 'seller_id',
      inverseJoinColumn: 'product_id',
    },
  },
});
",
]
`;

exports[`4898 ambiguous_fk_example scalarPropertiesForRelations=smart bidirectionalRelations=true identifiedReferences=false entitySchema=false: dump 1`] = `
[
  "import { Collection, Entity, ManyToMany, OneToMany, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { Products } from './Products';

@Entity()
export class Colors {

  [PrimaryKeyProp]?: 'colorId';

  @PrimaryKey()
  colorId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property({ length: 255 })
  name!: string;

  @ManyToMany({ entity: () => Products, pivotTable: 'product_colors', pivotEntity: () => ProductColors, joinColumn: 'color_id', inverseJoinColumn: 'product_id' })
  productColors = new Collection<Products>(this);

  @OneToMany({ entity: () => ProductColors, mappedBy: 'color' })
  colorInverse = new Collection<ProductColors>(this);

}
",
  "import { Collection, Entity, ManyToMany, OneToMany, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductCountries } from './ProductCountries';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { Sellers } from './Sellers';

@Entity()
export class Countries {

  [PrimaryKeyProp]?: 'country';

  @PrimaryKey({ columnType: 'char(2)' })
  country!: unknown;

  @ManyToMany({ entity: () => ProductSizes, pivotTable: 'product_countries', pivotEntity: () => ProductCountries, joinColumn: 'country', inverseJoinColumn: 'product_id' })
  productCountries = new Collection<ProductSizes>(this);

  @ManyToMany({ entity: () => Sellers, pivotTable: 'seller_countries', pivotEntity: () => SellerCountries, joinColumn: 'country', inverseJoinColumn: 'seller_id' })
  sellerCountries = new Collection<Sellers>(this);

  @OneToMany({ entity: () => SellerCountries, mappedBy: 'country' })
  countryInverse = new Collection<SellerCountries>(this);

}
",
  "import { Collection, Entity, ManyToOne, OneToMany, PrimaryKeyProp } from '@mikro-orm/core';
import { Colors } from './Colors';
import { Products } from './Products';
import { Sales } from './Sales';

@Entity()
export class ProductColors {

  [PrimaryKeyProp]?: ['color', 'product'];

  @ManyToOne({ entity: () => Colors, fieldName: 'color_id', primary: true })
  color!: Colors;

  @ManyToOne({ entity: () => Products, fieldName: 'product_id', primary: true, index: 'fk_product_colors_products1_idx' })
  product!: Products;

  @OneToMany({ entity: () => Sales, mappedBy: 'color' })
  colorInverse = new Collection<Sales>(this);

}
",
  "import { Collection, Entity, ManyToOne, OneToMany, PrimaryKeyProp } from '@mikro-orm/core';
import { Countries } from './Countries';
import { ProductSizes } from './ProductSizes';
import { Sales } from './Sales';

@Entity()
export class ProductCountries {

  [PrimaryKeyProp]?: ['country', 'product'];

  @ManyToOne({ entity: () => Countries, fieldName: 'country', primary: true })
  country!: Countries;

  @ManyToOne({ entity: () => ProductSizes, fieldName: 'product_id', primary: true, index: 'fk_product_countries_product_sizes1_idx' })
  product!: ProductSizes;

  @OneToMany({ entity: () => Sales, mappedBy: 'productCountries' })
  productCountriesInverse = new Collection<Sales>(this);

}
",
  "import { Collection, Entity, ManyToMany, OneToMany, OneToOne, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { Countries } from './Countries';
import { ProductCountries } from './ProductCountries';
import { Products } from './Products';
import { Sales } from './Sales';

@Entity()
@Unique({ name: 'size__product_id-UNIQUE', properties: ['size', 'product'] })
export class ProductSizes {

  [PrimaryKeyProp]?: 'product';

  @OneToOne({ entity: () => Products, fieldName: 'product_id', primary: true })
  product!: Products;

  @Property({ columnType: 'smallint' })
  size!: number;

  @ManyToMany({ entity: () => Countries, mappedBy: 'productCountries' })
  productCountriesInverse = new Collection<Countries>(this);

  @OneToMany({ entity: () => ProductCountries, mappedBy: 'product' })
  productInverse = new Collection<ProductCountries>(this);

  @OneToMany({ entity: () => Sales, mappedBy: 'size' })
  sizeInverse = new Collection<Sales>(this);

}
",
  "import { Collection, Entity, ManyToMany, OneToMany, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { Colors } from './Colors';
import { SellerProducts } from './SellerProducts';
import { Sellers } from './Sellers';

@Entity()
export class Products {

  [PrimaryKeyProp]?: 'productId';

  @PrimaryKey()
  productId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property({ length: 255 })
  name!: string;

  @ManyToMany({ entity: () => Colors, mappedBy: 'productColors' })
  productColorsInverse = new Collection<Colors>(this);

  @OneToMany({ entity: () => SellerProducts, mappedBy: 'product' })
  productInverse = new Collection<SellerProducts>(this);

  @ManyToMany({ entity: () => Sellers, mappedBy: 'sellerProducts' })
  sellerProductsInverse = new Collection<Sellers>(this);

}
",
  "import { Entity, Index, ManyToOne, PrimaryKey, PrimaryKeyProp, Unique } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { ProductCountries } from './ProductCountries';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { SellerProducts } from './SellerProducts';

@Entity()
@Index({ name: 'product_id_idx', expression: 'create index \`product_id_idx\` on \`sales\` (\`product_id\`)')
@Unique({ name: 'product_id__size__color_id-UNIQUE', expression: 'create unique index \`product_id__size__color_id-UNIQUE\` on \`sales\` (\`product_id\`, \`color_id\`, \`size\`)')
export class Sales {

  [PrimaryKeyProp]?: 'saleId';

  @PrimaryKey()
  saleId!: number;

  @ManyToOne({ entity: () => ProductColors, fieldNames: ['color_id', 'product_id'], nullable: true, index: 'fk_sales_product_colors1_idx' })
  color?: ProductColors;

  @ManyToOne({ entity: () => ProductSizes, fieldNames: ['size', 'product_id'], nullable: true, index: 'fk_sales_product_sizes1_idx' })
  size?: ProductSizes;

  @ManyToOne({ entity: () => SellerProducts, fieldNames: ['seller_id', 'exchanged_product_id'], nullable: true, index: 'fk_sales_seller_products2_idx' })
  exchanged?: SellerProducts;

  @ManyToOne({ entity: () => ProductCountries, fieldNames: ['country', 'product_id'], index: 'fk_sales_product_countries1_idx' })
  productCountries!: ProductCountries;

  @ManyToOne({ entity: () => SellerCountries, fieldNames: ['country', 'seller_id'], index: 'fk_sales_seller_countries1_idx' })
  sellerCountries!: SellerCountries;

  @ManyToOne({ entity: () => SellerProducts, fieldNames: ['seller_id', 'product_id'], index: 'fk_sales_seller_products1_idx' })
  fkSalesSellerProducts1!: SellerProducts;

}
",
  "import { Collection, Entity, ManyToOne, OneToMany, PrimaryKeyProp } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Sales } from './Sales';
import { Sellers } from './Sellers';

@Entity()
export class SellerCountries {

  [PrimaryKeyProp]?: ['country', 'seller'];

  @ManyToOne({ entity: () => Countries, fieldName: 'country', primary: true })
  country!: Countries;

  @ManyToOne({ entity: () => Sellers, fieldName: 'seller_id', primary: true, index: 'fk_seller_countries_sellers1_idx' })
  seller!: Sellers;

  @OneToMany({ entity: () => Sales, mappedBy: 'sellerCountries' })
  sellerCountriesInverse = new Collection<Sales>(this);

}
",
  "import { Collection, Entity, ManyToOne, OneToMany, PrimaryKeyProp } from '@mikro-orm/core';
import { Products } from './Products';
import { Sales } from './Sales';
import { Sellers } from './Sellers';

@Entity()
export class SellerProducts {

  [PrimaryKeyProp]?: ['seller', 'product'];

  @ManyToOne({ entity: () => Sellers, fieldName: 'seller_id', primary: true })
  seller!: Sellers;

  @ManyToOne({ entity: () => Products, fieldName: 'product_id', primary: true, index: 'fk_seller_products_products1_idx' })
  product!: Products;

  @OneToMany({ entity: () => Sales, mappedBy: 'exchanged' })
  exchangedInverse = new Collection<Sales>(this);

  @OneToMany({ entity: () => Sales, mappedBy: 'fkSalesSellerProducts1' })
  fkSalesSellerProducts1Inverse = new Collection<Sales>(this);

}
",
  "import { Collection, Entity, ManyToMany, OneToMany, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Products } from './Products';
import { SellerProducts } from './SellerProducts';

@Entity()
export class Sellers {

  [PrimaryKeyProp]?: 'sellerId';

  @PrimaryKey()
  sellerId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property({ length: 255 })
  name!: string;

  @ManyToMany({ entity: () => Products, pivotTable: 'seller_products', pivotEntity: () => SellerProducts, joinColumn: 'seller_id', inverseJoinColumn: 'product_id' })
  sellerProducts = new Collection<Products>(this);

  @ManyToMany({ entity: () => Countries, mappedBy: 'sellerCountries' })
  sellerCountriesInverse = new Collection<Countries>(this);

  @OneToMany({ entity: () => SellerProducts, mappedBy: 'seller' })
  sellerInverse = new Collection<SellerProducts>(this);

}
",
]
`;

exports[`4898 ambiguous_fk_example scalarPropertiesForRelations=smart bidirectionalRelations=true identifiedReferences=false entitySchema=true: dump 1`] = `
[
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { Products } from './Products';

export class Colors {
  [PrimaryKeyProp]?: 'colorId';
  colorId!: number;
  name!: string;
  productColors = new Collection<Products>(this);
  colorInverse = new Collection<ProductColors>(this);
}

export const ColorsSchema = new EntitySchema({
  class: Colors,
  properties: {
    colorId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255, unique: 'name_UNIQUE' },
    productColors: {
      kind: 'm:n',
      entity: () => Products,
      pivotTable: 'product_colors',
      pivotEntity: () => ProductColors,
      joinColumn: 'color_id',
      inverseJoinColumn: 'product_id',
    },
    colorInverse: { kind: '1:m', entity: () => ProductColors, mappedBy: 'color' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { Sellers } from './Sellers';

export class Countries {
  [PrimaryKeyProp]?: 'country';
  country!: unknown;
  productCountries = new Collection<ProductSizes>(this);
  sellerCountries = new Collection<Sellers>(this);
  countryInverse = new Collection<SellerCountries>(this);
}

export const CountriesSchema = new EntitySchema({
  class: Countries,
  properties: {
    country: { primary: true, type: 'unknown', columnType: 'char(2)' },
    productCountries: {
      kind: 'm:n',
      entity: () => ProductSizes,
      pivotTable: 'product_countries',
      pivotEntity: () => ProductCountries,
      joinColumn: 'country',
      inverseJoinColumn: 'product_id',
    },
    sellerCountries: {
      kind: 'm:n',
      entity: () => Sellers,
      pivotTable: 'seller_countries',
      pivotEntity: () => SellerCountries,
      joinColumn: 'country',
      inverseJoinColumn: 'seller_id',
    },
    countryInverse: { kind: '1:m', entity: () => SellerCountries, mappedBy: 'country' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Sales } from './Sales';

export class ProductColors {
  [PrimaryKeyProp]?: ['color', 'product'];
  color!: Colors;
  product!: Products;
  colorInverse = new Collection<Sales>(this);
}

export const ProductColorsSchema = new EntitySchema({
  class: ProductColors,
  properties: {
    color: { primary: true, kind: 'm:1', entity: () => Colors, fieldName: 'color_id' },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => Products,
      fieldName: 'product_id',
      index: 'fk_product_colors_products1_idx',
    },
    colorInverse: { kind: '1:m', entity: () => Sales, mappedBy: 'color' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Sales } from './Sales';

export class ProductCountries {
  [PrimaryKeyProp]?: ['country', 'product'];
  country!: Countries;
  product!: ProductSizes;
  productCountriesInverse = new Collection<Sales>(this);
}

export const ProductCountriesSchema = new EntitySchema({
  class: ProductCountries,
  properties: {
    country: { primary: true, kind: 'm:1', entity: () => Countries, fieldName: 'country' },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => ProductSizes,
      fieldName: 'product_id',
      index: 'fk_product_countries_product_sizes1_idx',
    },
    productCountriesInverse: { kind: '1:m', entity: () => Sales, mappedBy: 'productCountries' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Countries } from './Countries';
import { ProductCountries } from './ProductCountries';
import { Sales } from './Sales';

export class ProductSizes {
  [PrimaryKeyProp]?: 'product';
  product!: Products;
  size!: number;
  productCountriesInverse = new Collection<Countries>(this);
  productInverse = new Collection<ProductCountries>(this);
  sizeInverse = new Collection<Sales>(this);
}

export const ProductSizesSchema = new EntitySchema({
  class: ProductSizes,
  properties: {
    product: { primary: true, kind: '1:1', entity: () => Products, fieldName: 'product_id' },
    size: { type: 'number', columnType: 'smallint' },
    productCountriesInverse: { kind: 'm:n', entity: () => Countries, mappedBy: 'productCountries' },
    productInverse: { kind: '1:m', entity: () => ProductCountries, mappedBy: 'product' },
    sizeInverse: { kind: '1:m', entity: () => Sales, mappedBy: 'size' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Colors } from './Colors';
import { SellerProducts } from './SellerProducts';
import { Sellers } from './Sellers';

export class Products {
  [PrimaryKeyProp]?: 'productId';
  productId!: number;
  name!: string;
  productColorsInverse = new Collection<Colors>(this);
  productInverse = new Collection<SellerProducts>(this);
  sellerProductsInverse = new Collection<Sellers>(this);
}

export const ProductsSchema = new EntitySchema({
  class: Products,
  properties: {
    productId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255, unique: 'name_UNIQUE' },
    productColorsInverse: { kind: 'm:n', entity: () => Colors, mappedBy: 'productColors' },
    productInverse: { kind: '1:m', entity: () => SellerProducts, mappedBy: 'product' },
    sellerProductsInverse: { kind: 'm:n', entity: () => Sellers, mappedBy: 'sellerProducts' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Sales {
  [PrimaryKeyProp]?: 'saleId';
  saleId!: number;
  color?: ProductColors;
  size?: ProductSizes;
  exchanged?: SellerProducts;
  productCountries!: ProductCountries;
  sellerCountries!: SellerCountries;
  fkSalesSellerProducts1!: SellerProducts;
}

export const SalesSchema = new EntitySchema({
  class: Sales,
  indexes: [
    { name: 'product_id_idx', expression: 'create index \`product_id_idx\` on \`sales\` (\`product_id\`)' },
  ],
  uniques: [
    { name: 'product_id__size__color_id-UNIQUE', expression: 'create unique index \`product_id__size__color_id-UNIQUE\` on \`sales\` (\`product_id\`, \`color_id\`, \`size\`)' },
  ],
  properties: {
    saleId: { primary: true, type: 'number' },
    color: {
      kind: 'm:1',
      entity: () => ProductColors,
      fieldNames: [
        'color_id',
        'product_id'
      ],
      nullable: true,
      index: 'fk_sales_product_colors1_idx',
    },
    size: {
      kind: 'm:1',
      entity: () => ProductSizes,
      fieldNames: [
        'size',
        'product_id'
      ],
      nullable: true,
      index: 'fk_sales_product_sizes1_idx',
    },
    exchanged: {
      kind: 'm:1',
      entity: () => SellerProducts,
      fieldNames: [
        'seller_id',
        'exchanged_product_id'
      ],
      nullable: true,
      index: 'fk_sales_seller_products2_idx',
    },
    productCountries: {
      kind: 'm:1',
      entity: () => ProductCountries,
      fieldNames: [
        'country',
        'product_id'
      ],
      index: 'fk_sales_product_countries1_idx',
    },
    sellerCountries: {
      kind: 'm:1',
      entity: () => SellerCountries,
      fieldNames: [
        'country',
        'seller_id'
      ],
      index: 'fk_sales_seller_countries1_idx',
    },
    fkSalesSellerProducts1: {
      kind: 'm:1',
      entity: () => SellerProducts,
      fieldNames: [
        'seller_id',
        'product_id'
      ],
      index: 'fk_sales_seller_products1_idx',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Sales } from './Sales';

export class SellerCountries {
  [PrimaryKeyProp]?: ['country', 'seller'];
  country!: Countries;
  seller!: Sellers;
  sellerCountriesInverse = new Collection<Sales>(this);
}

export const SellerCountriesSchema = new EntitySchema({
  class: SellerCountries,
  properties: {
    country: { primary: true, kind: 'm:1', entity: () => Countries, fieldName: 'country' },
    seller: {
      primary: true,
      kind: 'm:1',
      entity: () => Sellers,
      fieldName: 'seller_id',
      index: 'fk_seller_countries_sellers1_idx',
    },
    sellerCountriesInverse: { kind: '1:m', entity: () => Sales, mappedBy: 'sellerCountries' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Sales } from './Sales';

export class SellerProducts {
  [PrimaryKeyProp]?: ['seller', 'product'];
  seller!: Sellers;
  product!: Products;
  exchangedInverse = new Collection<Sales>(this);
  fkSalesSellerProducts1Inverse = new Collection<Sales>(this);
}

export const SellerProductsSchema = new EntitySchema({
  class: SellerProducts,
  properties: {
    seller: { primary: true, kind: 'm:1', entity: () => Sellers, fieldName: 'seller_id' },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => Products,
      fieldName: 'product_id',
      index: 'fk_seller_products_products1_idx',
    },
    exchangedInverse: { kind: '1:m', entity: () => Sales, mappedBy: 'exchanged' },
    fkSalesSellerProducts1Inverse: { kind: '1:m', entity: () => Sales, mappedBy: 'fkSalesSellerProducts1' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Products } from './Products';
import { SellerProducts } from './SellerProducts';

export class Sellers {
  [PrimaryKeyProp]?: 'sellerId';
  sellerId!: number;
  name!: string;
  sellerProducts = new Collection<Products>(this);
  sellerCountriesInverse = new Collection<Countries>(this);
  sellerInverse = new Collection<SellerProducts>(this);
}

export const SellersSchema = new EntitySchema({
  class: Sellers,
  properties: {
    sellerId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255, unique: 'name_UNIQUE' },
    sellerProducts: {
      kind: 'm:n',
      entity: () => Products,
      pivotTable: 'seller_products',
      pivotEntity: () => SellerProducts,
      joinColumn: 'seller_id',
      inverseJoinColumn: 'product_id',
    },
    sellerCountriesInverse: { kind: 'm:n', entity: () => Countries, mappedBy: 'sellerCountries' },
    sellerInverse: { kind: '1:m', entity: () => SellerProducts, mappedBy: 'seller' },
  },
});
",
]
`;

exports[`4898 ambiguous_fk_example scalarPropertiesForRelations=smart bidirectionalRelations=true identifiedReferences=true entitySchema=false: dump 1`] = `
[
  "import { Collection, Entity, ManyToMany, OneToMany, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { Products } from './Products';

@Entity()
export class Colors {

  [PrimaryKeyProp]?: 'colorId';

  @PrimaryKey()
  colorId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property({ length: 255 })
  name!: string;

  @ManyToMany({ entity: () => Products, pivotTable: 'product_colors', pivotEntity: () => ProductColors, joinColumn: 'color_id', inverseJoinColumn: 'product_id' })
  productColors = new Collection<Products>(this);

  @OneToMany({ entity: () => ProductColors, mappedBy: 'color' })
  colorInverse = new Collection<ProductColors>(this);

}
",
  "import { Collection, Entity, ManyToMany, OneToMany, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductCountries } from './ProductCountries';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { Sellers } from './Sellers';

@Entity()
export class Countries {

  [PrimaryKeyProp]?: 'country';

  @PrimaryKey({ columnType: 'char(2)' })
  country!: unknown;

  @ManyToMany({ entity: () => ProductSizes, pivotTable: 'product_countries', pivotEntity: () => ProductCountries, joinColumn: 'country', inverseJoinColumn: 'product_id' })
  productCountries = new Collection<ProductSizes>(this);

  @ManyToMany({ entity: () => Sellers, pivotTable: 'seller_countries', pivotEntity: () => SellerCountries, joinColumn: 'country', inverseJoinColumn: 'seller_id' })
  sellerCountries = new Collection<Sellers>(this);

  @OneToMany({ entity: () => SellerCountries, mappedBy: 'country' })
  countryInverse = new Collection<SellerCountries>(this);

}
",
  "import { Collection, Entity, ManyToOne, OneToMany, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Colors } from './Colors';
import { Products } from './Products';
import { Sales } from './Sales';

@Entity()
export class ProductColors {

  [PrimaryKeyProp]?: ['color', 'product'];

  @ManyToOne({ entity: () => Colors, ref: true, fieldName: 'color_id', primary: true })
  color!: Ref<Colors>;

  @ManyToOne({ entity: () => Products, ref: true, fieldName: 'product_id', primary: true, index: 'fk_product_colors_products1_idx' })
  product!: Ref<Products>;

  @OneToMany({ entity: () => Sales, mappedBy: 'color' })
  colorInverse = new Collection<Sales>(this);

}
",
  "import { Collection, Entity, ManyToOne, OneToMany, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { ProductSizes } from './ProductSizes';
import { Sales } from './Sales';

@Entity()
export class ProductCountries {

  [PrimaryKeyProp]?: ['country', 'product'];

  @ManyToOne({ entity: () => Countries, ref: true, fieldName: 'country', primary: true })
  country!: Ref<Countries>;

  @ManyToOne({ entity: () => ProductSizes, ref: true, fieldName: 'product_id', primary: true, index: 'fk_product_countries_product_sizes1_idx' })
  product!: Ref<ProductSizes>;

  @OneToMany({ entity: () => Sales, mappedBy: 'productCountries' })
  productCountriesInverse = new Collection<Sales>(this);

}
",
  "import { Collection, Entity, ManyToMany, OneToMany, OneToOne, PrimaryKeyProp, Property, Ref, Unique } from '@mikro-orm/core';
import { Countries } from './Countries';
import { ProductCountries } from './ProductCountries';
import { Products } from './Products';
import { Sales } from './Sales';

@Entity()
@Unique({ name: 'size__product_id-UNIQUE', properties: ['size', 'product'] })
export class ProductSizes {

  [PrimaryKeyProp]?: 'product';

  @OneToOne({ entity: () => Products, ref: true, fieldName: 'product_id', primary: true })
  product!: Ref<Products>;

  @Property({ columnType: 'smallint' })
  size!: number;

  @ManyToMany({ entity: () => Countries, mappedBy: 'productCountries' })
  productCountriesInverse = new Collection<Countries>(this);

  @OneToMany({ entity: () => ProductCountries, mappedBy: 'product' })
  productInverse = new Collection<ProductCountries>(this);

  @OneToMany({ entity: () => Sales, mappedBy: 'size' })
  sizeInverse = new Collection<Sales>(this);

}
",
  "import { Collection, Entity, ManyToMany, OneToMany, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { Colors } from './Colors';
import { SellerProducts } from './SellerProducts';
import { Sellers } from './Sellers';

@Entity()
export class Products {

  [PrimaryKeyProp]?: 'productId';

  @PrimaryKey()
  productId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property({ length: 255 })
  name!: string;

  @ManyToMany({ entity: () => Colors, mappedBy: 'productColors' })
  productColorsInverse = new Collection<Colors>(this);

  @OneToMany({ entity: () => SellerProducts, mappedBy: 'product' })
  productInverse = new Collection<SellerProducts>(this);

  @ManyToMany({ entity: () => Sellers, mappedBy: 'sellerProducts' })
  sellerProductsInverse = new Collection<Sellers>(this);

}
",
  "import { Entity, Index, ManyToOne, PrimaryKey, PrimaryKeyProp, Ref, Unique } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { ProductCountries } from './ProductCountries';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { SellerProducts } from './SellerProducts';

@Entity()
@Index({ name: 'product_id_idx', expression: 'create index \`product_id_idx\` on \`sales\` (\`product_id\`)')
@Unique({ name: 'product_id__size__color_id-UNIQUE', expression: 'create unique index \`product_id__size__color_id-UNIQUE\` on \`sales\` (\`product_id\`, \`color_id\`, \`size\`)')
export class Sales {

  [PrimaryKeyProp]?: 'saleId';

  @PrimaryKey()
  saleId!: number;

  @ManyToOne({ entity: () => ProductColors, ref: true, fieldNames: ['color_id', 'product_id'], nullable: true, index: 'fk_sales_product_colors1_idx' })
  color?: Ref<ProductColors>;

  @ManyToOne({ entity: () => ProductSizes, ref: true, fieldNames: ['size', 'product_id'], nullable: true, index: 'fk_sales_product_sizes1_idx' })
  size?: Ref<ProductSizes>;

  @ManyToOne({ entity: () => SellerProducts, ref: true, fieldNames: ['seller_id', 'exchanged_product_id'], nullable: true, index: 'fk_sales_seller_products2_idx' })
  exchanged?: Ref<SellerProducts>;

  @ManyToOne({ entity: () => ProductCountries, ref: true, fieldNames: ['country', 'product_id'], index: 'fk_sales_product_countries1_idx' })
  productCountries!: Ref<ProductCountries>;

  @ManyToOne({ entity: () => SellerCountries, ref: true, fieldNames: ['country', 'seller_id'], index: 'fk_sales_seller_countries1_idx' })
  sellerCountries!: Ref<SellerCountries>;

  @ManyToOne({ entity: () => SellerProducts, ref: true, fieldNames: ['seller_id', 'product_id'], index: 'fk_sales_seller_products1_idx' })
  fkSalesSellerProducts1!: Ref<SellerProducts>;

}
",
  "import { Collection, Entity, ManyToOne, OneToMany, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Sales } from './Sales';
import { Sellers } from './Sellers';

@Entity()
export class SellerCountries {

  [PrimaryKeyProp]?: ['country', 'seller'];

  @ManyToOne({ entity: () => Countries, ref: true, fieldName: 'country', primary: true })
  country!: Ref<Countries>;

  @ManyToOne({ entity: () => Sellers, ref: true, fieldName: 'seller_id', primary: true, index: 'fk_seller_countries_sellers1_idx' })
  seller!: Ref<Sellers>;

  @OneToMany({ entity: () => Sales, mappedBy: 'sellerCountries' })
  sellerCountriesInverse = new Collection<Sales>(this);

}
",
  "import { Collection, Entity, ManyToOne, OneToMany, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Products } from './Products';
import { Sales } from './Sales';
import { Sellers } from './Sellers';

@Entity()
export class SellerProducts {

  [PrimaryKeyProp]?: ['seller', 'product'];

  @ManyToOne({ entity: () => Sellers, ref: true, fieldName: 'seller_id', primary: true })
  seller!: Ref<Sellers>;

  @ManyToOne({ entity: () => Products, ref: true, fieldName: 'product_id', primary: true, index: 'fk_seller_products_products1_idx' })
  product!: Ref<Products>;

  @OneToMany({ entity: () => Sales, mappedBy: 'exchanged' })
  exchangedInverse = new Collection<Sales>(this);

  @OneToMany({ entity: () => Sales, mappedBy: 'fkSalesSellerProducts1' })
  fkSalesSellerProducts1Inverse = new Collection<Sales>(this);

}
",
  "import { Collection, Entity, ManyToMany, OneToMany, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Products } from './Products';
import { SellerProducts } from './SellerProducts';

@Entity()
export class Sellers {

  [PrimaryKeyProp]?: 'sellerId';

  @PrimaryKey()
  sellerId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property({ length: 255 })
  name!: string;

  @ManyToMany({ entity: () => Products, pivotTable: 'seller_products', pivotEntity: () => SellerProducts, joinColumn: 'seller_id', inverseJoinColumn: 'product_id' })
  sellerProducts = new Collection<Products>(this);

  @ManyToMany({ entity: () => Countries, mappedBy: 'sellerCountries' })
  sellerCountriesInverse = new Collection<Countries>(this);

  @OneToMany({ entity: () => SellerProducts, mappedBy: 'seller' })
  sellerInverse = new Collection<SellerProducts>(this);

}
",
]
`;

exports[`4898 ambiguous_fk_example scalarPropertiesForRelations=smart bidirectionalRelations=true identifiedReferences=true entitySchema=true: dump 1`] = `
[
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { Products } from './Products';

export class Colors {
  [PrimaryKeyProp]?: 'colorId';
  colorId!: number;
  name!: string;
  productColors = new Collection<Products>(this);
  colorInverse = new Collection<ProductColors>(this);
}

export const ColorsSchema = new EntitySchema({
  class: Colors,
  properties: {
    colorId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255, unique: 'name_UNIQUE' },
    productColors: {
      kind: 'm:n',
      entity: () => Products,
      pivotTable: 'product_colors',
      pivotEntity: () => ProductColors,
      joinColumn: 'color_id',
      inverseJoinColumn: 'product_id',
    },
    colorInverse: { kind: '1:m', entity: () => ProductColors, mappedBy: 'color' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { Sellers } from './Sellers';

export class Countries {
  [PrimaryKeyProp]?: 'country';
  country!: unknown;
  productCountries = new Collection<ProductSizes>(this);
  sellerCountries = new Collection<Sellers>(this);
  countryInverse = new Collection<SellerCountries>(this);
}

export const CountriesSchema = new EntitySchema({
  class: Countries,
  properties: {
    country: { primary: true, type: 'unknown', columnType: 'char(2)' },
    productCountries: {
      kind: 'm:n',
      entity: () => ProductSizes,
      pivotTable: 'product_countries',
      pivotEntity: () => ProductCountries,
      joinColumn: 'country',
      inverseJoinColumn: 'product_id',
    },
    sellerCountries: {
      kind: 'm:n',
      entity: () => Sellers,
      pivotTable: 'seller_countries',
      pivotEntity: () => SellerCountries,
      joinColumn: 'country',
      inverseJoinColumn: 'seller_id',
    },
    countryInverse: { kind: '1:m', entity: () => SellerCountries, mappedBy: 'country' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Colors } from './Colors';
import { Products } from './Products';
import { Sales } from './Sales';

export class ProductColors {
  [PrimaryKeyProp]?: ['color', 'product'];
  color!: Ref<Colors>;
  product!: Ref<Products>;
  colorInverse = new Collection<Sales>(this);
}

export const ProductColorsSchema = new EntitySchema({
  class: ProductColors,
  properties: {
    color: {
      primary: true,
      kind: 'm:1',
      entity: () => Colors,
      ref: true,
      fieldName: 'color_id',
    },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => Products,
      ref: true,
      fieldName: 'product_id',
      index: 'fk_product_colors_products1_idx',
    },
    colorInverse: { kind: '1:m', entity: () => Sales, mappedBy: 'color' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { ProductSizes } from './ProductSizes';
import { Sales } from './Sales';

export class ProductCountries {
  [PrimaryKeyProp]?: ['country', 'product'];
  country!: Ref<Countries>;
  product!: Ref<ProductSizes>;
  productCountriesInverse = new Collection<Sales>(this);
}

export const ProductCountriesSchema = new EntitySchema({
  class: ProductCountries,
  properties: {
    country: {
      primary: true,
      kind: 'm:1',
      entity: () => Countries,
      ref: true,
      fieldName: 'country',
    },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => ProductSizes,
      ref: true,
      fieldName: 'product_id',
      index: 'fk_product_countries_product_sizes1_idx',
    },
    productCountriesInverse: { kind: '1:m', entity: () => Sales, mappedBy: 'productCountries' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { ProductCountries } from './ProductCountries';
import { Products } from './Products';
import { Sales } from './Sales';

export class ProductSizes {
  [PrimaryKeyProp]?: 'product';
  product!: Ref<Products>;
  size!: number;
  productCountriesInverse = new Collection<Countries>(this);
  productInverse = new Collection<ProductCountries>(this);
  sizeInverse = new Collection<Sales>(this);
}

export const ProductSizesSchema = new EntitySchema({
  class: ProductSizes,
  properties: {
    product: {
      primary: true,
      kind: '1:1',
      entity: () => Products,
      ref: true,
      fieldName: 'product_id',
    },
    size: { type: 'number', columnType: 'smallint' },
    productCountriesInverse: { kind: 'm:n', entity: () => Countries, mappedBy: 'productCountries' },
    productInverse: { kind: '1:m', entity: () => ProductCountries, mappedBy: 'product' },
    sizeInverse: { kind: '1:m', entity: () => Sales, mappedBy: 'size' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Colors } from './Colors';
import { SellerProducts } from './SellerProducts';
import { Sellers } from './Sellers';

export class Products {
  [PrimaryKeyProp]?: 'productId';
  productId!: number;
  name!: string;
  productColorsInverse = new Collection<Colors>(this);
  productInverse = new Collection<SellerProducts>(this);
  sellerProductsInverse = new Collection<Sellers>(this);
}

export const ProductsSchema = new EntitySchema({
  class: Products,
  properties: {
    productId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255, unique: 'name_UNIQUE' },
    productColorsInverse: { kind: 'm:n', entity: () => Colors, mappedBy: 'productColors' },
    productInverse: { kind: '1:m', entity: () => SellerProducts, mappedBy: 'product' },
    sellerProductsInverse: { kind: 'm:n', entity: () => Sellers, mappedBy: 'sellerProducts' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { ProductColors } from './ProductColors';
import { ProductCountries } from './ProductCountries';
import { ProductSizes } from './ProductSizes';
import { SellerCountries } from './SellerCountries';
import { SellerProducts } from './SellerProducts';

export class Sales {
  [PrimaryKeyProp]?: 'saleId';
  saleId!: number;
  color?: Ref<ProductColors>;
  size?: Ref<ProductSizes>;
  exchanged?: Ref<SellerProducts>;
  productCountries!: Ref<ProductCountries>;
  sellerCountries!: Ref<SellerCountries>;
  fkSalesSellerProducts1!: Ref<SellerProducts>;
}

export const SalesSchema = new EntitySchema({
  class: Sales,
  indexes: [
    { name: 'product_id_idx', expression: 'create index \`product_id_idx\` on \`sales\` (\`product_id\`)' },
  ],
  uniques: [
    { name: 'product_id__size__color_id-UNIQUE', expression: 'create unique index \`product_id__size__color_id-UNIQUE\` on \`sales\` (\`product_id\`, \`color_id\`, \`size\`)' },
  ],
  properties: {
    saleId: { primary: true, type: 'number' },
    color: {
      kind: 'm:1',
      entity: () => ProductColors,
      ref: true,
      fieldNames: [
        'color_id',
        'product_id'
      ],
      nullable: true,
      index: 'fk_sales_product_colors1_idx',
    },
    size: {
      kind: 'm:1',
      entity: () => ProductSizes,
      ref: true,
      fieldNames: [
        'size',
        'product_id'
      ],
      nullable: true,
      index: 'fk_sales_product_sizes1_idx',
    },
    exchanged: {
      kind: 'm:1',
      entity: () => SellerProducts,
      ref: true,
      fieldNames: [
        'seller_id',
        'exchanged_product_id'
      ],
      nullable: true,
      index: 'fk_sales_seller_products2_idx',
    },
    productCountries: {
      kind: 'm:1',
      entity: () => ProductCountries,
      ref: true,
      fieldNames: [
        'country',
        'product_id'
      ],
      index: 'fk_sales_product_countries1_idx',
    },
    sellerCountries: {
      kind: 'm:1',
      entity: () => SellerCountries,
      ref: true,
      fieldNames: [
        'country',
        'seller_id'
      ],
      index: 'fk_sales_seller_countries1_idx',
    },
    fkSalesSellerProducts1: {
      kind: 'm:1',
      entity: () => SellerProducts,
      ref: true,
      fieldNames: [
        'seller_id',
        'product_id'
      ],
      index: 'fk_sales_seller_products1_idx',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Sales } from './Sales';
import { Sellers } from './Sellers';

export class SellerCountries {
  [PrimaryKeyProp]?: ['country', 'seller'];
  country!: Ref<Countries>;
  seller!: Ref<Sellers>;
  sellerCountriesInverse = new Collection<Sales>(this);
}

export const SellerCountriesSchema = new EntitySchema({
  class: SellerCountries,
  properties: {
    country: {
      primary: true,
      kind: 'm:1',
      entity: () => Countries,
      ref: true,
      fieldName: 'country',
    },
    seller: {
      primary: true,
      kind: 'm:1',
      entity: () => Sellers,
      ref: true,
      fieldName: 'seller_id',
      index: 'fk_seller_countries_sellers1_idx',
    },
    sellerCountriesInverse: { kind: '1:m', entity: () => Sales, mappedBy: 'sellerCountries' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Products } from './Products';
import { Sales } from './Sales';
import { Sellers } from './Sellers';

export class SellerProducts {
  [PrimaryKeyProp]?: ['seller', 'product'];
  seller!: Ref<Sellers>;
  product!: Ref<Products>;
  exchangedInverse = new Collection<Sales>(this);
  fkSalesSellerProducts1Inverse = new Collection<Sales>(this);
}

export const SellerProductsSchema = new EntitySchema({
  class: SellerProducts,
  properties: {
    seller: {
      primary: true,
      kind: 'm:1',
      entity: () => Sellers,
      ref: true,
      fieldName: 'seller_id',
    },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => Products,
      ref: true,
      fieldName: 'product_id',
      index: 'fk_seller_products_products1_idx',
    },
    exchangedInverse: { kind: '1:m', entity: () => Sales, mappedBy: 'exchanged' },
    fkSalesSellerProducts1Inverse: { kind: '1:m', entity: () => Sales, mappedBy: 'fkSalesSellerProducts1' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Products } from './Products';
import { SellerProducts } from './SellerProducts';

export class Sellers {
  [PrimaryKeyProp]?: 'sellerId';
  sellerId!: number;
  name!: string;
  sellerProducts = new Collection<Products>(this);
  sellerCountriesInverse = new Collection<Countries>(this);
  sellerInverse = new Collection<SellerProducts>(this);
}

export const SellersSchema = new EntitySchema({
  class: Sellers,
  properties: {
    sellerId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255, unique: 'name_UNIQUE' },
    sellerProducts: {
      kind: 'm:n',
      entity: () => Products,
      pivotTable: 'seller_products',
      pivotEntity: () => SellerProducts,
      joinColumn: 'seller_id',
      inverseJoinColumn: 'product_id',
    },
    sellerCountriesInverse: { kind: 'm:n', entity: () => Countries, mappedBy: 'sellerCountries' },
    sellerInverse: { kind: '1:m', entity: () => SellerProducts, mappedBy: 'seller' },
  },
});
",
]
`;

exports[`4898 fk_index_selection_example scalarPropertiesForRelations=always bidirectionalRelations=false identifiedReferences=false entitySchema=false: dump 1`] = `
[
  "import { Entity, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';

@Entity()
export class Cars {

  [PrimaryKeyProp]?: ['carBrand', 'carYear'];

  @PrimaryKey({ length: 255 })
  carBrand!: string;

  @PrimaryKey({ columnType: 'year' })
  carYear!: unknown;

}
",
  "import { Entity, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';

@Entity()
export class FashionableColors {

  [PrimaryKeyProp]?: ['year', 'color'];

  @PrimaryKey({ columnType: 'year' })
  year!: unknown;

  @PrimaryKey({ length: 255 })
  color!: string;

}
",
  "import { Entity, Index, ManyToOne, PrimaryKey, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { FashionableColors } from './FashionableColors';

@Entity()
@Index({ name: 'favorites_idx', properties: ['favoriteColor', 'favoriteBook'] })
export class Users {

  [PrimaryKeyProp]?: 'userId';

  @PrimaryKey()
  userId!: number;

  @ManyToOne({ entity: () => FashionableColors, fieldNames: ['favorite_car_year', 'favorite_color'], nullable: true, index: 'fk_users_fashionable_colors1_idx' })
  favorite?: FashionableColors;

  @Index({ name: 'fk_users_cars_idx' })
  @Property({ length: 255, nullable: true, persist: false })
  favoriteCarBrand?: string;

  @Property({ columnType: 'year', nullable: true, persist: false })
  favoriteCarYear?: unknown;

  @Property({ length: 255, nullable: true, persist: false })
  favoriteColor?: string;

  @Property({ length: 255, nullable: true })
  favoriteBook?: string;

}
",
]
`;

exports[`4898 fk_index_selection_example scalarPropertiesForRelations=always bidirectionalRelations=false identifiedReferences=false entitySchema=true: dump 1`] = `
[
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Cars {
  [PrimaryKeyProp]?: ['carBrand', 'carYear'];
  carBrand!: string;
  carYear!: unknown;
}

export const CarsSchema = new EntitySchema({
  class: Cars,
  properties: {
    carBrand: { primary: true, type: 'string', length: 255 },
    carYear: { primary: true, type: 'unknown', columnType: 'year' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class FashionableColors {
  [PrimaryKeyProp]?: ['year', 'color'];
  year!: unknown;
  color!: string;
}

export const FashionableColorsSchema = new EntitySchema({
  class: FashionableColors,
  properties: {
    year: { primary: true, type: 'unknown', columnType: 'year' },
    color: { primary: true, type: 'string', length: 255 },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Users {
  [PrimaryKeyProp]?: 'userId';
  userId!: number;
  favorite?: FashionableColors;
  favoriteCarBrand?: string;
  favoriteCarYear?: unknown;
  favoriteColor?: string;
  favoriteBook?: string;
}

export const UsersSchema = new EntitySchema({
  class: Users,
  indexes: [
    { name: 'favorites_idx', properties: ['favoriteColor', 'favoriteBook'] },
  ],
  uniques: [
  ],
  properties: {
    userId: { primary: true, type: 'number' },
    favorite: {
      kind: 'm:1',
      entity: () => FashionableColors,
      fieldNames: [
        'favorite_car_year',
        'favorite_color'
      ],
      nullable: true,
      index: 'fk_users_fashionable_colors1_idx',
    },
    favoriteCarBrand: {
      type: 'string',
      length: 255,
      nullable: true,
      persist: false,
      index: 'fk_users_cars_idx',
    },
    favoriteCarYear: { type: 'unknown', columnType: 'year', nullable: true, persist: false },
    favoriteColor: { type: 'string', length: 255, nullable: true, persist: false },
    favoriteBook: { type: 'string', length: 255, nullable: true },
  },
});
",
]
`;

exports[`4898 fk_index_selection_example scalarPropertiesForRelations=always bidirectionalRelations=false identifiedReferences=true entitySchema=false: dump 1`] = `
[
  "import { Entity, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';

@Entity()
export class Cars {

  [PrimaryKeyProp]?: ['carBrand', 'carYear'];

  @PrimaryKey({ length: 255 })
  carBrand!: string;

  @PrimaryKey({ columnType: 'year' })
  carYear!: unknown;

}
",
  "import { Entity, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';

@Entity()
export class FashionableColors {

  [PrimaryKeyProp]?: ['year', 'color'];

  @PrimaryKey({ columnType: 'year' })
  year!: unknown;

  @PrimaryKey({ length: 255 })
  color!: string;

}
",
  "import { Entity, Index, ManyToOne, PrimaryKey, PrimaryKeyProp, Property, Ref } from '@mikro-orm/core';
import { FashionableColors } from './FashionableColors';

@Entity()
@Index({ name: 'favorites_idx', properties: ['favoriteColor', 'favoriteBook'] })
export class Users {

  [PrimaryKeyProp]?: 'userId';

  @PrimaryKey()
  userId!: number;

  @ManyToOne({ entity: () => FashionableColors, ref: true, fieldNames: ['favorite_car_year', 'favorite_color'], nullable: true, index: 'fk_users_fashionable_colors1_idx' })
  favorite?: Ref<FashionableColors>;

  @Index({ name: 'fk_users_cars_idx' })
  @Property({ length: 255, nullable: true, persist: false })
  favoriteCarBrand?: string;

  @Property({ columnType: 'year', nullable: true, persist: false })
  favoriteCarYear?: unknown;

  @Property({ length: 255, nullable: true, persist: false })
  favoriteColor?: string;

  @Property({ length: 255, nullable: true })
  favoriteBook?: string;

}
",
]
`;

exports[`4898 fk_index_selection_example scalarPropertiesForRelations=always bidirectionalRelations=false identifiedReferences=true entitySchema=true: dump 1`] = `
[
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Cars {
  [PrimaryKeyProp]?: ['carBrand', 'carYear'];
  carBrand!: string;
  carYear!: unknown;
}

export const CarsSchema = new EntitySchema({
  class: Cars,
  properties: {
    carBrand: { primary: true, type: 'string', length: 255 },
    carYear: { primary: true, type: 'unknown', columnType: 'year' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class FashionableColors {
  [PrimaryKeyProp]?: ['year', 'color'];
  year!: unknown;
  color!: string;
}

export const FashionableColorsSchema = new EntitySchema({
  class: FashionableColors,
  properties: {
    year: { primary: true, type: 'unknown', columnType: 'year' },
    color: { primary: true, type: 'string', length: 255 },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { FashionableColors } from './FashionableColors';

export class Users {
  [PrimaryKeyProp]?: 'userId';
  userId!: number;
  favorite?: Ref<FashionableColors>;
  favoriteCarBrand?: string;
  favoriteCarYear?: unknown;
  favoriteColor?: string;
  favoriteBook?: string;
}

export const UsersSchema = new EntitySchema({
  class: Users,
  indexes: [
    { name: 'favorites_idx', properties: ['favoriteColor', 'favoriteBook'] },
  ],
  uniques: [
  ],
  properties: {
    userId: { primary: true, type: 'number' },
    favorite: {
      kind: 'm:1',
      entity: () => FashionableColors,
      ref: true,
      fieldNames: [
        'favorite_car_year',
        'favorite_color'
      ],
      nullable: true,
      index: 'fk_users_fashionable_colors1_idx',
    },
    favoriteCarBrand: {
      type: 'string',
      length: 255,
      nullable: true,
      persist: false,
      index: 'fk_users_cars_idx',
    },
    favoriteCarYear: { type: 'unknown', columnType: 'year', nullable: true, persist: false },
    favoriteColor: { type: 'string', length: 255, nullable: true, persist: false },
    favoriteBook: { type: 'string', length: 255, nullable: true },
  },
});
",
]
`;

exports[`4898 fk_index_selection_example scalarPropertiesForRelations=always bidirectionalRelations=true identifiedReferences=false entitySchema=false: dump 1`] = `
[
  "import { Entity, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';

@Entity()
export class Cars {

  [PrimaryKeyProp]?: ['carBrand', 'carYear'];

  @PrimaryKey({ length: 255 })
  carBrand!: string;

  @PrimaryKey({ columnType: 'year' })
  carYear!: unknown;

}
",
  "import { Collection, Entity, OneToMany, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';
import { Users } from './Users';

@Entity()
export class FashionableColors {

  [PrimaryKeyProp]?: ['year', 'color'];

  @PrimaryKey({ columnType: 'year' })
  year!: unknown;

  @PrimaryKey({ length: 255 })
  color!: string;

  @OneToMany({ entity: () => Users, mappedBy: 'favorite' })
  favoriteInverse = new Collection<Users>(this);

}
",
  "import { Entity, Index, ManyToOne, PrimaryKey, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { FashionableColors } from './FashionableColors';

@Entity()
@Index({ name: 'favorites_idx', properties: ['favoriteColor', 'favoriteBook'] })
export class Users {

  [PrimaryKeyProp]?: 'userId';

  @PrimaryKey()
  userId!: number;

  @ManyToOne({ entity: () => FashionableColors, fieldNames: ['favorite_car_year', 'favorite_color'], nullable: true, index: 'fk_users_fashionable_colors1_idx' })
  favorite?: FashionableColors;

  @Index({ name: 'fk_users_cars_idx' })
  @Property({ length: 255, nullable: true, persist: false })
  favoriteCarBrand?: string;

  @Property({ columnType: 'year', nullable: true, persist: false })
  favoriteCarYear?: unknown;

  @Property({ length: 255, nullable: true, persist: false })
  favoriteColor?: string;

  @Property({ length: 255, nullable: true })
  favoriteBook?: string;

}
",
]
`;

exports[`4898 fk_index_selection_example scalarPropertiesForRelations=always bidirectionalRelations=true identifiedReferences=false entitySchema=true: dump 1`] = `
[
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Cars {
  [PrimaryKeyProp]?: ['carBrand', 'carYear'];
  carBrand!: string;
  carYear!: unknown;
}

export const CarsSchema = new EntitySchema({
  class: Cars,
  properties: {
    carBrand: { primary: true, type: 'string', length: 255 },
    carYear: { primary: true, type: 'unknown', columnType: 'year' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Users } from './Users';

export class FashionableColors {
  [PrimaryKeyProp]?: ['year', 'color'];
  year!: unknown;
  color!: string;
  favoriteInverse = new Collection<Users>(this);
}

export const FashionableColorsSchema = new EntitySchema({
  class: FashionableColors,
  properties: {
    year: { primary: true, type: 'unknown', columnType: 'year' },
    color: { primary: true, type: 'string', length: 255 },
    favoriteInverse: { kind: '1:m', entity: () => Users, mappedBy: 'favorite' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Users {
  [PrimaryKeyProp]?: 'userId';
  userId!: number;
  favorite?: FashionableColors;
  favoriteCarBrand?: string;
  favoriteCarYear?: unknown;
  favoriteColor?: string;
  favoriteBook?: string;
}

export const UsersSchema = new EntitySchema({
  class: Users,
  indexes: [
    { name: 'favorites_idx', properties: ['favoriteColor', 'favoriteBook'] },
  ],
  uniques: [
  ],
  properties: {
    userId: { primary: true, type: 'number' },
    favorite: {
      kind: 'm:1',
      entity: () => FashionableColors,
      fieldNames: [
        'favorite_car_year',
        'favorite_color'
      ],
      nullable: true,
      index: 'fk_users_fashionable_colors1_idx',
    },
    favoriteCarBrand: {
      type: 'string',
      length: 255,
      nullable: true,
      persist: false,
      index: 'fk_users_cars_idx',
    },
    favoriteCarYear: { type: 'unknown', columnType: 'year', nullable: true, persist: false },
    favoriteColor: { type: 'string', length: 255, nullable: true, persist: false },
    favoriteBook: { type: 'string', length: 255, nullable: true },
  },
});
",
]
`;

exports[`4898 fk_index_selection_example scalarPropertiesForRelations=always bidirectionalRelations=true identifiedReferences=true entitySchema=false: dump 1`] = `
[
  "import { Entity, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';

@Entity()
export class Cars {

  [PrimaryKeyProp]?: ['carBrand', 'carYear'];

  @PrimaryKey({ length: 255 })
  carBrand!: string;

  @PrimaryKey({ columnType: 'year' })
  carYear!: unknown;

}
",
  "import { Collection, Entity, OneToMany, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';
import { Users } from './Users';

@Entity()
export class FashionableColors {

  [PrimaryKeyProp]?: ['year', 'color'];

  @PrimaryKey({ columnType: 'year' })
  year!: unknown;

  @PrimaryKey({ length: 255 })
  color!: string;

  @OneToMany({ entity: () => Users, mappedBy: 'favorite' })
  favoriteInverse = new Collection<Users>(this);

}
",
  "import { Entity, Index, ManyToOne, PrimaryKey, PrimaryKeyProp, Property, Ref } from '@mikro-orm/core';
import { FashionableColors } from './FashionableColors';

@Entity()
@Index({ name: 'favorites_idx', properties: ['favoriteColor', 'favoriteBook'] })
export class Users {

  [PrimaryKeyProp]?: 'userId';

  @PrimaryKey()
  userId!: number;

  @ManyToOne({ entity: () => FashionableColors, ref: true, fieldNames: ['favorite_car_year', 'favorite_color'], nullable: true, index: 'fk_users_fashionable_colors1_idx' })
  favorite?: Ref<FashionableColors>;

  @Index({ name: 'fk_users_cars_idx' })
  @Property({ length: 255, nullable: true, persist: false })
  favoriteCarBrand?: string;

  @Property({ columnType: 'year', nullable: true, persist: false })
  favoriteCarYear?: unknown;

  @Property({ length: 255, nullable: true, persist: false })
  favoriteColor?: string;

  @Property({ length: 255, nullable: true })
  favoriteBook?: string;

}
",
]
`;

exports[`4898 fk_index_selection_example scalarPropertiesForRelations=always bidirectionalRelations=true identifiedReferences=true entitySchema=true: dump 1`] = `
[
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Cars {
  [PrimaryKeyProp]?: ['carBrand', 'carYear'];
  carBrand!: string;
  carYear!: unknown;
}

export const CarsSchema = new EntitySchema({
  class: Cars,
  properties: {
    carBrand: { primary: true, type: 'string', length: 255 },
    carYear: { primary: true, type: 'unknown', columnType: 'year' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Users } from './Users';

export class FashionableColors {
  [PrimaryKeyProp]?: ['year', 'color'];
  year!: unknown;
  color!: string;
  favoriteInverse = new Collection<Users>(this);
}

export const FashionableColorsSchema = new EntitySchema({
  class: FashionableColors,
  properties: {
    year: { primary: true, type: 'unknown', columnType: 'year' },
    color: { primary: true, type: 'string', length: 255 },
    favoriteInverse: { kind: '1:m', entity: () => Users, mappedBy: 'favorite' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { FashionableColors } from './FashionableColors';

export class Users {
  [PrimaryKeyProp]?: 'userId';
  userId!: number;
  favorite?: Ref<FashionableColors>;
  favoriteCarBrand?: string;
  favoriteCarYear?: unknown;
  favoriteColor?: string;
  favoriteBook?: string;
}

export const UsersSchema = new EntitySchema({
  class: Users,
  indexes: [
    { name: 'favorites_idx', properties: ['favoriteColor', 'favoriteBook'] },
  ],
  uniques: [
  ],
  properties: {
    userId: { primary: true, type: 'number' },
    favorite: {
      kind: 'm:1',
      entity: () => FashionableColors,
      ref: true,
      fieldNames: [
        'favorite_car_year',
        'favorite_color'
      ],
      nullable: true,
      index: 'fk_users_fashionable_colors1_idx',
    },
    favoriteCarBrand: {
      type: 'string',
      length: 255,
      nullable: true,
      persist: false,
      index: 'fk_users_cars_idx',
    },
    favoriteCarYear: { type: 'unknown', columnType: 'year', nullable: true, persist: false },
    favoriteColor: { type: 'string', length: 255, nullable: true, persist: false },
    favoriteBook: { type: 'string', length: 255, nullable: true },
  },
});
",
]
`;

exports[`4898 fk_index_selection_example scalarPropertiesForRelations=never bidirectionalRelations=false identifiedReferences=false entitySchema=false: dump 1`] = `
[
  "import { Entity, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';

@Entity()
export class Cars {

  [PrimaryKeyProp]?: ['carBrand', 'carYear'];

  @PrimaryKey({ length: 255 })
  carBrand!: string;

  @PrimaryKey({ columnType: 'year' })
  carYear!: unknown;

}
",
  "import { Entity, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';

@Entity()
export class FashionableColors {

  [PrimaryKeyProp]?: ['year', 'color'];

  @PrimaryKey({ columnType: 'year' })
  year!: unknown;

  @PrimaryKey({ length: 255 })
  color!: string;

}
",
  "import { Entity, Index, OneToOne, PrimaryKey, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { FashionableColors } from './FashionableColors';

@Entity()
@Index({ name: 'favorites_idx', expression: 'create index \`favorites_idx\` on \`users\` (\`favorite_car_year\`, \`favorite_color\`, \`favorite_book\`)')
@Index({ name: 'fk_users_cars_idx', expression: 'create index \`fk_users_cars_idx\` on \`users\` (\`favorite_car_brand\`, \`favorite_car_year\`)')
export class Users {

  [PrimaryKeyProp]?: 'userId';

  @PrimaryKey()
  userId!: number;

  @OneToOne({ entity: () => FashionableColors, fieldNames: ['favorite_car_year', 'favorite_color'], nullable: true, index: 'fk_users_fashionable_colors1_idx', unique: 'when_set_unique' })
  favorite?: FashionableColors;

  @Property({ length: 255, nullable: true })
  favoriteBook?: string;

}
",
]
`;

exports[`4898 fk_index_selection_example scalarPropertiesForRelations=never bidirectionalRelations=false identifiedReferences=false entitySchema=true: dump 1`] = `
[
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Cars {
  [PrimaryKeyProp]?: ['carBrand', 'carYear'];
  carBrand!: string;
  carYear!: unknown;
}

export const CarsSchema = new EntitySchema({
  class: Cars,
  properties: {
    carBrand: { primary: true, type: 'string', length: 255 },
    carYear: { primary: true, type: 'unknown', columnType: 'year' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class FashionableColors {
  [PrimaryKeyProp]?: ['year', 'color'];
  year!: unknown;
  color!: string;
}

export const FashionableColorsSchema = new EntitySchema({
  class: FashionableColors,
  properties: {
    year: { primary: true, type: 'unknown', columnType: 'year' },
    color: { primary: true, type: 'string', length: 255 },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Users {
  [PrimaryKeyProp]?: 'userId';
  userId!: number;
  favorite?: FashionableColors;
  favoriteBook?: string;
}

export const UsersSchema = new EntitySchema({
  class: Users,
  indexes: [
    { name: 'favorites_idx', expression: 'create index \`favorites_idx\` on \`users\` (\`favorite_car_year\`, \`favorite_color\`, \`favorite_book\`)' },
    { name: 'fk_users_cars_idx', expression: 'create index \`fk_users_cars_idx\` on \`users\` (\`favorite_car_brand\`, \`favorite_car_year\`)' },
  ],
  uniques: [
  ],
  properties: {
    userId: { primary: true, type: 'number' },
    favorite: {
      kind: '1:1',
      entity: () => FashionableColors,
      fieldNames: [
        'favorite_car_year',
        'favorite_color'
      ],
      nullable: true,
      index: 'fk_users_fashionable_colors1_idx',
      unique: 'when_set_unique',
    },
    favoriteBook: { type: 'string', length: 255, nullable: true },
  },
});
",
]
`;

exports[`4898 fk_index_selection_example scalarPropertiesForRelations=never bidirectionalRelations=false identifiedReferences=true entitySchema=false: dump 1`] = `
[
  "import { Entity, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';

@Entity()
export class Cars {

  [PrimaryKeyProp]?: ['carBrand', 'carYear'];

  @PrimaryKey({ length: 255 })
  carBrand!: string;

  @PrimaryKey({ columnType: 'year' })
  carYear!: unknown;

}
",
  "import { Entity, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';

@Entity()
export class FashionableColors {

  [PrimaryKeyProp]?: ['year', 'color'];

  @PrimaryKey({ columnType: 'year' })
  year!: unknown;

  @PrimaryKey({ length: 255 })
  color!: string;

}
",
  "import { Entity, Index, OneToOne, PrimaryKey, PrimaryKeyProp, Property, Ref } from '@mikro-orm/core';
import { FashionableColors } from './FashionableColors';

@Entity()
@Index({ name: 'favorites_idx', expression: 'create index \`favorites_idx\` on \`users\` (\`favorite_car_year\`, \`favorite_color\`, \`favorite_book\`)')
@Index({ name: 'fk_users_cars_idx', expression: 'create index \`fk_users_cars_idx\` on \`users\` (\`favorite_car_brand\`, \`favorite_car_year\`)')
export class Users {

  [PrimaryKeyProp]?: 'userId';

  @PrimaryKey()
  userId!: number;

  @OneToOne({ entity: () => FashionableColors, ref: true, fieldNames: ['favorite_car_year', 'favorite_color'], nullable: true, index: 'fk_users_fashionable_colors1_idx', unique: 'when_set_unique' })
  favorite?: Ref<FashionableColors>;

  @Property({ length: 255, nullable: true })
  favoriteBook?: string;

}
",
]
`;

exports[`4898 fk_index_selection_example scalarPropertiesForRelations=never bidirectionalRelations=false identifiedReferences=true entitySchema=true: dump 1`] = `
[
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Cars {
  [PrimaryKeyProp]?: ['carBrand', 'carYear'];
  carBrand!: string;
  carYear!: unknown;
}

export const CarsSchema = new EntitySchema({
  class: Cars,
  properties: {
    carBrand: { primary: true, type: 'string', length: 255 },
    carYear: { primary: true, type: 'unknown', columnType: 'year' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class FashionableColors {
  [PrimaryKeyProp]?: ['year', 'color'];
  year!: unknown;
  color!: string;
}

export const FashionableColorsSchema = new EntitySchema({
  class: FashionableColors,
  properties: {
    year: { primary: true, type: 'unknown', columnType: 'year' },
    color: { primary: true, type: 'string', length: 255 },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { FashionableColors } from './FashionableColors';

export class Users {
  [PrimaryKeyProp]?: 'userId';
  userId!: number;
  favorite?: Ref<FashionableColors>;
  favoriteBook?: string;
}

export const UsersSchema = new EntitySchema({
  class: Users,
  indexes: [
    { name: 'favorites_idx', expression: 'create index \`favorites_idx\` on \`users\` (\`favorite_car_year\`, \`favorite_color\`, \`favorite_book\`)' },
    { name: 'fk_users_cars_idx', expression: 'create index \`fk_users_cars_idx\` on \`users\` (\`favorite_car_brand\`, \`favorite_car_year\`)' },
  ],
  uniques: [
  ],
  properties: {
    userId: { primary: true, type: 'number' },
    favorite: {
      kind: '1:1',
      entity: () => FashionableColors,
      ref: true,
      fieldNames: [
        'favorite_car_year',
        'favorite_color'
      ],
      nullable: true,
      index: 'fk_users_fashionable_colors1_idx',
      unique: 'when_set_unique',
    },
    favoriteBook: { type: 'string', length: 255, nullable: true },
  },
});
",
]
`;

exports[`4898 fk_index_selection_example scalarPropertiesForRelations=never bidirectionalRelations=true identifiedReferences=false entitySchema=false: dump 1`] = `
[
  "import { Entity, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';

@Entity()
export class Cars {

  [PrimaryKeyProp]?: ['carBrand', 'carYear'];

  @PrimaryKey({ length: 255 })
  carBrand!: string;

  @PrimaryKey({ columnType: 'year' })
  carYear!: unknown;

}
",
  "import { Entity, OneToOne, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';
import { Users } from './Users';

@Entity()
export class FashionableColors {

  [PrimaryKeyProp]?: ['year', 'color'];

  @PrimaryKey({ columnType: 'year' })
  year!: unknown;

  @PrimaryKey({ length: 255 })
  color!: string;

  @OneToOne({ entity: () => Users, mappedBy: 'favorite' })
  favoriteInverse?: Users;

}
",
  "import { Entity, Index, OneToOne, PrimaryKey, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { FashionableColors } from './FashionableColors';

@Entity()
@Index({ name: 'favorites_idx', expression: 'create index \`favorites_idx\` on \`users\` (\`favorite_car_year\`, \`favorite_color\`, \`favorite_book\`)')
@Index({ name: 'fk_users_cars_idx', expression: 'create index \`fk_users_cars_idx\` on \`users\` (\`favorite_car_brand\`, \`favorite_car_year\`)')
export class Users {

  [PrimaryKeyProp]?: 'userId';

  @PrimaryKey()
  userId!: number;

  @OneToOne({ entity: () => FashionableColors, fieldNames: ['favorite_car_year', 'favorite_color'], nullable: true, index: 'fk_users_fashionable_colors1_idx', unique: 'when_set_unique' })
  favorite?: FashionableColors;

  @Property({ length: 255, nullable: true })
  favoriteBook?: string;

}
",
]
`;

exports[`4898 fk_index_selection_example scalarPropertiesForRelations=never bidirectionalRelations=true identifiedReferences=false entitySchema=true: dump 1`] = `
[
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Cars {
  [PrimaryKeyProp]?: ['carBrand', 'carYear'];
  carBrand!: string;
  carYear!: unknown;
}

export const CarsSchema = new EntitySchema({
  class: Cars,
  properties: {
    carBrand: { primary: true, type: 'string', length: 255 },
    carYear: { primary: true, type: 'unknown', columnType: 'year' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class FashionableColors {
  [PrimaryKeyProp]?: ['year', 'color'];
  year!: unknown;
  color!: string;
  favoriteInverse?: Users;
}

export const FashionableColorsSchema = new EntitySchema({
  class: FashionableColors,
  properties: {
    year: { primary: true, type: 'unknown', columnType: 'year' },
    color: { primary: true, type: 'string', length: 255 },
    favoriteInverse: { kind: '1:1', entity: () => Users, mappedBy: 'favorite' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Users {
  [PrimaryKeyProp]?: 'userId';
  userId!: number;
  favorite?: FashionableColors;
  favoriteBook?: string;
}

export const UsersSchema = new EntitySchema({
  class: Users,
  indexes: [
    { name: 'favorites_idx', expression: 'create index \`favorites_idx\` on \`users\` (\`favorite_car_year\`, \`favorite_color\`, \`favorite_book\`)' },
    { name: 'fk_users_cars_idx', expression: 'create index \`fk_users_cars_idx\` on \`users\` (\`favorite_car_brand\`, \`favorite_car_year\`)' },
  ],
  uniques: [
  ],
  properties: {
    userId: { primary: true, type: 'number' },
    favorite: {
      kind: '1:1',
      entity: () => FashionableColors,
      fieldNames: [
        'favorite_car_year',
        'favorite_color'
      ],
      nullable: true,
      index: 'fk_users_fashionable_colors1_idx',
      unique: 'when_set_unique',
    },
    favoriteBook: { type: 'string', length: 255, nullable: true },
  },
});
",
]
`;

exports[`4898 fk_index_selection_example scalarPropertiesForRelations=never bidirectionalRelations=true identifiedReferences=true entitySchema=false: dump 1`] = `
[
  "import { Entity, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';

@Entity()
export class Cars {

  [PrimaryKeyProp]?: ['carBrand', 'carYear'];

  @PrimaryKey({ length: 255 })
  carBrand!: string;

  @PrimaryKey({ columnType: 'year' })
  carYear!: unknown;

}
",
  "import { Entity, OneToOne, PrimaryKey, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Users } from './Users';

@Entity()
export class FashionableColors {

  [PrimaryKeyProp]?: ['year', 'color'];

  @PrimaryKey({ columnType: 'year' })
  year!: unknown;

  @PrimaryKey({ length: 255 })
  color!: string;

  @OneToOne({ entity: () => Users, ref: true, mappedBy: 'favorite' })
  favoriteInverse?: Ref<Users>;

}
",
  "import { Entity, Index, OneToOne, PrimaryKey, PrimaryKeyProp, Property, Ref } from '@mikro-orm/core';
import { FashionableColors } from './FashionableColors';

@Entity()
@Index({ name: 'favorites_idx', expression: 'create index \`favorites_idx\` on \`users\` (\`favorite_car_year\`, \`favorite_color\`, \`favorite_book\`)')
@Index({ name: 'fk_users_cars_idx', expression: 'create index \`fk_users_cars_idx\` on \`users\` (\`favorite_car_brand\`, \`favorite_car_year\`)')
export class Users {

  [PrimaryKeyProp]?: 'userId';

  @PrimaryKey()
  userId!: number;

  @OneToOne({ entity: () => FashionableColors, ref: true, fieldNames: ['favorite_car_year', 'favorite_color'], nullable: true, index: 'fk_users_fashionable_colors1_idx', unique: 'when_set_unique' })
  favorite?: Ref<FashionableColors>;

  @Property({ length: 255, nullable: true })
  favoriteBook?: string;

}
",
]
`;

exports[`4898 fk_index_selection_example scalarPropertiesForRelations=never bidirectionalRelations=true identifiedReferences=true entitySchema=true: dump 1`] = `
[
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Cars {
  [PrimaryKeyProp]?: ['carBrand', 'carYear'];
  carBrand!: string;
  carYear!: unknown;
}

export const CarsSchema = new EntitySchema({
  class: Cars,
  properties: {
    carBrand: { primary: true, type: 'string', length: 255 },
    carYear: { primary: true, type: 'unknown', columnType: 'year' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Users } from './Users';

export class FashionableColors {
  [PrimaryKeyProp]?: ['year', 'color'];
  year!: unknown;
  color!: string;
  favoriteInverse?: Ref<Users>;
}

export const FashionableColorsSchema = new EntitySchema({
  class: FashionableColors,
  properties: {
    year: { primary: true, type: 'unknown', columnType: 'year' },
    color: { primary: true, type: 'string', length: 255 },
    favoriteInverse: { kind: '1:1', entity: () => Users, ref: true, mappedBy: 'favorite' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { FashionableColors } from './FashionableColors';

export class Users {
  [PrimaryKeyProp]?: 'userId';
  userId!: number;
  favorite?: Ref<FashionableColors>;
  favoriteBook?: string;
}

export const UsersSchema = new EntitySchema({
  class: Users,
  indexes: [
    { name: 'favorites_idx', expression: 'create index \`favorites_idx\` on \`users\` (\`favorite_car_year\`, \`favorite_color\`, \`favorite_book\`)' },
    { name: 'fk_users_cars_idx', expression: 'create index \`fk_users_cars_idx\` on \`users\` (\`favorite_car_brand\`, \`favorite_car_year\`)' },
  ],
  uniques: [
  ],
  properties: {
    userId: { primary: true, type: 'number' },
    favorite: {
      kind: '1:1',
      entity: () => FashionableColors,
      ref: true,
      fieldNames: [
        'favorite_car_year',
        'favorite_color'
      ],
      nullable: true,
      index: 'fk_users_fashionable_colors1_idx',
      unique: 'when_set_unique',
    },
    favoriteBook: { type: 'string', length: 255, nullable: true },
  },
});
",
]
`;

exports[`4898 fk_index_selection_example scalarPropertiesForRelations=smart bidirectionalRelations=false identifiedReferences=false entitySchema=false: dump 1`] = `
[
  "import { Entity, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';

@Entity()
export class Cars {

  [PrimaryKeyProp]?: ['carBrand', 'carYear'];

  @PrimaryKey({ length: 255 })
  carBrand!: string;

  @PrimaryKey({ columnType: 'year' })
  carYear!: unknown;

}
",
  "import { Entity, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';

@Entity()
export class FashionableColors {

  [PrimaryKeyProp]?: ['year', 'color'];

  @PrimaryKey({ columnType: 'year' })
  year!: unknown;

  @PrimaryKey({ length: 255 })
  color!: string;

}
",
  "import { Entity, Index, OneToOne, PrimaryKey, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { FashionableColors } from './FashionableColors';

@Entity()
@Index({ name: 'favorites_idx', expression: 'create index \`favorites_idx\` on \`users\` (\`favorite_car_year\`, \`favorite_color\`, \`favorite_book\`)')
@Index({ name: 'fk_users_cars_idx', expression: 'create index \`fk_users_cars_idx\` on \`users\` (\`favorite_car_brand\`, \`favorite_car_year\`)')
export class Users {

  [PrimaryKeyProp]?: 'userId';

  @PrimaryKey()
  userId!: number;

  @OneToOne({ entity: () => FashionableColors, fieldNames: ['favorite_car_year', 'favorite_color'], nullable: true, index: 'fk_users_fashionable_colors1_idx', unique: 'when_set_unique' })
  favorite?: FashionableColors;

  @Property({ columnType: 'year', nullable: true, persist: false })
  favoriteCarYear?: unknown;

  @Property({ length: 255, nullable: true })
  favoriteBook?: string;

}
",
]
`;

exports[`4898 fk_index_selection_example scalarPropertiesForRelations=smart bidirectionalRelations=false identifiedReferences=false entitySchema=true: dump 1`] = `
[
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Cars {
  [PrimaryKeyProp]?: ['carBrand', 'carYear'];
  carBrand!: string;
  carYear!: unknown;
}

export const CarsSchema = new EntitySchema({
  class: Cars,
  properties: {
    carBrand: { primary: true, type: 'string', length: 255 },
    carYear: { primary: true, type: 'unknown', columnType: 'year' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class FashionableColors {
  [PrimaryKeyProp]?: ['year', 'color'];
  year!: unknown;
  color!: string;
}

export const FashionableColorsSchema = new EntitySchema({
  class: FashionableColors,
  properties: {
    year: { primary: true, type: 'unknown', columnType: 'year' },
    color: { primary: true, type: 'string', length: 255 },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Users {
  [PrimaryKeyProp]?: 'userId';
  userId!: number;
  favorite?: FashionableColors;
  favoriteCarYear?: unknown;
  favoriteBook?: string;
}

export const UsersSchema = new EntitySchema({
  class: Users,
  indexes: [
    { name: 'favorites_idx', expression: 'create index \`favorites_idx\` on \`users\` (\`favorite_car_year\`, \`favorite_color\`, \`favorite_book\`)' },
    { name: 'fk_users_cars_idx', expression: 'create index \`fk_users_cars_idx\` on \`users\` (\`favorite_car_brand\`, \`favorite_car_year\`)' },
  ],
  uniques: [
  ],
  properties: {
    userId: { primary: true, type: 'number' },
    favorite: {
      kind: '1:1',
      entity: () => FashionableColors,
      fieldNames: [
        'favorite_car_year',
        'favorite_color'
      ],
      nullable: true,
      index: 'fk_users_fashionable_colors1_idx',
      unique: 'when_set_unique',
    },
    favoriteCarYear: { type: 'unknown', columnType: 'year', nullable: true, persist: false },
    favoriteBook: { type: 'string', length: 255, nullable: true },
  },
});
",
]
`;

exports[`4898 fk_index_selection_example scalarPropertiesForRelations=smart bidirectionalRelations=false identifiedReferences=true entitySchema=false: dump 1`] = `
[
  "import { Entity, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';

@Entity()
export class Cars {

  [PrimaryKeyProp]?: ['carBrand', 'carYear'];

  @PrimaryKey({ length: 255 })
  carBrand!: string;

  @PrimaryKey({ columnType: 'year' })
  carYear!: unknown;

}
",
  "import { Entity, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';

@Entity()
export class FashionableColors {

  [PrimaryKeyProp]?: ['year', 'color'];

  @PrimaryKey({ columnType: 'year' })
  year!: unknown;

  @PrimaryKey({ length: 255 })
  color!: string;

}
",
  "import { Entity, Index, OneToOne, PrimaryKey, PrimaryKeyProp, Property, Ref } from '@mikro-orm/core';
import { FashionableColors } from './FashionableColors';

@Entity()
@Index({ name: 'favorites_idx', expression: 'create index \`favorites_idx\` on \`users\` (\`favorite_car_year\`, \`favorite_color\`, \`favorite_book\`)')
@Index({ name: 'fk_users_cars_idx', expression: 'create index \`fk_users_cars_idx\` on \`users\` (\`favorite_car_brand\`, \`favorite_car_year\`)')
export class Users {

  [PrimaryKeyProp]?: 'userId';

  @PrimaryKey()
  userId!: number;

  @OneToOne({ entity: () => FashionableColors, ref: true, fieldNames: ['favorite_car_year', 'favorite_color'], nullable: true, index: 'fk_users_fashionable_colors1_idx', unique: 'when_set_unique' })
  favorite?: Ref<FashionableColors>;

  @Property({ columnType: 'year', nullable: true, persist: false })
  favoriteCarYear?: unknown;

  @Property({ length: 255, nullable: true })
  favoriteBook?: string;

}
",
]
`;

exports[`4898 fk_index_selection_example scalarPropertiesForRelations=smart bidirectionalRelations=false identifiedReferences=true entitySchema=true: dump 1`] = `
[
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Cars {
  [PrimaryKeyProp]?: ['carBrand', 'carYear'];
  carBrand!: string;
  carYear!: unknown;
}

export const CarsSchema = new EntitySchema({
  class: Cars,
  properties: {
    carBrand: { primary: true, type: 'string', length: 255 },
    carYear: { primary: true, type: 'unknown', columnType: 'year' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class FashionableColors {
  [PrimaryKeyProp]?: ['year', 'color'];
  year!: unknown;
  color!: string;
}

export const FashionableColorsSchema = new EntitySchema({
  class: FashionableColors,
  properties: {
    year: { primary: true, type: 'unknown', columnType: 'year' },
    color: { primary: true, type: 'string', length: 255 },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { FashionableColors } from './FashionableColors';

export class Users {
  [PrimaryKeyProp]?: 'userId';
  userId!: number;
  favorite?: Ref<FashionableColors>;
  favoriteCarYear?: unknown;
  favoriteBook?: string;
}

export const UsersSchema = new EntitySchema({
  class: Users,
  indexes: [
    { name: 'favorites_idx', expression: 'create index \`favorites_idx\` on \`users\` (\`favorite_car_year\`, \`favorite_color\`, \`favorite_book\`)' },
    { name: 'fk_users_cars_idx', expression: 'create index \`fk_users_cars_idx\` on \`users\` (\`favorite_car_brand\`, \`favorite_car_year\`)' },
  ],
  uniques: [
  ],
  properties: {
    userId: { primary: true, type: 'number' },
    favorite: {
      kind: '1:1',
      entity: () => FashionableColors,
      ref: true,
      fieldNames: [
        'favorite_car_year',
        'favorite_color'
      ],
      nullable: true,
      index: 'fk_users_fashionable_colors1_idx',
      unique: 'when_set_unique',
    },
    favoriteCarYear: { type: 'unknown', columnType: 'year', nullable: true, persist: false },
    favoriteBook: { type: 'string', length: 255, nullable: true },
  },
});
",
]
`;

exports[`4898 fk_index_selection_example scalarPropertiesForRelations=smart bidirectionalRelations=true identifiedReferences=false entitySchema=false: dump 1`] = `
[
  "import { Entity, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';

@Entity()
export class Cars {

  [PrimaryKeyProp]?: ['carBrand', 'carYear'];

  @PrimaryKey({ length: 255 })
  carBrand!: string;

  @PrimaryKey({ columnType: 'year' })
  carYear!: unknown;

}
",
  "import { Entity, OneToOne, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';
import { Users } from './Users';

@Entity()
export class FashionableColors {

  [PrimaryKeyProp]?: ['year', 'color'];

  @PrimaryKey({ columnType: 'year' })
  year!: unknown;

  @PrimaryKey({ length: 255 })
  color!: string;

  @OneToOne({ entity: () => Users, mappedBy: 'favorite' })
  favoriteInverse?: Users;

}
",
  "import { Entity, Index, OneToOne, PrimaryKey, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { FashionableColors } from './FashionableColors';

@Entity()
@Index({ name: 'favorites_idx', expression: 'create index \`favorites_idx\` on \`users\` (\`favorite_car_year\`, \`favorite_color\`, \`favorite_book\`)')
@Index({ name: 'fk_users_cars_idx', expression: 'create index \`fk_users_cars_idx\` on \`users\` (\`favorite_car_brand\`, \`favorite_car_year\`)')
export class Users {

  [PrimaryKeyProp]?: 'userId';

  @PrimaryKey()
  userId!: number;

  @OneToOne({ entity: () => FashionableColors, fieldNames: ['favorite_car_year', 'favorite_color'], nullable: true, index: 'fk_users_fashionable_colors1_idx', unique: 'when_set_unique' })
  favorite?: FashionableColors;

  @Property({ columnType: 'year', nullable: true, persist: false })
  favoriteCarYear?: unknown;

  @Property({ length: 255, nullable: true })
  favoriteBook?: string;

}
",
]
`;

exports[`4898 fk_index_selection_example scalarPropertiesForRelations=smart bidirectionalRelations=true identifiedReferences=false entitySchema=true: dump 1`] = `
[
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Cars {
  [PrimaryKeyProp]?: ['carBrand', 'carYear'];
  carBrand!: string;
  carYear!: unknown;
}

export const CarsSchema = new EntitySchema({
  class: Cars,
  properties: {
    carBrand: { primary: true, type: 'string', length: 255 },
    carYear: { primary: true, type: 'unknown', columnType: 'year' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class FashionableColors {
  [PrimaryKeyProp]?: ['year', 'color'];
  year!: unknown;
  color!: string;
  favoriteInverse?: Users;
}

export const FashionableColorsSchema = new EntitySchema({
  class: FashionableColors,
  properties: {
    year: { primary: true, type: 'unknown', columnType: 'year' },
    color: { primary: true, type: 'string', length: 255 },
    favoriteInverse: { kind: '1:1', entity: () => Users, mappedBy: 'favorite' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Users {
  [PrimaryKeyProp]?: 'userId';
  userId!: number;
  favorite?: FashionableColors;
  favoriteCarYear?: unknown;
  favoriteBook?: string;
}

export const UsersSchema = new EntitySchema({
  class: Users,
  indexes: [
    { name: 'favorites_idx', expression: 'create index \`favorites_idx\` on \`users\` (\`favorite_car_year\`, \`favorite_color\`, \`favorite_book\`)' },
    { name: 'fk_users_cars_idx', expression: 'create index \`fk_users_cars_idx\` on \`users\` (\`favorite_car_brand\`, \`favorite_car_year\`)' },
  ],
  uniques: [
  ],
  properties: {
    userId: { primary: true, type: 'number' },
    favorite: {
      kind: '1:1',
      entity: () => FashionableColors,
      fieldNames: [
        'favorite_car_year',
        'favorite_color'
      ],
      nullable: true,
      index: 'fk_users_fashionable_colors1_idx',
      unique: 'when_set_unique',
    },
    favoriteCarYear: { type: 'unknown', columnType: 'year', nullable: true, persist: false },
    favoriteBook: { type: 'string', length: 255, nullable: true },
  },
});
",
]
`;

exports[`4898 fk_index_selection_example scalarPropertiesForRelations=smart bidirectionalRelations=true identifiedReferences=true entitySchema=false: dump 1`] = `
[
  "import { Entity, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';

@Entity()
export class Cars {

  [PrimaryKeyProp]?: ['carBrand', 'carYear'];

  @PrimaryKey({ length: 255 })
  carBrand!: string;

  @PrimaryKey({ columnType: 'year' })
  carYear!: unknown;

}
",
  "import { Entity, OneToOne, PrimaryKey, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Users } from './Users';

@Entity()
export class FashionableColors {

  [PrimaryKeyProp]?: ['year', 'color'];

  @PrimaryKey({ columnType: 'year' })
  year!: unknown;

  @PrimaryKey({ length: 255 })
  color!: string;

  @OneToOne({ entity: () => Users, ref: true, mappedBy: 'favorite' })
  favoriteInverse?: Ref<Users>;

}
",
  "import { Entity, Index, OneToOne, PrimaryKey, PrimaryKeyProp, Property, Ref } from '@mikro-orm/core';
import { FashionableColors } from './FashionableColors';

@Entity()
@Index({ name: 'favorites_idx', expression: 'create index \`favorites_idx\` on \`users\` (\`favorite_car_year\`, \`favorite_color\`, \`favorite_book\`)')
@Index({ name: 'fk_users_cars_idx', expression: 'create index \`fk_users_cars_idx\` on \`users\` (\`favorite_car_brand\`, \`favorite_car_year\`)')
export class Users {

  [PrimaryKeyProp]?: 'userId';

  @PrimaryKey()
  userId!: number;

  @OneToOne({ entity: () => FashionableColors, ref: true, fieldNames: ['favorite_car_year', 'favorite_color'], nullable: true, index: 'fk_users_fashionable_colors1_idx', unique: 'when_set_unique' })
  favorite?: Ref<FashionableColors>;

  @Property({ columnType: 'year', nullable: true, persist: false })
  favoriteCarYear?: unknown;

  @Property({ length: 255, nullable: true })
  favoriteBook?: string;

}
",
]
`;

exports[`4898 fk_index_selection_example scalarPropertiesForRelations=smart bidirectionalRelations=true identifiedReferences=true entitySchema=true: dump 1`] = `
[
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Cars {
  [PrimaryKeyProp]?: ['carBrand', 'carYear'];
  carBrand!: string;
  carYear!: unknown;
}

export const CarsSchema = new EntitySchema({
  class: Cars,
  properties: {
    carBrand: { primary: true, type: 'string', length: 255 },
    carYear: { primary: true, type: 'unknown', columnType: 'year' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Users } from './Users';

export class FashionableColors {
  [PrimaryKeyProp]?: ['year', 'color'];
  year!: unknown;
  color!: string;
  favoriteInverse?: Ref<Users>;
}

export const FashionableColorsSchema = new EntitySchema({
  class: FashionableColors,
  properties: {
    year: { primary: true, type: 'unknown', columnType: 'year' },
    color: { primary: true, type: 'string', length: 255 },
    favoriteInverse: { kind: '1:1', entity: () => Users, ref: true, mappedBy: 'favorite' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { FashionableColors } from './FashionableColors';

export class Users {
  [PrimaryKeyProp]?: 'userId';
  userId!: number;
  favorite?: Ref<FashionableColors>;
  favoriteCarYear?: unknown;
  favoriteBook?: string;
}

export const UsersSchema = new EntitySchema({
  class: Users,
  indexes: [
    { name: 'favorites_idx', expression: 'create index \`favorites_idx\` on \`users\` (\`favorite_car_year\`, \`favorite_color\`, \`favorite_book\`)' },
    { name: 'fk_users_cars_idx', expression: 'create index \`fk_users_cars_idx\` on \`users\` (\`favorite_car_brand\`, \`favorite_car_year\`)' },
  ],
  uniques: [
  ],
  properties: {
    userId: { primary: true, type: 'number' },
    favorite: {
      kind: '1:1',
      entity: () => FashionableColors,
      ref: true,
      fieldNames: [
        'favorite_car_year',
        'favorite_color'
      ],
      nullable: true,
      index: 'fk_users_fashionable_colors1_idx',
      unique: 'when_set_unique',
    },
    favoriteCarYear: { type: 'unknown', columnType: 'year', nullable: true, persist: false },
    favoriteBook: { type: 'string', length: 255, nullable: true },
  },
});
",
]
`;

exports[`4898 fk_shared_with_column_example scalarPropertiesForRelations=always bidirectionalRelations=false identifiedReferences=false entitySchema=false: dump 1`] = `
[
  "import { Entity, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';

@Entity()
export class Countries {

  [PrimaryKeyProp]?: 'code';

  @PrimaryKey({ columnType: 'char(2)' })
  code!: unknown;

}
",
  "import { Entity, OneToOne, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Countries } from './Countries';

@Entity()
export class LegalUserCountries {

  [PrimaryKeyProp]?: 'countries';

  @Property({ columnType: 'char(2)', persist: false })
  country!: unknown;

  @OneToOne({ entity: () => Countries, fieldName: 'country', primary: true })
  countries!: Countries;

}
",
  "import { Entity, Index, ManyToOne, PrimaryKey, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Countries } from './Countries';
import { LegalUserCountries } from './LegalUserCountries';

@Entity()
export class Users {

  [PrimaryKeyProp]?: 'userId';

  @PrimaryKey()
  userId!: number;

  @Index({ name: 'fk_users_countries_idx' })
  @Property({ columnType: 'char(2)', persist: false })
  userCountry!: unknown;

  @Index({ name: 'fk_users_countries1_idx' })
  @Property({ columnType: 'char(2)', persist: false })
  userCountryBorn!: unknown;

  @ManyToOne({ entity: () => Countries, fieldName: 'user_country', index: 'fk_users_countries_idx' })
  fkUserCountry!: Countries;

  @ManyToOne({ entity: () => LegalUserCountries, fieldName: 'user_country', updateRule: 'cascade', deleteRule: 'cascade', index: 'fk_users_countries_idx' })
  legalUserCountries!: LegalUserCountries;

  @ManyToOne({ entity: () => Countries, fieldName: 'user_country_born', index: 'fk_users_countries1_idx' })
  fkUserCountryBorn!: Countries;

}
",
]
`;

exports[`4898 fk_shared_with_column_example scalarPropertiesForRelations=always bidirectionalRelations=false identifiedReferences=false entitySchema=true: dump 1`] = `
[
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Countries {
  [PrimaryKeyProp]?: 'code';
  code!: unknown;
}

export const CountriesSchema = new EntitySchema({
  class: Countries,
  properties: {
    code: { primary: true, type: 'unknown', columnType: 'char(2)' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class LegalUserCountries {
  [PrimaryKeyProp]?: 'countries';
  country!: unknown;
  countries!: Countries;
}

export const LegalUserCountriesSchema = new EntitySchema({
  class: LegalUserCountries,
  properties: {
    country: { type: 'unknown', columnType: 'char(2)', persist: false },
    countries: { primary: true, kind: '1:1', entity: () => Countries, fieldName: 'country' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Users {
  [PrimaryKeyProp]?: 'userId';
  userId!: number;
  userCountry!: unknown;
  userCountryBorn!: unknown;
  fkUserCountry!: Countries;
  legalUserCountries!: LegalUserCountries;
  fkUserCountryBorn!: Countries;
}

export const UsersSchema = new EntitySchema({
  class: Users,
  properties: {
    userId: { primary: true, type: 'number' },
    userCountry: {
      type: 'unknown',
      columnType: 'char(2)',
      persist: false,
      index: 'fk_users_countries_idx',
    },
    userCountryBorn: {
      type: 'unknown',
      columnType: 'char(2)',
      persist: false,
      index: 'fk_users_countries1_idx',
    },
    fkUserCountry: {
      kind: 'm:1',
      entity: () => Countries,
      fieldName: 'user_country',
      index: 'fk_users_countries_idx',
    },
    legalUserCountries: {
      kind: 'm:1',
      entity: () => LegalUserCountries,
      fieldName: 'user_country',
      updateRule: 'cascade',
      deleteRule: 'cascade',
      index: 'fk_users_countries_idx',
    },
    fkUserCountryBorn: {
      kind: 'm:1',
      entity: () => Countries,
      fieldName: 'user_country_born',
      index: 'fk_users_countries1_idx',
    },
  },
});
",
]
`;

exports[`4898 fk_shared_with_column_example scalarPropertiesForRelations=always bidirectionalRelations=false identifiedReferences=true entitySchema=false: dump 1`] = `
[
  "import { Entity, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';

@Entity()
export class Countries {

  [PrimaryKeyProp]?: 'code';

  @PrimaryKey({ columnType: 'char(2)' })
  code!: unknown;

}
",
  "import { Entity, OneToOne, PrimaryKeyProp, Property, Ref } from '@mikro-orm/core';
import { Countries } from './Countries';

@Entity()
export class LegalUserCountries {

  [PrimaryKeyProp]?: 'countries';

  @Property({ columnType: 'char(2)', persist: false })
  country!: unknown;

  @OneToOne({ entity: () => Countries, ref: true, fieldName: 'country', primary: true })
  countries!: Ref<Countries>;

}
",
  "import { Entity, Index, ManyToOne, PrimaryKey, PrimaryKeyProp, Property, Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { LegalUserCountries } from './LegalUserCountries';

@Entity()
export class Users {

  [PrimaryKeyProp]?: 'userId';

  @PrimaryKey()
  userId!: number;

  @Index({ name: 'fk_users_countries_idx' })
  @Property({ columnType: 'char(2)', persist: false })
  userCountry!: unknown;

  @Index({ name: 'fk_users_countries1_idx' })
  @Property({ columnType: 'char(2)', persist: false })
  userCountryBorn!: unknown;

  @ManyToOne({ entity: () => Countries, ref: true, fieldName: 'user_country', index: 'fk_users_countries_idx' })
  fkUserCountry!: Ref<Countries>;

  @ManyToOne({ entity: () => LegalUserCountries, ref: true, fieldName: 'user_country', updateRule: 'cascade', deleteRule: 'cascade', index: 'fk_users_countries_idx' })
  legalUserCountries!: Ref<LegalUserCountries>;

  @ManyToOne({ entity: () => Countries, ref: true, fieldName: 'user_country_born', index: 'fk_users_countries1_idx' })
  fkUserCountryBorn!: Ref<Countries>;

}
",
]
`;

exports[`4898 fk_shared_with_column_example scalarPropertiesForRelations=always bidirectionalRelations=false identifiedReferences=true entitySchema=true: dump 1`] = `
[
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Countries {
  [PrimaryKeyProp]?: 'code';
  code!: unknown;
}

export const CountriesSchema = new EntitySchema({
  class: Countries,
  properties: {
    code: { primary: true, type: 'unknown', columnType: 'char(2)' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Countries } from './Countries';

export class LegalUserCountries {
  [PrimaryKeyProp]?: 'countries';
  country!: unknown;
  countries!: Ref<Countries>;
}

export const LegalUserCountriesSchema = new EntitySchema({
  class: LegalUserCountries,
  properties: {
    country: { type: 'unknown', columnType: 'char(2)', persist: false },
    countries: {
      primary: true,
      kind: '1:1',
      entity: () => Countries,
      ref: true,
      fieldName: 'country',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { LegalUserCountries } from './LegalUserCountries';

export class Users {
  [PrimaryKeyProp]?: 'userId';
  userId!: number;
  userCountry!: unknown;
  userCountryBorn!: unknown;
  fkUserCountry!: Ref<Countries>;
  legalUserCountries!: Ref<LegalUserCountries>;
  fkUserCountryBorn!: Ref<Countries>;
}

export const UsersSchema = new EntitySchema({
  class: Users,
  properties: {
    userId: { primary: true, type: 'number' },
    userCountry: {
      type: 'unknown',
      columnType: 'char(2)',
      persist: false,
      index: 'fk_users_countries_idx',
    },
    userCountryBorn: {
      type: 'unknown',
      columnType: 'char(2)',
      persist: false,
      index: 'fk_users_countries1_idx',
    },
    fkUserCountry: {
      kind: 'm:1',
      entity: () => Countries,
      ref: true,
      fieldName: 'user_country',
      index: 'fk_users_countries_idx',
    },
    legalUserCountries: {
      kind: 'm:1',
      entity: () => LegalUserCountries,
      ref: true,
      fieldName: 'user_country',
      updateRule: 'cascade',
      deleteRule: 'cascade',
      index: 'fk_users_countries_idx',
    },
    fkUserCountryBorn: {
      kind: 'm:1',
      entity: () => Countries,
      ref: true,
      fieldName: 'user_country_born',
      index: 'fk_users_countries1_idx',
    },
  },
});
",
]
`;

exports[`4898 fk_shared_with_column_example scalarPropertiesForRelations=always bidirectionalRelations=true identifiedReferences=false entitySchema=false: dump 1`] = `
[
  "import { Collection, Entity, OneToMany, OneToOne, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';
import { LegalUserCountries } from './LegalUserCountries';
import { Users } from './Users';

@Entity()
export class Countries {

  [PrimaryKeyProp]?: 'code';

  @PrimaryKey({ columnType: 'char(2)' })
  code!: unknown;

  @OneToOne({ entity: () => LegalUserCountries, mappedBy: 'countries' })
  countriesInverse?: LegalUserCountries;

  @OneToMany({ entity: () => Users, mappedBy: 'fkUserCountry' })
  fkUserCountryInverse = new Collection<Users>(this);

  @OneToMany({ entity: () => Users, mappedBy: 'fkUserCountryBorn' })
  fkUserCountryBornInverse = new Collection<Users>(this);

}
",
  "import { Collection, Entity, OneToMany, OneToOne, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Users } from './Users';

@Entity()
export class LegalUserCountries {

  [PrimaryKeyProp]?: 'countries';

  @Property({ columnType: 'char(2)', persist: false })
  country!: unknown;

  @OneToOne({ entity: () => Countries, fieldName: 'country', primary: true })
  countries!: Countries;

  @OneToMany({ entity: () => Users, mappedBy: 'legalUserCountries' })
  legalUserCountriesInverse = new Collection<Users>(this);

}
",
  "import { Entity, Index, ManyToOne, PrimaryKey, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Countries } from './Countries';
import { LegalUserCountries } from './LegalUserCountries';

@Entity()
export class Users {

  [PrimaryKeyProp]?: 'userId';

  @PrimaryKey()
  userId!: number;

  @Index({ name: 'fk_users_countries_idx' })
  @Property({ columnType: 'char(2)', persist: false })
  userCountry!: unknown;

  @Index({ name: 'fk_users_countries1_idx' })
  @Property({ columnType: 'char(2)', persist: false })
  userCountryBorn!: unknown;

  @ManyToOne({ entity: () => Countries, fieldName: 'user_country', index: 'fk_users_countries_idx' })
  fkUserCountry!: Countries;

  @ManyToOne({ entity: () => LegalUserCountries, fieldName: 'user_country', updateRule: 'cascade', deleteRule: 'cascade', index: 'fk_users_countries_idx' })
  legalUserCountries!: LegalUserCountries;

  @ManyToOne({ entity: () => Countries, fieldName: 'user_country_born', index: 'fk_users_countries1_idx' })
  fkUserCountryBorn!: Countries;

}
",
]
`;

exports[`4898 fk_shared_with_column_example scalarPropertiesForRelations=always bidirectionalRelations=true identifiedReferences=false entitySchema=true: dump 1`] = `
[
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Users } from './Users';

export class Countries {
  [PrimaryKeyProp]?: 'code';
  code!: unknown;
  countriesInverse?: LegalUserCountries;
  fkUserCountryInverse = new Collection<Users>(this);
  fkUserCountryBornInverse = new Collection<Users>(this);
}

export const CountriesSchema = new EntitySchema({
  class: Countries,
  properties: {
    code: { primary: true, type: 'unknown', columnType: 'char(2)' },
    countriesInverse: { kind: '1:1', entity: () => LegalUserCountries, mappedBy: 'countries' },
    fkUserCountryInverse: { kind: '1:m', entity: () => Users, mappedBy: 'fkUserCountry' },
    fkUserCountryBornInverse: { kind: '1:m', entity: () => Users, mappedBy: 'fkUserCountryBorn' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Users } from './Users';

export class LegalUserCountries {
  [PrimaryKeyProp]?: 'countries';
  country!: unknown;
  countries!: Countries;
  legalUserCountriesInverse = new Collection<Users>(this);
}

export const LegalUserCountriesSchema = new EntitySchema({
  class: LegalUserCountries,
  properties: {
    country: { type: 'unknown', columnType: 'char(2)', persist: false },
    countries: { primary: true, kind: '1:1', entity: () => Countries, fieldName: 'country' },
    legalUserCountriesInverse: { kind: '1:m', entity: () => Users, mappedBy: 'legalUserCountries' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Users {
  [PrimaryKeyProp]?: 'userId';
  userId!: number;
  userCountry!: unknown;
  userCountryBorn!: unknown;
  fkUserCountry!: Countries;
  legalUserCountries!: LegalUserCountries;
  fkUserCountryBorn!: Countries;
}

export const UsersSchema = new EntitySchema({
  class: Users,
  properties: {
    userId: { primary: true, type: 'number' },
    userCountry: {
      type: 'unknown',
      columnType: 'char(2)',
      persist: false,
      index: 'fk_users_countries_idx',
    },
    userCountryBorn: {
      type: 'unknown',
      columnType: 'char(2)',
      persist: false,
      index: 'fk_users_countries1_idx',
    },
    fkUserCountry: {
      kind: 'm:1',
      entity: () => Countries,
      fieldName: 'user_country',
      index: 'fk_users_countries_idx',
    },
    legalUserCountries: {
      kind: 'm:1',
      entity: () => LegalUserCountries,
      fieldName: 'user_country',
      updateRule: 'cascade',
      deleteRule: 'cascade',
      index: 'fk_users_countries_idx',
    },
    fkUserCountryBorn: {
      kind: 'm:1',
      entity: () => Countries,
      fieldName: 'user_country_born',
      index: 'fk_users_countries1_idx',
    },
  },
});
",
]
`;

exports[`4898 fk_shared_with_column_example scalarPropertiesForRelations=always bidirectionalRelations=true identifiedReferences=true entitySchema=false: dump 1`] = `
[
  "import { Collection, Entity, OneToMany, OneToOne, PrimaryKey, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { LegalUserCountries } from './LegalUserCountries';
import { Users } from './Users';

@Entity()
export class Countries {

  [PrimaryKeyProp]?: 'code';

  @PrimaryKey({ columnType: 'char(2)' })
  code!: unknown;

  @OneToOne({ entity: () => LegalUserCountries, ref: true, mappedBy: 'countries' })
  countriesInverse?: Ref<LegalUserCountries>;

  @OneToMany({ entity: () => Users, mappedBy: 'fkUserCountry' })
  fkUserCountryInverse = new Collection<Users>(this);

  @OneToMany({ entity: () => Users, mappedBy: 'fkUserCountryBorn' })
  fkUserCountryBornInverse = new Collection<Users>(this);

}
",
  "import { Collection, Entity, OneToMany, OneToOne, PrimaryKeyProp, Property, Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Users } from './Users';

@Entity()
export class LegalUserCountries {

  [PrimaryKeyProp]?: 'countries';

  @Property({ columnType: 'char(2)', persist: false })
  country!: unknown;

  @OneToOne({ entity: () => Countries, ref: true, fieldName: 'country', primary: true })
  countries!: Ref<Countries>;

  @OneToMany({ entity: () => Users, mappedBy: 'legalUserCountries' })
  legalUserCountriesInverse = new Collection<Users>(this);

}
",
  "import { Entity, Index, ManyToOne, PrimaryKey, PrimaryKeyProp, Property, Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { LegalUserCountries } from './LegalUserCountries';

@Entity()
export class Users {

  [PrimaryKeyProp]?: 'userId';

  @PrimaryKey()
  userId!: number;

  @Index({ name: 'fk_users_countries_idx' })
  @Property({ columnType: 'char(2)', persist: false })
  userCountry!: unknown;

  @Index({ name: 'fk_users_countries1_idx' })
  @Property({ columnType: 'char(2)', persist: false })
  userCountryBorn!: unknown;

  @ManyToOne({ entity: () => Countries, ref: true, fieldName: 'user_country', index: 'fk_users_countries_idx' })
  fkUserCountry!: Ref<Countries>;

  @ManyToOne({ entity: () => LegalUserCountries, ref: true, fieldName: 'user_country', updateRule: 'cascade', deleteRule: 'cascade', index: 'fk_users_countries_idx' })
  legalUserCountries!: Ref<LegalUserCountries>;

  @ManyToOne({ entity: () => Countries, ref: true, fieldName: 'user_country_born', index: 'fk_users_countries1_idx' })
  fkUserCountryBorn!: Ref<Countries>;

}
",
]
`;

exports[`4898 fk_shared_with_column_example scalarPropertiesForRelations=always bidirectionalRelations=true identifiedReferences=true entitySchema=true: dump 1`] = `
[
  "import { Collection, EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { LegalUserCountries } from './LegalUserCountries';
import { Users } from './Users';

export class Countries {
  [PrimaryKeyProp]?: 'code';
  code!: unknown;
  countriesInverse?: Ref<LegalUserCountries>;
  fkUserCountryInverse = new Collection<Users>(this);
  fkUserCountryBornInverse = new Collection<Users>(this);
}

export const CountriesSchema = new EntitySchema({
  class: Countries,
  properties: {
    code: { primary: true, type: 'unknown', columnType: 'char(2)' },
    countriesInverse: {
      kind: '1:1',
      entity: () => LegalUserCountries,
      ref: true,
      mappedBy: 'countries',
    },
    fkUserCountryInverse: { kind: '1:m', entity: () => Users, mappedBy: 'fkUserCountry' },
    fkUserCountryBornInverse: { kind: '1:m', entity: () => Users, mappedBy: 'fkUserCountryBorn' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Users } from './Users';

export class LegalUserCountries {
  [PrimaryKeyProp]?: 'countries';
  country!: unknown;
  countries!: Ref<Countries>;
  legalUserCountriesInverse = new Collection<Users>(this);
}

export const LegalUserCountriesSchema = new EntitySchema({
  class: LegalUserCountries,
  properties: {
    country: { type: 'unknown', columnType: 'char(2)', persist: false },
    countries: {
      primary: true,
      kind: '1:1',
      entity: () => Countries,
      ref: true,
      fieldName: 'country',
    },
    legalUserCountriesInverse: { kind: '1:m', entity: () => Users, mappedBy: 'legalUserCountries' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { LegalUserCountries } from './LegalUserCountries';

export class Users {
  [PrimaryKeyProp]?: 'userId';
  userId!: number;
  userCountry!: unknown;
  userCountryBorn!: unknown;
  fkUserCountry!: Ref<Countries>;
  legalUserCountries!: Ref<LegalUserCountries>;
  fkUserCountryBorn!: Ref<Countries>;
}

export const UsersSchema = new EntitySchema({
  class: Users,
  properties: {
    userId: { primary: true, type: 'number' },
    userCountry: {
      type: 'unknown',
      columnType: 'char(2)',
      persist: false,
      index: 'fk_users_countries_idx',
    },
    userCountryBorn: {
      type: 'unknown',
      columnType: 'char(2)',
      persist: false,
      index: 'fk_users_countries1_idx',
    },
    fkUserCountry: {
      kind: 'm:1',
      entity: () => Countries,
      ref: true,
      fieldName: 'user_country',
      index: 'fk_users_countries_idx',
    },
    legalUserCountries: {
      kind: 'm:1',
      entity: () => LegalUserCountries,
      ref: true,
      fieldName: 'user_country',
      updateRule: 'cascade',
      deleteRule: 'cascade',
      index: 'fk_users_countries_idx',
    },
    fkUserCountryBorn: {
      kind: 'm:1',
      entity: () => Countries,
      ref: true,
      fieldName: 'user_country_born',
      index: 'fk_users_countries1_idx',
    },
  },
});
",
]
`;

exports[`4898 fk_shared_with_column_example scalarPropertiesForRelations=never bidirectionalRelations=false identifiedReferences=false entitySchema=false: dump 1`] = `
[
  "import { Entity, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';

@Entity()
export class Countries {

  [PrimaryKeyProp]?: 'code';

  @PrimaryKey({ columnType: 'char(2)' })
  code!: unknown;

}
",
  "import { Entity, OneToOne, PrimaryKeyProp } from '@mikro-orm/core';
import { Countries } from './Countries';

@Entity()
export class LegalUserCountries {

  [PrimaryKeyProp]?: 'country';

  @OneToOne({ entity: () => Countries, fieldName: 'country', primary: true })
  country!: Countries;

}
",
  "import { Entity, ManyToOne, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';
import { Countries } from './Countries';
import { LegalUserCountries } from './LegalUserCountries';

@Entity()
export class Users {

  [PrimaryKeyProp]?: 'userId';

  @PrimaryKey()
  userId!: number;

  @ManyToOne({ entity: () => Countries, fieldName: 'user_country_born', index: 'fk_users_countries1_idx' })
  userCountryBorn!: Countries;

  @ManyToOne({ entity: () => Countries, fieldName: 'user_country', index: 'fk_users_countries_idx' })
  fkUserCountry!: Countries;

  @ManyToOne({ entity: () => LegalUserCountries, fieldName: 'user_country', updateRule: 'cascade', deleteRule: 'cascade', index: 'fk_users_countries_idx' })
  legalUserCountries!: LegalUserCountries;

}
",
]
`;

exports[`4898 fk_shared_with_column_example scalarPropertiesForRelations=never bidirectionalRelations=false identifiedReferences=false entitySchema=true: dump 1`] = `
[
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Countries {
  [PrimaryKeyProp]?: 'code';
  code!: unknown;
}

export const CountriesSchema = new EntitySchema({
  class: Countries,
  properties: {
    code: { primary: true, type: 'unknown', columnType: 'char(2)' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class LegalUserCountries {
  [PrimaryKeyProp]?: 'country';
  country!: Countries;
}

export const LegalUserCountriesSchema = new EntitySchema({
  class: LegalUserCountries,
  properties: {
    country: { primary: true, kind: '1:1', entity: () => Countries, fieldName: 'country' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Users {
  [PrimaryKeyProp]?: 'userId';
  userId!: number;
  userCountryBorn!: Countries;
  fkUserCountry!: Countries;
  legalUserCountries!: LegalUserCountries;
}

export const UsersSchema = new EntitySchema({
  class: Users,
  properties: {
    userId: { primary: true, type: 'number' },
    userCountryBorn: {
      kind: 'm:1',
      entity: () => Countries,
      fieldName: 'user_country_born',
      index: 'fk_users_countries1_idx',
    },
    fkUserCountry: {
      kind: 'm:1',
      entity: () => Countries,
      fieldName: 'user_country',
      index: 'fk_users_countries_idx',
    },
    legalUserCountries: {
      kind: 'm:1',
      entity: () => LegalUserCountries,
      fieldName: 'user_country',
      updateRule: 'cascade',
      deleteRule: 'cascade',
      index: 'fk_users_countries_idx',
    },
  },
});
",
]
`;

exports[`4898 fk_shared_with_column_example scalarPropertiesForRelations=never bidirectionalRelations=false identifiedReferences=true entitySchema=false: dump 1`] = `
[
  "import { Entity, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';

@Entity()
export class Countries {

  [PrimaryKeyProp]?: 'code';

  @PrimaryKey({ columnType: 'char(2)' })
  code!: unknown;

}
",
  "import { Entity, OneToOne, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Countries } from './Countries';

@Entity()
export class LegalUserCountries {

  [PrimaryKeyProp]?: 'country';

  @OneToOne({ entity: () => Countries, ref: true, fieldName: 'country', primary: true })
  country!: Ref<Countries>;

}
",
  "import { Entity, ManyToOne, PrimaryKey, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { LegalUserCountries } from './LegalUserCountries';

@Entity()
export class Users {

  [PrimaryKeyProp]?: 'userId';

  @PrimaryKey()
  userId!: number;

  @ManyToOne({ entity: () => Countries, ref: true, fieldName: 'user_country_born', index: 'fk_users_countries1_idx' })
  userCountryBorn!: Ref<Countries>;

  @ManyToOne({ entity: () => Countries, ref: true, fieldName: 'user_country', index: 'fk_users_countries_idx' })
  fkUserCountry!: Ref<Countries>;

  @ManyToOne({ entity: () => LegalUserCountries, ref: true, fieldName: 'user_country', updateRule: 'cascade', deleteRule: 'cascade', index: 'fk_users_countries_idx' })
  legalUserCountries!: Ref<LegalUserCountries>;

}
",
]
`;

exports[`4898 fk_shared_with_column_example scalarPropertiesForRelations=never bidirectionalRelations=false identifiedReferences=true entitySchema=true: dump 1`] = `
[
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Countries {
  [PrimaryKeyProp]?: 'code';
  code!: unknown;
}

export const CountriesSchema = new EntitySchema({
  class: Countries,
  properties: {
    code: { primary: true, type: 'unknown', columnType: 'char(2)' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Countries } from './Countries';

export class LegalUserCountries {
  [PrimaryKeyProp]?: 'country';
  country!: Ref<Countries>;
}

export const LegalUserCountriesSchema = new EntitySchema({
  class: LegalUserCountries,
  properties: {
    country: {
      primary: true,
      kind: '1:1',
      entity: () => Countries,
      ref: true,
      fieldName: 'country',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { LegalUserCountries } from './LegalUserCountries';

export class Users {
  [PrimaryKeyProp]?: 'userId';
  userId!: number;
  userCountryBorn!: Ref<Countries>;
  fkUserCountry!: Ref<Countries>;
  legalUserCountries!: Ref<LegalUserCountries>;
}

export const UsersSchema = new EntitySchema({
  class: Users,
  properties: {
    userId: { primary: true, type: 'number' },
    userCountryBorn: {
      kind: 'm:1',
      entity: () => Countries,
      ref: true,
      fieldName: 'user_country_born',
      index: 'fk_users_countries1_idx',
    },
    fkUserCountry: {
      kind: 'm:1',
      entity: () => Countries,
      ref: true,
      fieldName: 'user_country',
      index: 'fk_users_countries_idx',
    },
    legalUserCountries: {
      kind: 'm:1',
      entity: () => LegalUserCountries,
      ref: true,
      fieldName: 'user_country',
      updateRule: 'cascade',
      deleteRule: 'cascade',
      index: 'fk_users_countries_idx',
    },
  },
});
",
]
`;

exports[`4898 fk_shared_with_column_example scalarPropertiesForRelations=never bidirectionalRelations=true identifiedReferences=false entitySchema=false: dump 1`] = `
[
  "import { Collection, Entity, OneToMany, OneToOne, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';
import { LegalUserCountries } from './LegalUserCountries';
import { Users } from './Users';

@Entity()
export class Countries {

  [PrimaryKeyProp]?: 'code';

  @PrimaryKey({ columnType: 'char(2)' })
  code!: unknown;

  @OneToOne({ entity: () => LegalUserCountries, mappedBy: 'country' })
  countryInverse?: LegalUserCountries;

  @OneToMany({ entity: () => Users, mappedBy: 'userCountryBorn' })
  userCountryBornInverse = new Collection<Users>(this);

  @OneToMany({ entity: () => Users, mappedBy: 'fkUserCountry' })
  fkUserCountryInverse = new Collection<Users>(this);

}
",
  "import { Collection, Entity, OneToMany, OneToOne, PrimaryKeyProp } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Users } from './Users';

@Entity()
export class LegalUserCountries {

  [PrimaryKeyProp]?: 'country';

  @OneToOne({ entity: () => Countries, fieldName: 'country', primary: true })
  country!: Countries;

  @OneToMany({ entity: () => Users, mappedBy: 'legalUserCountries' })
  legalUserCountriesInverse = new Collection<Users>(this);

}
",
  "import { Entity, ManyToOne, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';
import { Countries } from './Countries';
import { LegalUserCountries } from './LegalUserCountries';

@Entity()
export class Users {

  [PrimaryKeyProp]?: 'userId';

  @PrimaryKey()
  userId!: number;

  @ManyToOne({ entity: () => Countries, fieldName: 'user_country_born', index: 'fk_users_countries1_idx' })
  userCountryBorn!: Countries;

  @ManyToOne({ entity: () => Countries, fieldName: 'user_country', index: 'fk_users_countries_idx' })
  fkUserCountry!: Countries;

  @ManyToOne({ entity: () => LegalUserCountries, fieldName: 'user_country', updateRule: 'cascade', deleteRule: 'cascade', index: 'fk_users_countries_idx' })
  legalUserCountries!: LegalUserCountries;

}
",
]
`;

exports[`4898 fk_shared_with_column_example scalarPropertiesForRelations=never bidirectionalRelations=true identifiedReferences=false entitySchema=true: dump 1`] = `
[
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Users } from './Users';

export class Countries {
  [PrimaryKeyProp]?: 'code';
  code!: unknown;
  countryInverse?: LegalUserCountries;
  userCountryBornInverse = new Collection<Users>(this);
  fkUserCountryInverse = new Collection<Users>(this);
}

export const CountriesSchema = new EntitySchema({
  class: Countries,
  properties: {
    code: { primary: true, type: 'unknown', columnType: 'char(2)' },
    countryInverse: { kind: '1:1', entity: () => LegalUserCountries, mappedBy: 'country' },
    userCountryBornInverse: { kind: '1:m', entity: () => Users, mappedBy: 'userCountryBorn' },
    fkUserCountryInverse: { kind: '1:m', entity: () => Users, mappedBy: 'fkUserCountry' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Users } from './Users';

export class LegalUserCountries {
  [PrimaryKeyProp]?: 'country';
  country!: Countries;
  legalUserCountriesInverse = new Collection<Users>(this);
}

export const LegalUserCountriesSchema = new EntitySchema({
  class: LegalUserCountries,
  properties: {
    country: { primary: true, kind: '1:1', entity: () => Countries, fieldName: 'country' },
    legalUserCountriesInverse: { kind: '1:m', entity: () => Users, mappedBy: 'legalUserCountries' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Users {
  [PrimaryKeyProp]?: 'userId';
  userId!: number;
  userCountryBorn!: Countries;
  fkUserCountry!: Countries;
  legalUserCountries!: LegalUserCountries;
}

export const UsersSchema = new EntitySchema({
  class: Users,
  properties: {
    userId: { primary: true, type: 'number' },
    userCountryBorn: {
      kind: 'm:1',
      entity: () => Countries,
      fieldName: 'user_country_born',
      index: 'fk_users_countries1_idx',
    },
    fkUserCountry: {
      kind: 'm:1',
      entity: () => Countries,
      fieldName: 'user_country',
      index: 'fk_users_countries_idx',
    },
    legalUserCountries: {
      kind: 'm:1',
      entity: () => LegalUserCountries,
      fieldName: 'user_country',
      updateRule: 'cascade',
      deleteRule: 'cascade',
      index: 'fk_users_countries_idx',
    },
  },
});
",
]
`;

exports[`4898 fk_shared_with_column_example scalarPropertiesForRelations=never bidirectionalRelations=true identifiedReferences=true entitySchema=false: dump 1`] = `
[
  "import { Collection, Entity, OneToMany, OneToOne, PrimaryKey, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { LegalUserCountries } from './LegalUserCountries';
import { Users } from './Users';

@Entity()
export class Countries {

  [PrimaryKeyProp]?: 'code';

  @PrimaryKey({ columnType: 'char(2)' })
  code!: unknown;

  @OneToOne({ entity: () => LegalUserCountries, ref: true, mappedBy: 'country' })
  countryInverse?: Ref<LegalUserCountries>;

  @OneToMany({ entity: () => Users, mappedBy: 'userCountryBorn' })
  userCountryBornInverse = new Collection<Users>(this);

  @OneToMany({ entity: () => Users, mappedBy: 'fkUserCountry' })
  fkUserCountryInverse = new Collection<Users>(this);

}
",
  "import { Collection, Entity, OneToMany, OneToOne, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Users } from './Users';

@Entity()
export class LegalUserCountries {

  [PrimaryKeyProp]?: 'country';

  @OneToOne({ entity: () => Countries, ref: true, fieldName: 'country', primary: true })
  country!: Ref<Countries>;

  @OneToMany({ entity: () => Users, mappedBy: 'legalUserCountries' })
  legalUserCountriesInverse = new Collection<Users>(this);

}
",
  "import { Entity, ManyToOne, PrimaryKey, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { LegalUserCountries } from './LegalUserCountries';

@Entity()
export class Users {

  [PrimaryKeyProp]?: 'userId';

  @PrimaryKey()
  userId!: number;

  @ManyToOne({ entity: () => Countries, ref: true, fieldName: 'user_country_born', index: 'fk_users_countries1_idx' })
  userCountryBorn!: Ref<Countries>;

  @ManyToOne({ entity: () => Countries, ref: true, fieldName: 'user_country', index: 'fk_users_countries_idx' })
  fkUserCountry!: Ref<Countries>;

  @ManyToOne({ entity: () => LegalUserCountries, ref: true, fieldName: 'user_country', updateRule: 'cascade', deleteRule: 'cascade', index: 'fk_users_countries_idx' })
  legalUserCountries!: Ref<LegalUserCountries>;

}
",
]
`;

exports[`4898 fk_shared_with_column_example scalarPropertiesForRelations=never bidirectionalRelations=true identifiedReferences=true entitySchema=true: dump 1`] = `
[
  "import { Collection, EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { LegalUserCountries } from './LegalUserCountries';
import { Users } from './Users';

export class Countries {
  [PrimaryKeyProp]?: 'code';
  code!: unknown;
  countryInverse?: Ref<LegalUserCountries>;
  userCountryBornInverse = new Collection<Users>(this);
  fkUserCountryInverse = new Collection<Users>(this);
}

export const CountriesSchema = new EntitySchema({
  class: Countries,
  properties: {
    code: { primary: true, type: 'unknown', columnType: 'char(2)' },
    countryInverse: {
      kind: '1:1',
      entity: () => LegalUserCountries,
      ref: true,
      mappedBy: 'country',
    },
    userCountryBornInverse: { kind: '1:m', entity: () => Users, mappedBy: 'userCountryBorn' },
    fkUserCountryInverse: { kind: '1:m', entity: () => Users, mappedBy: 'fkUserCountry' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Users } from './Users';

export class LegalUserCountries {
  [PrimaryKeyProp]?: 'country';
  country!: Ref<Countries>;
  legalUserCountriesInverse = new Collection<Users>(this);
}

export const LegalUserCountriesSchema = new EntitySchema({
  class: LegalUserCountries,
  properties: {
    country: {
      primary: true,
      kind: '1:1',
      entity: () => Countries,
      ref: true,
      fieldName: 'country',
    },
    legalUserCountriesInverse: { kind: '1:m', entity: () => Users, mappedBy: 'legalUserCountries' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { LegalUserCountries } from './LegalUserCountries';

export class Users {
  [PrimaryKeyProp]?: 'userId';
  userId!: number;
  userCountryBorn!: Ref<Countries>;
  fkUserCountry!: Ref<Countries>;
  legalUserCountries!: Ref<LegalUserCountries>;
}

export const UsersSchema = new EntitySchema({
  class: Users,
  properties: {
    userId: { primary: true, type: 'number' },
    userCountryBorn: {
      kind: 'm:1',
      entity: () => Countries,
      ref: true,
      fieldName: 'user_country_born',
      index: 'fk_users_countries1_idx',
    },
    fkUserCountry: {
      kind: 'm:1',
      entity: () => Countries,
      ref: true,
      fieldName: 'user_country',
      index: 'fk_users_countries_idx',
    },
    legalUserCountries: {
      kind: 'm:1',
      entity: () => LegalUserCountries,
      ref: true,
      fieldName: 'user_country',
      updateRule: 'cascade',
      deleteRule: 'cascade',
      index: 'fk_users_countries_idx',
    },
  },
});
",
]
`;

exports[`4898 fk_shared_with_column_example scalarPropertiesForRelations=smart bidirectionalRelations=false identifiedReferences=false entitySchema=false: dump 1`] = `
[
  "import { Entity, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';

@Entity()
export class Countries {

  [PrimaryKeyProp]?: 'code';

  @PrimaryKey({ columnType: 'char(2)' })
  code!: unknown;

}
",
  "import { Entity, OneToOne, PrimaryKeyProp } from '@mikro-orm/core';
import { Countries } from './Countries';

@Entity()
export class LegalUserCountries {

  [PrimaryKeyProp]?: 'country';

  @OneToOne({ entity: () => Countries, fieldName: 'country', primary: true })
  country!: Countries;

}
",
  "import { Entity, ManyToOne, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';
import { Countries } from './Countries';
import { LegalUserCountries } from './LegalUserCountries';

@Entity()
export class Users {

  [PrimaryKeyProp]?: 'userId';

  @PrimaryKey()
  userId!: number;

  @ManyToOne({ entity: () => Countries, fieldName: 'user_country_born', index: 'fk_users_countries1_idx' })
  userCountryBorn!: Countries;

  @ManyToOne({ entity: () => Countries, fieldName: 'user_country', index: 'fk_users_countries_idx' })
  fkUserCountry!: Countries;

  @ManyToOne({ entity: () => LegalUserCountries, fieldName: 'user_country', updateRule: 'cascade', deleteRule: 'cascade', index: 'fk_users_countries_idx' })
  legalUserCountries!: LegalUserCountries;

}
",
]
`;

exports[`4898 fk_shared_with_column_example scalarPropertiesForRelations=smart bidirectionalRelations=false identifiedReferences=false entitySchema=true: dump 1`] = `
[
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Countries {
  [PrimaryKeyProp]?: 'code';
  code!: unknown;
}

export const CountriesSchema = new EntitySchema({
  class: Countries,
  properties: {
    code: { primary: true, type: 'unknown', columnType: 'char(2)' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class LegalUserCountries {
  [PrimaryKeyProp]?: 'country';
  country!: Countries;
}

export const LegalUserCountriesSchema = new EntitySchema({
  class: LegalUserCountries,
  properties: {
    country: { primary: true, kind: '1:1', entity: () => Countries, fieldName: 'country' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Users {
  [PrimaryKeyProp]?: 'userId';
  userId!: number;
  userCountryBorn!: Countries;
  fkUserCountry!: Countries;
  legalUserCountries!: LegalUserCountries;
}

export const UsersSchema = new EntitySchema({
  class: Users,
  properties: {
    userId: { primary: true, type: 'number' },
    userCountryBorn: {
      kind: 'm:1',
      entity: () => Countries,
      fieldName: 'user_country_born',
      index: 'fk_users_countries1_idx',
    },
    fkUserCountry: {
      kind: 'm:1',
      entity: () => Countries,
      fieldName: 'user_country',
      index: 'fk_users_countries_idx',
    },
    legalUserCountries: {
      kind: 'm:1',
      entity: () => LegalUserCountries,
      fieldName: 'user_country',
      updateRule: 'cascade',
      deleteRule: 'cascade',
      index: 'fk_users_countries_idx',
    },
  },
});
",
]
`;

exports[`4898 fk_shared_with_column_example scalarPropertiesForRelations=smart bidirectionalRelations=false identifiedReferences=true entitySchema=false: dump 1`] = `
[
  "import { Entity, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';

@Entity()
export class Countries {

  [PrimaryKeyProp]?: 'code';

  @PrimaryKey({ columnType: 'char(2)' })
  code!: unknown;

}
",
  "import { Entity, OneToOne, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Countries } from './Countries';

@Entity()
export class LegalUserCountries {

  [PrimaryKeyProp]?: 'country';

  @OneToOne({ entity: () => Countries, ref: true, fieldName: 'country', primary: true })
  country!: Ref<Countries>;

}
",
  "import { Entity, ManyToOne, PrimaryKey, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { LegalUserCountries } from './LegalUserCountries';

@Entity()
export class Users {

  [PrimaryKeyProp]?: 'userId';

  @PrimaryKey()
  userId!: number;

  @ManyToOne({ entity: () => Countries, ref: true, fieldName: 'user_country_born', index: 'fk_users_countries1_idx' })
  userCountryBorn!: Ref<Countries>;

  @ManyToOne({ entity: () => Countries, ref: true, fieldName: 'user_country', index: 'fk_users_countries_idx' })
  fkUserCountry!: Ref<Countries>;

  @ManyToOne({ entity: () => LegalUserCountries, ref: true, fieldName: 'user_country', updateRule: 'cascade', deleteRule: 'cascade', index: 'fk_users_countries_idx' })
  legalUserCountries!: Ref<LegalUserCountries>;

}
",
]
`;

exports[`4898 fk_shared_with_column_example scalarPropertiesForRelations=smart bidirectionalRelations=false identifiedReferences=true entitySchema=true: dump 1`] = `
[
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Countries {
  [PrimaryKeyProp]?: 'code';
  code!: unknown;
}

export const CountriesSchema = new EntitySchema({
  class: Countries,
  properties: {
    code: { primary: true, type: 'unknown', columnType: 'char(2)' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Countries } from './Countries';

export class LegalUserCountries {
  [PrimaryKeyProp]?: 'country';
  country!: Ref<Countries>;
}

export const LegalUserCountriesSchema = new EntitySchema({
  class: LegalUserCountries,
  properties: {
    country: {
      primary: true,
      kind: '1:1',
      entity: () => Countries,
      ref: true,
      fieldName: 'country',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { LegalUserCountries } from './LegalUserCountries';

export class Users {
  [PrimaryKeyProp]?: 'userId';
  userId!: number;
  userCountryBorn!: Ref<Countries>;
  fkUserCountry!: Ref<Countries>;
  legalUserCountries!: Ref<LegalUserCountries>;
}

export const UsersSchema = new EntitySchema({
  class: Users,
  properties: {
    userId: { primary: true, type: 'number' },
    userCountryBorn: {
      kind: 'm:1',
      entity: () => Countries,
      ref: true,
      fieldName: 'user_country_born',
      index: 'fk_users_countries1_idx',
    },
    fkUserCountry: {
      kind: 'm:1',
      entity: () => Countries,
      ref: true,
      fieldName: 'user_country',
      index: 'fk_users_countries_idx',
    },
    legalUserCountries: {
      kind: 'm:1',
      entity: () => LegalUserCountries,
      ref: true,
      fieldName: 'user_country',
      updateRule: 'cascade',
      deleteRule: 'cascade',
      index: 'fk_users_countries_idx',
    },
  },
});
",
]
`;

exports[`4898 fk_shared_with_column_example scalarPropertiesForRelations=smart bidirectionalRelations=true identifiedReferences=false entitySchema=false: dump 1`] = `
[
  "import { Collection, Entity, OneToMany, OneToOne, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';
import { LegalUserCountries } from './LegalUserCountries';
import { Users } from './Users';

@Entity()
export class Countries {

  [PrimaryKeyProp]?: 'code';

  @PrimaryKey({ columnType: 'char(2)' })
  code!: unknown;

  @OneToOne({ entity: () => LegalUserCountries, mappedBy: 'country' })
  countryInverse?: LegalUserCountries;

  @OneToMany({ entity: () => Users, mappedBy: 'userCountryBorn' })
  userCountryBornInverse = new Collection<Users>(this);

  @OneToMany({ entity: () => Users, mappedBy: 'fkUserCountry' })
  fkUserCountryInverse = new Collection<Users>(this);

}
",
  "import { Collection, Entity, OneToMany, OneToOne, PrimaryKeyProp } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Users } from './Users';

@Entity()
export class LegalUserCountries {

  [PrimaryKeyProp]?: 'country';

  @OneToOne({ entity: () => Countries, fieldName: 'country', primary: true })
  country!: Countries;

  @OneToMany({ entity: () => Users, mappedBy: 'legalUserCountries' })
  legalUserCountriesInverse = new Collection<Users>(this);

}
",
  "import { Entity, ManyToOne, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';
import { Countries } from './Countries';
import { LegalUserCountries } from './LegalUserCountries';

@Entity()
export class Users {

  [PrimaryKeyProp]?: 'userId';

  @PrimaryKey()
  userId!: number;

  @ManyToOne({ entity: () => Countries, fieldName: 'user_country_born', index: 'fk_users_countries1_idx' })
  userCountryBorn!: Countries;

  @ManyToOne({ entity: () => Countries, fieldName: 'user_country', index: 'fk_users_countries_idx' })
  fkUserCountry!: Countries;

  @ManyToOne({ entity: () => LegalUserCountries, fieldName: 'user_country', updateRule: 'cascade', deleteRule: 'cascade', index: 'fk_users_countries_idx' })
  legalUserCountries!: LegalUserCountries;

}
",
]
`;

exports[`4898 fk_shared_with_column_example scalarPropertiesForRelations=smart bidirectionalRelations=true identifiedReferences=false entitySchema=true: dump 1`] = `
[
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Users } from './Users';

export class Countries {
  [PrimaryKeyProp]?: 'code';
  code!: unknown;
  countryInverse?: LegalUserCountries;
  userCountryBornInverse = new Collection<Users>(this);
  fkUserCountryInverse = new Collection<Users>(this);
}

export const CountriesSchema = new EntitySchema({
  class: Countries,
  properties: {
    code: { primary: true, type: 'unknown', columnType: 'char(2)' },
    countryInverse: { kind: '1:1', entity: () => LegalUserCountries, mappedBy: 'country' },
    userCountryBornInverse: { kind: '1:m', entity: () => Users, mappedBy: 'userCountryBorn' },
    fkUserCountryInverse: { kind: '1:m', entity: () => Users, mappedBy: 'fkUserCountry' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Users } from './Users';

export class LegalUserCountries {
  [PrimaryKeyProp]?: 'country';
  country!: Countries;
  legalUserCountriesInverse = new Collection<Users>(this);
}

export const LegalUserCountriesSchema = new EntitySchema({
  class: LegalUserCountries,
  properties: {
    country: { primary: true, kind: '1:1', entity: () => Countries, fieldName: 'country' },
    legalUserCountriesInverse: { kind: '1:m', entity: () => Users, mappedBy: 'legalUserCountries' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Users {
  [PrimaryKeyProp]?: 'userId';
  userId!: number;
  userCountryBorn!: Countries;
  fkUserCountry!: Countries;
  legalUserCountries!: LegalUserCountries;
}

export const UsersSchema = new EntitySchema({
  class: Users,
  properties: {
    userId: { primary: true, type: 'number' },
    userCountryBorn: {
      kind: 'm:1',
      entity: () => Countries,
      fieldName: 'user_country_born',
      index: 'fk_users_countries1_idx',
    },
    fkUserCountry: {
      kind: 'm:1',
      entity: () => Countries,
      fieldName: 'user_country',
      index: 'fk_users_countries_idx',
    },
    legalUserCountries: {
      kind: 'm:1',
      entity: () => LegalUserCountries,
      fieldName: 'user_country',
      updateRule: 'cascade',
      deleteRule: 'cascade',
      index: 'fk_users_countries_idx',
    },
  },
});
",
]
`;

exports[`4898 fk_shared_with_column_example scalarPropertiesForRelations=smart bidirectionalRelations=true identifiedReferences=true entitySchema=false: dump 1`] = `
[
  "import { Collection, Entity, OneToMany, OneToOne, PrimaryKey, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { LegalUserCountries } from './LegalUserCountries';
import { Users } from './Users';

@Entity()
export class Countries {

  [PrimaryKeyProp]?: 'code';

  @PrimaryKey({ columnType: 'char(2)' })
  code!: unknown;

  @OneToOne({ entity: () => LegalUserCountries, ref: true, mappedBy: 'country' })
  countryInverse?: Ref<LegalUserCountries>;

  @OneToMany({ entity: () => Users, mappedBy: 'userCountryBorn' })
  userCountryBornInverse = new Collection<Users>(this);

  @OneToMany({ entity: () => Users, mappedBy: 'fkUserCountry' })
  fkUserCountryInverse = new Collection<Users>(this);

}
",
  "import { Collection, Entity, OneToMany, OneToOne, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Users } from './Users';

@Entity()
export class LegalUserCountries {

  [PrimaryKeyProp]?: 'country';

  @OneToOne({ entity: () => Countries, ref: true, fieldName: 'country', primary: true })
  country!: Ref<Countries>;

  @OneToMany({ entity: () => Users, mappedBy: 'legalUserCountries' })
  legalUserCountriesInverse = new Collection<Users>(this);

}
",
  "import { Entity, ManyToOne, PrimaryKey, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { LegalUserCountries } from './LegalUserCountries';

@Entity()
export class Users {

  [PrimaryKeyProp]?: 'userId';

  @PrimaryKey()
  userId!: number;

  @ManyToOne({ entity: () => Countries, ref: true, fieldName: 'user_country_born', index: 'fk_users_countries1_idx' })
  userCountryBorn!: Ref<Countries>;

  @ManyToOne({ entity: () => Countries, ref: true, fieldName: 'user_country', index: 'fk_users_countries_idx' })
  fkUserCountry!: Ref<Countries>;

  @ManyToOne({ entity: () => LegalUserCountries, ref: true, fieldName: 'user_country', updateRule: 'cascade', deleteRule: 'cascade', index: 'fk_users_countries_idx' })
  legalUserCountries!: Ref<LegalUserCountries>;

}
",
]
`;

exports[`4898 fk_shared_with_column_example scalarPropertiesForRelations=smart bidirectionalRelations=true identifiedReferences=true entitySchema=true: dump 1`] = `
[
  "import { Collection, EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { LegalUserCountries } from './LegalUserCountries';
import { Users } from './Users';

export class Countries {
  [PrimaryKeyProp]?: 'code';
  code!: unknown;
  countryInverse?: Ref<LegalUserCountries>;
  userCountryBornInverse = new Collection<Users>(this);
  fkUserCountryInverse = new Collection<Users>(this);
}

export const CountriesSchema = new EntitySchema({
  class: Countries,
  properties: {
    code: { primary: true, type: 'unknown', columnType: 'char(2)' },
    countryInverse: {
      kind: '1:1',
      entity: () => LegalUserCountries,
      ref: true,
      mappedBy: 'country',
    },
    userCountryBornInverse: { kind: '1:m', entity: () => Users, mappedBy: 'userCountryBorn' },
    fkUserCountryInverse: { kind: '1:m', entity: () => Users, mappedBy: 'fkUserCountry' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Users } from './Users';

export class LegalUserCountries {
  [PrimaryKeyProp]?: 'country';
  country!: Ref<Countries>;
  legalUserCountriesInverse = new Collection<Users>(this);
}

export const LegalUserCountriesSchema = new EntitySchema({
  class: LegalUserCountries,
  properties: {
    country: {
      primary: true,
      kind: '1:1',
      entity: () => Countries,
      ref: true,
      fieldName: 'country',
    },
    legalUserCountriesInverse: { kind: '1:m', entity: () => Users, mappedBy: 'legalUserCountries' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { LegalUserCountries } from './LegalUserCountries';

export class Users {
  [PrimaryKeyProp]?: 'userId';
  userId!: number;
  userCountryBorn!: Ref<Countries>;
  fkUserCountry!: Ref<Countries>;
  legalUserCountries!: Ref<LegalUserCountries>;
}

export const UsersSchema = new EntitySchema({
  class: Users,
  properties: {
    userId: { primary: true, type: 'number' },
    userCountryBorn: {
      kind: 'm:1',
      entity: () => Countries,
      ref: true,
      fieldName: 'user_country_born',
      index: 'fk_users_countries1_idx',
    },
    fkUserCountry: {
      kind: 'm:1',
      entity: () => Countries,
      ref: true,
      fieldName: 'user_country',
      index: 'fk_users_countries_idx',
    },
    legalUserCountries: {
      kind: 'm:1',
      entity: () => LegalUserCountries,
      ref: true,
      fieldName: 'user_country',
      updateRule: 'cascade',
      deleteRule: 'cascade',
      index: 'fk_users_countries_idx',
    },
  },
});
",
]
`;

exports[`4898 non_composite_ambiguous_fk_example scalarPropertiesForRelations=always bidirectionalRelations=false identifiedReferences=false entitySchema=false: dump 1`] = `
[
  "import { Entity, OneToOne, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Products } from './Products';

@Entity()
export class DeliverableProducts {

  [PrimaryKeyProp]?: 'product';

  @OneToOne({ entity: () => Products, fieldName: 'product_id', primary: true })
  product!: Products;

  @Property({ persist: false })
  productId!: number;

  @Property({ length: 0 })
  startingAt!: Date;

}
",
  "import { Entity, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';

@Entity()
export class Destinations {

  [PrimaryKeyProp]?: 'destinationId';

  @PrimaryKey()
  destinationId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property({ length: 255 })
  name!: string;

}
",
  "import { Entity, OneToOne, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Products } from './Products';

@Entity()
export class ManufacturedProducts {

  [PrimaryKeyProp]?: 'product';

  @OneToOne({ entity: () => Products, fieldName: 'product_id', primary: true })
  product!: Products;

  @Property({ persist: false })
  productId!: number;

  @Property({ length: 255 })
  place!: string;

}
",
  "import { Entity, PrimaryKey, PrimaryKeyProp, Property } from '@mikro-orm/core';

@Entity()
export class Products {

  [PrimaryKeyProp]?: 'productId';

  @PrimaryKey()
  productId!: number;

  @Property({ length: 255 })
  name!: string;

}
",
  "import { Entity, Index, ManyToOne, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { DeliverableProducts } from './DeliverableProducts';
import { Destinations } from './Destinations';
import { ManufacturedProducts } from './ManufacturedProducts';

@Entity()
export class ShippableProducts {

  [PrimaryKeyProp]?: ['deliverableProducts', 'fkShippableProductsManufacturedProducts', 'fkShippableProductsManufacturedProducts1'];

  @Property({ persist: false })
  productId!: number;

  @Index({ name: 'fk_shippable_products_destinations1_idx' })
  @Property({ length: 255, persist: false })
  destination!: string;

  @ManyToOne({ entity: () => DeliverableProducts, fieldName: 'product_id', primary: true })
  deliverableProducts!: DeliverableProducts;

  @ManyToOne({ entity: () => Destinations, fieldName: 'destination', index: 'fk_shippable_products_destinations1_idx' })
  destinations!: Destinations;

  @ManyToOne({ entity: () => ManufacturedProducts, fieldName: 'product_id', primary: true })
  fkShippableProductsManufacturedProducts!: ManufacturedProducts;

  @ManyToOne({ entity: () => ManufacturedProducts, fieldName: 'product_id', primary: true })
  fkShippableProductsManufacturedProducts1!: ManufacturedProducts;

}
",
]
`;

exports[`4898 non_composite_ambiguous_fk_example scalarPropertiesForRelations=always bidirectionalRelations=false identifiedReferences=false entitySchema=true: dump 1`] = `
[
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class DeliverableProducts {
  [PrimaryKeyProp]?: 'product';
  product!: Products;
  productId!: number;
  startingAt!: Date;
}

export const DeliverableProductsSchema = new EntitySchema({
  class: DeliverableProducts,
  properties: {
    product: { primary: true, kind: '1:1', entity: () => Products, fieldName: 'product_id' },
    productId: { type: 'number', persist: false },
    startingAt: { type: 'Date', length: 0 },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Destinations {
  [PrimaryKeyProp]?: 'destinationId';
  destinationId!: number;
  name!: string;
}

export const DestinationsSchema = new EntitySchema({
  class: Destinations,
  properties: {
    destinationId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255, unique: 'name_UNIQUE' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class ManufacturedProducts {
  [PrimaryKeyProp]?: 'product';
  product!: Products;
  productId!: number;
  place!: string;
}

export const ManufacturedProductsSchema = new EntitySchema({
  class: ManufacturedProducts,
  properties: {
    product: { primary: true, kind: '1:1', entity: () => Products, fieldName: 'product_id' },
    productId: { type: 'number', persist: false },
    place: { type: 'string', length: 255 },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Products {
  [PrimaryKeyProp]?: 'productId';
  productId!: number;
  name!: string;
}

export const ProductsSchema = new EntitySchema({
  class: Products,
  properties: {
    productId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255 },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class ShippableProducts {
  [PrimaryKeyProp]?: ['deliverableProducts', 'fkShippableProductsManufacturedProducts', 'fkShippableProductsManufacturedProducts1'];
  productId!: number;
  destination!: string;
  deliverableProducts!: DeliverableProducts;
  destinations!: Destinations;
  fkShippableProductsManufacturedProducts!: ManufacturedProducts;
  fkShippableProductsManufacturedProducts1!: ManufacturedProducts;
}

export const ShippableProductsSchema = new EntitySchema({
  class: ShippableProducts,
  properties: {
    productId: { type: 'number', persist: false },
    destination: {
      type: 'string',
      length: 255,
      persist: false,
      index: 'fk_shippable_products_destinations1_idx',
    },
    deliverableProducts: {
      primary: true,
      kind: 'm:1',
      entity: () => DeliverableProducts,
      fieldName: 'product_id',
    },
    destinations: {
      kind: 'm:1',
      entity: () => Destinations,
      fieldName: 'destination',
      index: 'fk_shippable_products_destinations1_idx',
    },
    fkShippableProductsManufacturedProducts: {
      primary: true,
      kind: 'm:1',
      entity: () => ManufacturedProducts,
      fieldName: 'product_id',
    },
    fkShippableProductsManufacturedProducts1: {
      primary: true,
      kind: 'm:1',
      entity: () => ManufacturedProducts,
      fieldName: 'product_id',
    },
  },
});
",
]
`;

exports[`4898 non_composite_ambiguous_fk_example scalarPropertiesForRelations=always bidirectionalRelations=false identifiedReferences=true entitySchema=false: dump 1`] = `
[
  "import { Entity, OneToOne, PrimaryKeyProp, Property, Ref } from '@mikro-orm/core';
import { Products } from './Products';

@Entity()
export class DeliverableProducts {

  [PrimaryKeyProp]?: 'product';

  @OneToOne({ entity: () => Products, ref: true, fieldName: 'product_id', primary: true })
  product!: Ref<Products>;

  @Property({ persist: false })
  productId!: number;

  @Property({ length: 0 })
  startingAt!: Date;

}
",
  "import { Entity, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';

@Entity()
export class Destinations {

  [PrimaryKeyProp]?: 'destinationId';

  @PrimaryKey()
  destinationId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property({ length: 255 })
  name!: string;

}
",
  "import { Entity, OneToOne, PrimaryKeyProp, Property, Ref } from '@mikro-orm/core';
import { Products } from './Products';

@Entity()
export class ManufacturedProducts {

  [PrimaryKeyProp]?: 'product';

  @OneToOne({ entity: () => Products, ref: true, fieldName: 'product_id', primary: true })
  product!: Ref<Products>;

  @Property({ persist: false })
  productId!: number;

  @Property({ length: 255 })
  place!: string;

}
",
  "import { Entity, PrimaryKey, PrimaryKeyProp, Property } from '@mikro-orm/core';

@Entity()
export class Products {

  [PrimaryKeyProp]?: 'productId';

  @PrimaryKey()
  productId!: number;

  @Property({ length: 255 })
  name!: string;

}
",
  "import { Entity, Index, ManyToOne, PrimaryKeyProp, Property, Ref } from '@mikro-orm/core';
import { DeliverableProducts } from './DeliverableProducts';
import { Destinations } from './Destinations';
import { ManufacturedProducts } from './ManufacturedProducts';

@Entity()
export class ShippableProducts {

  [PrimaryKeyProp]?: ['deliverableProducts', 'fkShippableProductsManufacturedProducts', 'fkShippableProductsManufacturedProducts1'];

  @Property({ persist: false })
  productId!: number;

  @Index({ name: 'fk_shippable_products_destinations1_idx' })
  @Property({ length: 255, persist: false })
  destination!: string;

  @ManyToOne({ entity: () => DeliverableProducts, ref: true, fieldName: 'product_id', primary: true })
  deliverableProducts!: Ref<DeliverableProducts>;

  @ManyToOne({ entity: () => Destinations, ref: true, fieldName: 'destination', index: 'fk_shippable_products_destinations1_idx' })
  destinations!: Ref<Destinations>;

  @ManyToOne({ entity: () => ManufacturedProducts, ref: true, fieldName: 'product_id', primary: true })
  fkShippableProductsManufacturedProducts!: Ref<ManufacturedProducts>;

  @ManyToOne({ entity: () => ManufacturedProducts, ref: true, fieldName: 'product_id', primary: true })
  fkShippableProductsManufacturedProducts1!: Ref<ManufacturedProducts>;

}
",
]
`;

exports[`4898 non_composite_ambiguous_fk_example scalarPropertiesForRelations=always bidirectionalRelations=false identifiedReferences=true entitySchema=true: dump 1`] = `
[
  "import { EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Products } from './Products';

export class DeliverableProducts {
  [PrimaryKeyProp]?: 'product';
  product!: Ref<Products>;
  productId!: number;
  startingAt!: Date;
}

export const DeliverableProductsSchema = new EntitySchema({
  class: DeliverableProducts,
  properties: {
    product: {
      primary: true,
      kind: '1:1',
      entity: () => Products,
      ref: true,
      fieldName: 'product_id',
    },
    productId: { type: 'number', persist: false },
    startingAt: { type: 'Date', length: 0 },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Destinations {
  [PrimaryKeyProp]?: 'destinationId';
  destinationId!: number;
  name!: string;
}

export const DestinationsSchema = new EntitySchema({
  class: Destinations,
  properties: {
    destinationId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255, unique: 'name_UNIQUE' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Products } from './Products';

export class ManufacturedProducts {
  [PrimaryKeyProp]?: 'product';
  product!: Ref<Products>;
  productId!: number;
  place!: string;
}

export const ManufacturedProductsSchema = new EntitySchema({
  class: ManufacturedProducts,
  properties: {
    product: {
      primary: true,
      kind: '1:1',
      entity: () => Products,
      ref: true,
      fieldName: 'product_id',
    },
    productId: { type: 'number', persist: false },
    place: { type: 'string', length: 255 },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Products {
  [PrimaryKeyProp]?: 'productId';
  productId!: number;
  name!: string;
}

export const ProductsSchema = new EntitySchema({
  class: Products,
  properties: {
    productId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255 },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { DeliverableProducts } from './DeliverableProducts';
import { Destinations } from './Destinations';
import { ManufacturedProducts } from './ManufacturedProducts';

export class ShippableProducts {
  [PrimaryKeyProp]?: ['deliverableProducts', 'fkShippableProductsManufacturedProducts', 'fkShippableProductsManufacturedProducts1'];
  productId!: number;
  destination!: string;
  deliverableProducts!: Ref<DeliverableProducts>;
  destinations!: Ref<Destinations>;
  fkShippableProductsManufacturedProducts!: Ref<ManufacturedProducts>;
  fkShippableProductsManufacturedProducts1!: Ref<ManufacturedProducts>;
}

export const ShippableProductsSchema = new EntitySchema({
  class: ShippableProducts,
  properties: {
    productId: { type: 'number', persist: false },
    destination: {
      type: 'string',
      length: 255,
      persist: false,
      index: 'fk_shippable_products_destinations1_idx',
    },
    deliverableProducts: {
      primary: true,
      kind: 'm:1',
      entity: () => DeliverableProducts,
      ref: true,
      fieldName: 'product_id',
    },
    destinations: {
      kind: 'm:1',
      entity: () => Destinations,
      ref: true,
      fieldName: 'destination',
      index: 'fk_shippable_products_destinations1_idx',
    },
    fkShippableProductsManufacturedProducts: {
      primary: true,
      kind: 'm:1',
      entity: () => ManufacturedProducts,
      ref: true,
      fieldName: 'product_id',
    },
    fkShippableProductsManufacturedProducts1: {
      primary: true,
      kind: 'm:1',
      entity: () => ManufacturedProducts,
      ref: true,
      fieldName: 'product_id',
    },
  },
});
",
]
`;

exports[`4898 non_composite_ambiguous_fk_example scalarPropertiesForRelations=always bidirectionalRelations=true identifiedReferences=false entitySchema=false: dump 1`] = `
[
  "import { Collection, Entity, OneToMany, OneToOne, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Products } from './Products';
import { ShippableProducts } from './ShippableProducts';

@Entity()
export class DeliverableProducts {

  [PrimaryKeyProp]?: 'product';

  @OneToOne({ entity: () => Products, fieldName: 'product_id', primary: true })
  product!: Products;

  @Property({ persist: false })
  productId!: number;

  @Property({ length: 0 })
  startingAt!: Date;

  @OneToMany({ entity: () => ShippableProducts, mappedBy: 'deliverableProducts' })
  deliverableProductsInverse = new Collection<ShippableProducts>(this);

}
",
  "import { Collection, Entity, OneToMany, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { ShippableProducts } from './ShippableProducts';

@Entity()
export class Destinations {

  [PrimaryKeyProp]?: 'destinationId';

  @PrimaryKey()
  destinationId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property({ length: 255 })
  name!: string;

  @OneToMany({ entity: () => ShippableProducts, mappedBy: 'destinations' })
  destinationsInverse = new Collection<ShippableProducts>(this);

}
",
  "import { Collection, Entity, OneToMany, OneToOne, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Products } from './Products';
import { ShippableProducts } from './ShippableProducts';

@Entity()
export class ManufacturedProducts {

  [PrimaryKeyProp]?: 'product';

  @OneToOne({ entity: () => Products, fieldName: 'product_id', primary: true })
  product!: Products;

  @Property({ persist: false })
  productId!: number;

  @Property({ length: 255 })
  place!: string;

  @OneToMany({ entity: () => ShippableProducts, mappedBy: 'fkShippableProductsManufacturedProducts' })
  fkShippableProductsManufacturedProductsInverse = new Collection<ShippableProducts>(this);

  @OneToMany({ entity: () => ShippableProducts, mappedBy: 'fkShippableProductsManufacturedProducts1' })
  fkShippableProductsManufacturedProducts1Inverse = new Collection<ShippableProducts>(this);

}
",
  "import { Entity, OneToOne, PrimaryKey, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { ManufacturedProducts } from './ManufacturedProducts';

@Entity()
export class Products {

  [PrimaryKeyProp]?: 'productId';

  @PrimaryKey()
  productId!: number;

  @Property({ length: 255 })
  name!: string;

  @OneToOne({ entity: () => ManufacturedProducts, mappedBy: 'product' })
  productInverse?: ManufacturedProducts;

}
",
  "import { Entity, Index, ManyToOne, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { DeliverableProducts } from './DeliverableProducts';
import { Destinations } from './Destinations';
import { ManufacturedProducts } from './ManufacturedProducts';

@Entity()
export class ShippableProducts {

  [PrimaryKeyProp]?: ['deliverableProducts', 'fkShippableProductsManufacturedProducts', 'fkShippableProductsManufacturedProducts1'];

  @Property({ persist: false })
  productId!: number;

  @Index({ name: 'fk_shippable_products_destinations1_idx' })
  @Property({ length: 255, persist: false })
  destination!: string;

  @ManyToOne({ entity: () => DeliverableProducts, fieldName: 'product_id', primary: true })
  deliverableProducts!: DeliverableProducts;

  @ManyToOne({ entity: () => Destinations, fieldName: 'destination', index: 'fk_shippable_products_destinations1_idx' })
  destinations!: Destinations;

  @ManyToOne({ entity: () => ManufacturedProducts, fieldName: 'product_id', primary: true })
  fkShippableProductsManufacturedProducts!: ManufacturedProducts;

  @ManyToOne({ entity: () => ManufacturedProducts, fieldName: 'product_id', primary: true })
  fkShippableProductsManufacturedProducts1!: ManufacturedProducts;

}
",
]
`;

exports[`4898 non_composite_ambiguous_fk_example scalarPropertiesForRelations=always bidirectionalRelations=true identifiedReferences=false entitySchema=true: dump 1`] = `
[
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { ShippableProducts } from './ShippableProducts';

export class DeliverableProducts {
  [PrimaryKeyProp]?: 'product';
  product!: Products;
  productId!: number;
  startingAt!: Date;
  deliverableProductsInverse = new Collection<ShippableProducts>(this);
}

export const DeliverableProductsSchema = new EntitySchema({
  class: DeliverableProducts,
  properties: {
    product: { primary: true, kind: '1:1', entity: () => Products, fieldName: 'product_id' },
    productId: { type: 'number', persist: false },
    startingAt: { type: 'Date', length: 0 },
    deliverableProductsInverse: {
      kind: '1:m',
      entity: () => ShippableProducts,
      mappedBy: 'deliverableProducts',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { ShippableProducts } from './ShippableProducts';

export class Destinations {
  [PrimaryKeyProp]?: 'destinationId';
  destinationId!: number;
  name!: string;
  destinationsInverse = new Collection<ShippableProducts>(this);
}

export const DestinationsSchema = new EntitySchema({
  class: Destinations,
  properties: {
    destinationId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255, unique: 'name_UNIQUE' },
    destinationsInverse: { kind: '1:m', entity: () => ShippableProducts, mappedBy: 'destinations' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { ShippableProducts } from './ShippableProducts';

export class ManufacturedProducts {
  [PrimaryKeyProp]?: 'product';
  product!: Products;
  productId!: number;
  place!: string;
  fkShippableProductsManufacturedProductsInverse = new Collection<ShippableProducts>(this);
  fkShippableProductsManufacturedProducts1Inverse = new Collection<ShippableProducts>(this);
}

export const ManufacturedProductsSchema = new EntitySchema({
  class: ManufacturedProducts,
  properties: {
    product: { primary: true, kind: '1:1', entity: () => Products, fieldName: 'product_id' },
    productId: { type: 'number', persist: false },
    place: { type: 'string', length: 255 },
    fkShippableProductsManufacturedProductsInverse: {
      kind: '1:m',
      entity: () => ShippableProducts,
      mappedBy: 'fkShippableProductsManufacturedProducts',
    },
    fkShippableProductsManufacturedProducts1Inverse: {
      kind: '1:m',
      entity: () => ShippableProducts,
      mappedBy: 'fkShippableProductsManufacturedProducts1',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Products {
  [PrimaryKeyProp]?: 'productId';
  productId!: number;
  name!: string;
  productInverse?: ManufacturedProducts;
}

export const ProductsSchema = new EntitySchema({
  class: Products,
  properties: {
    productId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255 },
    productInverse: { kind: '1:1', entity: () => ManufacturedProducts, mappedBy: 'product' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class ShippableProducts {
  [PrimaryKeyProp]?: ['deliverableProducts', 'fkShippableProductsManufacturedProducts', 'fkShippableProductsManufacturedProducts1'];
  productId!: number;
  destination!: string;
  deliverableProducts!: DeliverableProducts;
  destinations!: Destinations;
  fkShippableProductsManufacturedProducts!: ManufacturedProducts;
  fkShippableProductsManufacturedProducts1!: ManufacturedProducts;
}

export const ShippableProductsSchema = new EntitySchema({
  class: ShippableProducts,
  properties: {
    productId: { type: 'number', persist: false },
    destination: {
      type: 'string',
      length: 255,
      persist: false,
      index: 'fk_shippable_products_destinations1_idx',
    },
    deliverableProducts: {
      primary: true,
      kind: 'm:1',
      entity: () => DeliverableProducts,
      fieldName: 'product_id',
    },
    destinations: {
      kind: 'm:1',
      entity: () => Destinations,
      fieldName: 'destination',
      index: 'fk_shippable_products_destinations1_idx',
    },
    fkShippableProductsManufacturedProducts: {
      primary: true,
      kind: 'm:1',
      entity: () => ManufacturedProducts,
      fieldName: 'product_id',
    },
    fkShippableProductsManufacturedProducts1: {
      primary: true,
      kind: 'm:1',
      entity: () => ManufacturedProducts,
      fieldName: 'product_id',
    },
  },
});
",
]
`;

exports[`4898 non_composite_ambiguous_fk_example scalarPropertiesForRelations=always bidirectionalRelations=true identifiedReferences=true entitySchema=false: dump 1`] = `
[
  "import { Collection, Entity, OneToMany, OneToOne, PrimaryKeyProp, Property, Ref } from '@mikro-orm/core';
import { Products } from './Products';
import { ShippableProducts } from './ShippableProducts';

@Entity()
export class DeliverableProducts {

  [PrimaryKeyProp]?: 'product';

  @OneToOne({ entity: () => Products, ref: true, fieldName: 'product_id', primary: true })
  product!: Ref<Products>;

  @Property({ persist: false })
  productId!: number;

  @Property({ length: 0 })
  startingAt!: Date;

  @OneToMany({ entity: () => ShippableProducts, mappedBy: 'deliverableProducts' })
  deliverableProductsInverse = new Collection<ShippableProducts>(this);

}
",
  "import { Collection, Entity, OneToMany, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { ShippableProducts } from './ShippableProducts';

@Entity()
export class Destinations {

  [PrimaryKeyProp]?: 'destinationId';

  @PrimaryKey()
  destinationId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property({ length: 255 })
  name!: string;

  @OneToMany({ entity: () => ShippableProducts, mappedBy: 'destinations' })
  destinationsInverse = new Collection<ShippableProducts>(this);

}
",
  "import { Collection, Entity, OneToMany, OneToOne, PrimaryKeyProp, Property, Ref } from '@mikro-orm/core';
import { Products } from './Products';
import { ShippableProducts } from './ShippableProducts';

@Entity()
export class ManufacturedProducts {

  [PrimaryKeyProp]?: 'product';

  @OneToOne({ entity: () => Products, ref: true, fieldName: 'product_id', primary: true })
  product!: Ref<Products>;

  @Property({ persist: false })
  productId!: number;

  @Property({ length: 255 })
  place!: string;

  @OneToMany({ entity: () => ShippableProducts, mappedBy: 'fkShippableProductsManufacturedProducts' })
  fkShippableProductsManufacturedProductsInverse = new Collection<ShippableProducts>(this);

  @OneToMany({ entity: () => ShippableProducts, mappedBy: 'fkShippableProductsManufacturedProducts1' })
  fkShippableProductsManufacturedProducts1Inverse = new Collection<ShippableProducts>(this);

}
",
  "import { Entity, OneToOne, PrimaryKey, PrimaryKeyProp, Property, Ref } from '@mikro-orm/core';
import { ManufacturedProducts } from './ManufacturedProducts';

@Entity()
export class Products {

  [PrimaryKeyProp]?: 'productId';

  @PrimaryKey()
  productId!: number;

  @Property({ length: 255 })
  name!: string;

  @OneToOne({ entity: () => ManufacturedProducts, ref: true, mappedBy: 'product' })
  productInverse?: Ref<ManufacturedProducts>;

}
",
  "import { Entity, Index, ManyToOne, PrimaryKeyProp, Property, Ref } from '@mikro-orm/core';
import { DeliverableProducts } from './DeliverableProducts';
import { Destinations } from './Destinations';
import { ManufacturedProducts } from './ManufacturedProducts';

@Entity()
export class ShippableProducts {

  [PrimaryKeyProp]?: ['deliverableProducts', 'fkShippableProductsManufacturedProducts', 'fkShippableProductsManufacturedProducts1'];

  @Property({ persist: false })
  productId!: number;

  @Index({ name: 'fk_shippable_products_destinations1_idx' })
  @Property({ length: 255, persist: false })
  destination!: string;

  @ManyToOne({ entity: () => DeliverableProducts, ref: true, fieldName: 'product_id', primary: true })
  deliverableProducts!: Ref<DeliverableProducts>;

  @ManyToOne({ entity: () => Destinations, ref: true, fieldName: 'destination', index: 'fk_shippable_products_destinations1_idx' })
  destinations!: Ref<Destinations>;

  @ManyToOne({ entity: () => ManufacturedProducts, ref: true, fieldName: 'product_id', primary: true })
  fkShippableProductsManufacturedProducts!: Ref<ManufacturedProducts>;

  @ManyToOne({ entity: () => ManufacturedProducts, ref: true, fieldName: 'product_id', primary: true })
  fkShippableProductsManufacturedProducts1!: Ref<ManufacturedProducts>;

}
",
]
`;

exports[`4898 non_composite_ambiguous_fk_example scalarPropertiesForRelations=always bidirectionalRelations=true identifiedReferences=true entitySchema=true: dump 1`] = `
[
  "import { Collection, EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Products } from './Products';
import { ShippableProducts } from './ShippableProducts';

export class DeliverableProducts {
  [PrimaryKeyProp]?: 'product';
  product!: Ref<Products>;
  productId!: number;
  startingAt!: Date;
  deliverableProductsInverse = new Collection<ShippableProducts>(this);
}

export const DeliverableProductsSchema = new EntitySchema({
  class: DeliverableProducts,
  properties: {
    product: {
      primary: true,
      kind: '1:1',
      entity: () => Products,
      ref: true,
      fieldName: 'product_id',
    },
    productId: { type: 'number', persist: false },
    startingAt: { type: 'Date', length: 0 },
    deliverableProductsInverse: {
      kind: '1:m',
      entity: () => ShippableProducts,
      mappedBy: 'deliverableProducts',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { ShippableProducts } from './ShippableProducts';

export class Destinations {
  [PrimaryKeyProp]?: 'destinationId';
  destinationId!: number;
  name!: string;
  destinationsInverse = new Collection<ShippableProducts>(this);
}

export const DestinationsSchema = new EntitySchema({
  class: Destinations,
  properties: {
    destinationId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255, unique: 'name_UNIQUE' },
    destinationsInverse: { kind: '1:m', entity: () => ShippableProducts, mappedBy: 'destinations' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Products } from './Products';
import { ShippableProducts } from './ShippableProducts';

export class ManufacturedProducts {
  [PrimaryKeyProp]?: 'product';
  product!: Ref<Products>;
  productId!: number;
  place!: string;
  fkShippableProductsManufacturedProductsInverse = new Collection<ShippableProducts>(this);
  fkShippableProductsManufacturedProducts1Inverse = new Collection<ShippableProducts>(this);
}

export const ManufacturedProductsSchema = new EntitySchema({
  class: ManufacturedProducts,
  properties: {
    product: {
      primary: true,
      kind: '1:1',
      entity: () => Products,
      ref: true,
      fieldName: 'product_id',
    },
    productId: { type: 'number', persist: false },
    place: { type: 'string', length: 255 },
    fkShippableProductsManufacturedProductsInverse: {
      kind: '1:m',
      entity: () => ShippableProducts,
      mappedBy: 'fkShippableProductsManufacturedProducts',
    },
    fkShippableProductsManufacturedProducts1Inverse: {
      kind: '1:m',
      entity: () => ShippableProducts,
      mappedBy: 'fkShippableProductsManufacturedProducts1',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { ManufacturedProducts } from './ManufacturedProducts';

export class Products {
  [PrimaryKeyProp]?: 'productId';
  productId!: number;
  name!: string;
  productInverse?: Ref<ManufacturedProducts>;
}

export const ProductsSchema = new EntitySchema({
  class: Products,
  properties: {
    productId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255 },
    productInverse: {
      kind: '1:1',
      entity: () => ManufacturedProducts,
      ref: true,
      mappedBy: 'product',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { DeliverableProducts } from './DeliverableProducts';
import { Destinations } from './Destinations';
import { ManufacturedProducts } from './ManufacturedProducts';

export class ShippableProducts {
  [PrimaryKeyProp]?: ['deliverableProducts', 'fkShippableProductsManufacturedProducts', 'fkShippableProductsManufacturedProducts1'];
  productId!: number;
  destination!: string;
  deliverableProducts!: Ref<DeliverableProducts>;
  destinations!: Ref<Destinations>;
  fkShippableProductsManufacturedProducts!: Ref<ManufacturedProducts>;
  fkShippableProductsManufacturedProducts1!: Ref<ManufacturedProducts>;
}

export const ShippableProductsSchema = new EntitySchema({
  class: ShippableProducts,
  properties: {
    productId: { type: 'number', persist: false },
    destination: {
      type: 'string',
      length: 255,
      persist: false,
      index: 'fk_shippable_products_destinations1_idx',
    },
    deliverableProducts: {
      primary: true,
      kind: 'm:1',
      entity: () => DeliverableProducts,
      ref: true,
      fieldName: 'product_id',
    },
    destinations: {
      kind: 'm:1',
      entity: () => Destinations,
      ref: true,
      fieldName: 'destination',
      index: 'fk_shippable_products_destinations1_idx',
    },
    fkShippableProductsManufacturedProducts: {
      primary: true,
      kind: 'm:1',
      entity: () => ManufacturedProducts,
      ref: true,
      fieldName: 'product_id',
    },
    fkShippableProductsManufacturedProducts1: {
      primary: true,
      kind: 'm:1',
      entity: () => ManufacturedProducts,
      ref: true,
      fieldName: 'product_id',
    },
  },
});
",
]
`;

exports[`4898 non_composite_ambiguous_fk_example scalarPropertiesForRelations=never bidirectionalRelations=false identifiedReferences=false entitySchema=false: dump 1`] = `
[
  "import { Entity, OneToOne, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Products } from './Products';

@Entity()
export class DeliverableProducts {

  [PrimaryKeyProp]?: 'product';

  @OneToOne({ entity: () => Products, fieldName: 'product_id', primary: true })
  product!: Products;

  @Property({ length: 0 })
  startingAt!: Date;

}
",
  "import { Entity, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';

@Entity()
export class Destinations {

  [PrimaryKeyProp]?: 'destinationId';

  @PrimaryKey()
  destinationId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property({ length: 255 })
  name!: string;

}
",
  "import { Entity, OneToOne, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Products } from './Products';

@Entity()
export class ManufacturedProducts {

  [PrimaryKeyProp]?: 'product';

  @OneToOne({ entity: () => Products, fieldName: 'product_id', primary: true })
  product!: Products;

  @Property({ length: 255 })
  place!: string;

}
",
  "import { Entity, PrimaryKey, PrimaryKeyProp, Property } from '@mikro-orm/core';

@Entity()
export class Products {

  [PrimaryKeyProp]?: 'productId';

  @PrimaryKey()
  productId!: number;

  @Property({ length: 255 })
  name!: string;

}
",
  "import { Entity, ManyToOne, PrimaryKeyProp } from '@mikro-orm/core';
import { DeliverableProducts } from './DeliverableProducts';
import { Destinations } from './Destinations';
import { ManufacturedProducts } from './ManufacturedProducts';

@Entity()
export class ShippableProducts {

  [PrimaryKeyProp]?: ['deliverableProducts', 'fkShippableProductsManufacturedProducts', 'fkShippableProductsManufacturedProducts1'];

  @ManyToOne({ entity: () => Destinations, fieldName: 'destination', index: 'fk_shippable_products_destinations1_idx' })
  destination!: Destinations;

  @ManyToOne({ entity: () => DeliverableProducts, fieldName: 'product_id', primary: true })
  deliverableProducts!: DeliverableProducts;

  @ManyToOne({ entity: () => ManufacturedProducts, fieldName: 'product_id', primary: true })
  fkShippableProductsManufacturedProducts!: ManufacturedProducts;

  @ManyToOne({ entity: () => ManufacturedProducts, fieldName: 'product_id', primary: true })
  fkShippableProductsManufacturedProducts1!: ManufacturedProducts;

}
",
]
`;

exports[`4898 non_composite_ambiguous_fk_example scalarPropertiesForRelations=never bidirectionalRelations=false identifiedReferences=false entitySchema=true: dump 1`] = `
[
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class DeliverableProducts {
  [PrimaryKeyProp]?: 'product';
  product!: Products;
  startingAt!: Date;
}

export const DeliverableProductsSchema = new EntitySchema({
  class: DeliverableProducts,
  properties: {
    product: { primary: true, kind: '1:1', entity: () => Products, fieldName: 'product_id' },
    startingAt: { type: 'Date', length: 0 },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Destinations {
  [PrimaryKeyProp]?: 'destinationId';
  destinationId!: number;
  name!: string;
}

export const DestinationsSchema = new EntitySchema({
  class: Destinations,
  properties: {
    destinationId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255, unique: 'name_UNIQUE' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class ManufacturedProducts {
  [PrimaryKeyProp]?: 'product';
  product!: Products;
  place!: string;
}

export const ManufacturedProductsSchema = new EntitySchema({
  class: ManufacturedProducts,
  properties: {
    product: { primary: true, kind: '1:1', entity: () => Products, fieldName: 'product_id' },
    place: { type: 'string', length: 255 },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Products {
  [PrimaryKeyProp]?: 'productId';
  productId!: number;
  name!: string;
}

export const ProductsSchema = new EntitySchema({
  class: Products,
  properties: {
    productId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255 },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class ShippableProducts {
  [PrimaryKeyProp]?: ['deliverableProducts', 'fkShippableProductsManufacturedProducts', 'fkShippableProductsManufacturedProducts1'];
  destination!: Destinations;
  deliverableProducts!: DeliverableProducts;
  fkShippableProductsManufacturedProducts!: ManufacturedProducts;
  fkShippableProductsManufacturedProducts1!: ManufacturedProducts;
}

export const ShippableProductsSchema = new EntitySchema({
  class: ShippableProducts,
  properties: {
    destination: {
      kind: 'm:1',
      entity: () => Destinations,
      fieldName: 'destination',
      index: 'fk_shippable_products_destinations1_idx',
    },
    deliverableProducts: {
      primary: true,
      kind: 'm:1',
      entity: () => DeliverableProducts,
      fieldName: 'product_id',
    },
    fkShippableProductsManufacturedProducts: {
      primary: true,
      kind: 'm:1',
      entity: () => ManufacturedProducts,
      fieldName: 'product_id',
    },
    fkShippableProductsManufacturedProducts1: {
      primary: true,
      kind: 'm:1',
      entity: () => ManufacturedProducts,
      fieldName: 'product_id',
    },
  },
});
",
]
`;

exports[`4898 non_composite_ambiguous_fk_example scalarPropertiesForRelations=never bidirectionalRelations=false identifiedReferences=true entitySchema=false: dump 1`] = `
[
  "import { Entity, OneToOne, PrimaryKeyProp, Property, Ref } from '@mikro-orm/core';
import { Products } from './Products';

@Entity()
export class DeliverableProducts {

  [PrimaryKeyProp]?: 'product';

  @OneToOne({ entity: () => Products, ref: true, fieldName: 'product_id', primary: true })
  product!: Ref<Products>;

  @Property({ length: 0 })
  startingAt!: Date;

}
",
  "import { Entity, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';

@Entity()
export class Destinations {

  [PrimaryKeyProp]?: 'destinationId';

  @PrimaryKey()
  destinationId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property({ length: 255 })
  name!: string;

}
",
  "import { Entity, OneToOne, PrimaryKeyProp, Property, Ref } from '@mikro-orm/core';
import { Products } from './Products';

@Entity()
export class ManufacturedProducts {

  [PrimaryKeyProp]?: 'product';

  @OneToOne({ entity: () => Products, ref: true, fieldName: 'product_id', primary: true })
  product!: Ref<Products>;

  @Property({ length: 255 })
  place!: string;

}
",
  "import { Entity, PrimaryKey, PrimaryKeyProp, Property } from '@mikro-orm/core';

@Entity()
export class Products {

  [PrimaryKeyProp]?: 'productId';

  @PrimaryKey()
  productId!: number;

  @Property({ length: 255 })
  name!: string;

}
",
  "import { Entity, ManyToOne, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { DeliverableProducts } from './DeliverableProducts';
import { Destinations } from './Destinations';
import { ManufacturedProducts } from './ManufacturedProducts';

@Entity()
export class ShippableProducts {

  [PrimaryKeyProp]?: ['deliverableProducts', 'fkShippableProductsManufacturedProducts', 'fkShippableProductsManufacturedProducts1'];

  @ManyToOne({ entity: () => Destinations, ref: true, fieldName: 'destination', index: 'fk_shippable_products_destinations1_idx' })
  destination!: Ref<Destinations>;

  @ManyToOne({ entity: () => DeliverableProducts, ref: true, fieldName: 'product_id', primary: true })
  deliverableProducts!: Ref<DeliverableProducts>;

  @ManyToOne({ entity: () => ManufacturedProducts, ref: true, fieldName: 'product_id', primary: true })
  fkShippableProductsManufacturedProducts!: Ref<ManufacturedProducts>;

  @ManyToOne({ entity: () => ManufacturedProducts, ref: true, fieldName: 'product_id', primary: true })
  fkShippableProductsManufacturedProducts1!: Ref<ManufacturedProducts>;

}
",
]
`;

exports[`4898 non_composite_ambiguous_fk_example scalarPropertiesForRelations=never bidirectionalRelations=false identifiedReferences=true entitySchema=true: dump 1`] = `
[
  "import { EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Products } from './Products';

export class DeliverableProducts {
  [PrimaryKeyProp]?: 'product';
  product!: Ref<Products>;
  startingAt!: Date;
}

export const DeliverableProductsSchema = new EntitySchema({
  class: DeliverableProducts,
  properties: {
    product: {
      primary: true,
      kind: '1:1',
      entity: () => Products,
      ref: true,
      fieldName: 'product_id',
    },
    startingAt: { type: 'Date', length: 0 },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Destinations {
  [PrimaryKeyProp]?: 'destinationId';
  destinationId!: number;
  name!: string;
}

export const DestinationsSchema = new EntitySchema({
  class: Destinations,
  properties: {
    destinationId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255, unique: 'name_UNIQUE' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Products } from './Products';

export class ManufacturedProducts {
  [PrimaryKeyProp]?: 'product';
  product!: Ref<Products>;
  place!: string;
}

export const ManufacturedProductsSchema = new EntitySchema({
  class: ManufacturedProducts,
  properties: {
    product: {
      primary: true,
      kind: '1:1',
      entity: () => Products,
      ref: true,
      fieldName: 'product_id',
    },
    place: { type: 'string', length: 255 },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Products {
  [PrimaryKeyProp]?: 'productId';
  productId!: number;
  name!: string;
}

export const ProductsSchema = new EntitySchema({
  class: Products,
  properties: {
    productId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255 },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { DeliverableProducts } from './DeliverableProducts';
import { Destinations } from './Destinations';
import { ManufacturedProducts } from './ManufacturedProducts';

export class ShippableProducts {
  [PrimaryKeyProp]?: ['deliverableProducts', 'fkShippableProductsManufacturedProducts', 'fkShippableProductsManufacturedProducts1'];
  destination!: Ref<Destinations>;
  deliverableProducts!: Ref<DeliverableProducts>;
  fkShippableProductsManufacturedProducts!: Ref<ManufacturedProducts>;
  fkShippableProductsManufacturedProducts1!: Ref<ManufacturedProducts>;
}

export const ShippableProductsSchema = new EntitySchema({
  class: ShippableProducts,
  properties: {
    destination: {
      kind: 'm:1',
      entity: () => Destinations,
      ref: true,
      fieldName: 'destination',
      index: 'fk_shippable_products_destinations1_idx',
    },
    deliverableProducts: {
      primary: true,
      kind: 'm:1',
      entity: () => DeliverableProducts,
      ref: true,
      fieldName: 'product_id',
    },
    fkShippableProductsManufacturedProducts: {
      primary: true,
      kind: 'm:1',
      entity: () => ManufacturedProducts,
      ref: true,
      fieldName: 'product_id',
    },
    fkShippableProductsManufacturedProducts1: {
      primary: true,
      kind: 'm:1',
      entity: () => ManufacturedProducts,
      ref: true,
      fieldName: 'product_id',
    },
  },
});
",
]
`;

exports[`4898 non_composite_ambiguous_fk_example scalarPropertiesForRelations=never bidirectionalRelations=true identifiedReferences=false entitySchema=false: dump 1`] = `
[
  "import { Collection, Entity, OneToMany, OneToOne, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Products } from './Products';
import { ShippableProducts } from './ShippableProducts';

@Entity()
export class DeliverableProducts {

  [PrimaryKeyProp]?: 'product';

  @OneToOne({ entity: () => Products, fieldName: 'product_id', primary: true })
  product!: Products;

  @Property({ length: 0 })
  startingAt!: Date;

  @OneToMany({ entity: () => ShippableProducts, mappedBy: 'deliverableProducts' })
  deliverableProductsInverse = new Collection<ShippableProducts>(this);

}
",
  "import { Collection, Entity, OneToMany, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { ShippableProducts } from './ShippableProducts';

@Entity()
export class Destinations {

  [PrimaryKeyProp]?: 'destinationId';

  @PrimaryKey()
  destinationId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property({ length: 255 })
  name!: string;

  @OneToMany({ entity: () => ShippableProducts, mappedBy: 'destination' })
  destinationInverse = new Collection<ShippableProducts>(this);

}
",
  "import { Collection, Entity, OneToMany, OneToOne, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Products } from './Products';
import { ShippableProducts } from './ShippableProducts';

@Entity()
export class ManufacturedProducts {

  [PrimaryKeyProp]?: 'product';

  @OneToOne({ entity: () => Products, fieldName: 'product_id', primary: true })
  product!: Products;

  @Property({ length: 255 })
  place!: string;

  @OneToMany({ entity: () => ShippableProducts, mappedBy: 'fkShippableProductsManufacturedProducts' })
  fkShippableProductsManufacturedProductsInverse = new Collection<ShippableProducts>(this);

  @OneToMany({ entity: () => ShippableProducts, mappedBy: 'fkShippableProductsManufacturedProducts1' })
  fkShippableProductsManufacturedProducts1Inverse = new Collection<ShippableProducts>(this);

}
",
  "import { Entity, OneToOne, PrimaryKey, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { ManufacturedProducts } from './ManufacturedProducts';

@Entity()
export class Products {

  [PrimaryKeyProp]?: 'productId';

  @PrimaryKey()
  productId!: number;

  @Property({ length: 255 })
  name!: string;

  @OneToOne({ entity: () => ManufacturedProducts, mappedBy: 'product' })
  productInverse?: ManufacturedProducts;

}
",
  "import { Entity, ManyToOne, PrimaryKeyProp } from '@mikro-orm/core';
import { DeliverableProducts } from './DeliverableProducts';
import { Destinations } from './Destinations';
import { ManufacturedProducts } from './ManufacturedProducts';

@Entity()
export class ShippableProducts {

  [PrimaryKeyProp]?: ['deliverableProducts', 'fkShippableProductsManufacturedProducts', 'fkShippableProductsManufacturedProducts1'];

  @ManyToOne({ entity: () => Destinations, fieldName: 'destination', index: 'fk_shippable_products_destinations1_idx' })
  destination!: Destinations;

  @ManyToOne({ entity: () => DeliverableProducts, fieldName: 'product_id', primary: true })
  deliverableProducts!: DeliverableProducts;

  @ManyToOne({ entity: () => ManufacturedProducts, fieldName: 'product_id', primary: true })
  fkShippableProductsManufacturedProducts!: ManufacturedProducts;

  @ManyToOne({ entity: () => ManufacturedProducts, fieldName: 'product_id', primary: true })
  fkShippableProductsManufacturedProducts1!: ManufacturedProducts;

}
",
]
`;

exports[`4898 non_composite_ambiguous_fk_example scalarPropertiesForRelations=never bidirectionalRelations=true identifiedReferences=false entitySchema=true: dump 1`] = `
[
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { ShippableProducts } from './ShippableProducts';

export class DeliverableProducts {
  [PrimaryKeyProp]?: 'product';
  product!: Products;
  startingAt!: Date;
  deliverableProductsInverse = new Collection<ShippableProducts>(this);
}

export const DeliverableProductsSchema = new EntitySchema({
  class: DeliverableProducts,
  properties: {
    product: { primary: true, kind: '1:1', entity: () => Products, fieldName: 'product_id' },
    startingAt: { type: 'Date', length: 0 },
    deliverableProductsInverse: {
      kind: '1:m',
      entity: () => ShippableProducts,
      mappedBy: 'deliverableProducts',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { ShippableProducts } from './ShippableProducts';

export class Destinations {
  [PrimaryKeyProp]?: 'destinationId';
  destinationId!: number;
  name!: string;
  destinationInverse = new Collection<ShippableProducts>(this);
}

export const DestinationsSchema = new EntitySchema({
  class: Destinations,
  properties: {
    destinationId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255, unique: 'name_UNIQUE' },
    destinationInverse: { kind: '1:m', entity: () => ShippableProducts, mappedBy: 'destination' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { ShippableProducts } from './ShippableProducts';

export class ManufacturedProducts {
  [PrimaryKeyProp]?: 'product';
  product!: Products;
  place!: string;
  fkShippableProductsManufacturedProductsInverse = new Collection<ShippableProducts>(this);
  fkShippableProductsManufacturedProducts1Inverse = new Collection<ShippableProducts>(this);
}

export const ManufacturedProductsSchema = new EntitySchema({
  class: ManufacturedProducts,
  properties: {
    product: { primary: true, kind: '1:1', entity: () => Products, fieldName: 'product_id' },
    place: { type: 'string', length: 255 },
    fkShippableProductsManufacturedProductsInverse: {
      kind: '1:m',
      entity: () => ShippableProducts,
      mappedBy: 'fkShippableProductsManufacturedProducts',
    },
    fkShippableProductsManufacturedProducts1Inverse: {
      kind: '1:m',
      entity: () => ShippableProducts,
      mappedBy: 'fkShippableProductsManufacturedProducts1',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Products {
  [PrimaryKeyProp]?: 'productId';
  productId!: number;
  name!: string;
  productInverse?: ManufacturedProducts;
}

export const ProductsSchema = new EntitySchema({
  class: Products,
  properties: {
    productId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255 },
    productInverse: { kind: '1:1', entity: () => ManufacturedProducts, mappedBy: 'product' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class ShippableProducts {
  [PrimaryKeyProp]?: ['deliverableProducts', 'fkShippableProductsManufacturedProducts', 'fkShippableProductsManufacturedProducts1'];
  destination!: Destinations;
  deliverableProducts!: DeliverableProducts;
  fkShippableProductsManufacturedProducts!: ManufacturedProducts;
  fkShippableProductsManufacturedProducts1!: ManufacturedProducts;
}

export const ShippableProductsSchema = new EntitySchema({
  class: ShippableProducts,
  properties: {
    destination: {
      kind: 'm:1',
      entity: () => Destinations,
      fieldName: 'destination',
      index: 'fk_shippable_products_destinations1_idx',
    },
    deliverableProducts: {
      primary: true,
      kind: 'm:1',
      entity: () => DeliverableProducts,
      fieldName: 'product_id',
    },
    fkShippableProductsManufacturedProducts: {
      primary: true,
      kind: 'm:1',
      entity: () => ManufacturedProducts,
      fieldName: 'product_id',
    },
    fkShippableProductsManufacturedProducts1: {
      primary: true,
      kind: 'm:1',
      entity: () => ManufacturedProducts,
      fieldName: 'product_id',
    },
  },
});
",
]
`;

exports[`4898 non_composite_ambiguous_fk_example scalarPropertiesForRelations=never bidirectionalRelations=true identifiedReferences=true entitySchema=false: dump 1`] = `
[
  "import { Collection, Entity, OneToMany, OneToOne, PrimaryKeyProp, Property, Ref } from '@mikro-orm/core';
import { Products } from './Products';
import { ShippableProducts } from './ShippableProducts';

@Entity()
export class DeliverableProducts {

  [PrimaryKeyProp]?: 'product';

  @OneToOne({ entity: () => Products, ref: true, fieldName: 'product_id', primary: true })
  product!: Ref<Products>;

  @Property({ length: 0 })
  startingAt!: Date;

  @OneToMany({ entity: () => ShippableProducts, mappedBy: 'deliverableProducts' })
  deliverableProductsInverse = new Collection<ShippableProducts>(this);

}
",
  "import { Collection, Entity, OneToMany, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { ShippableProducts } from './ShippableProducts';

@Entity()
export class Destinations {

  [PrimaryKeyProp]?: 'destinationId';

  @PrimaryKey()
  destinationId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property({ length: 255 })
  name!: string;

  @OneToMany({ entity: () => ShippableProducts, mappedBy: 'destination' })
  destinationInverse = new Collection<ShippableProducts>(this);

}
",
  "import { Collection, Entity, OneToMany, OneToOne, PrimaryKeyProp, Property, Ref } from '@mikro-orm/core';
import { Products } from './Products';
import { ShippableProducts } from './ShippableProducts';

@Entity()
export class ManufacturedProducts {

  [PrimaryKeyProp]?: 'product';

  @OneToOne({ entity: () => Products, ref: true, fieldName: 'product_id', primary: true })
  product!: Ref<Products>;

  @Property({ length: 255 })
  place!: string;

  @OneToMany({ entity: () => ShippableProducts, mappedBy: 'fkShippableProductsManufacturedProducts' })
  fkShippableProductsManufacturedProductsInverse = new Collection<ShippableProducts>(this);

  @OneToMany({ entity: () => ShippableProducts, mappedBy: 'fkShippableProductsManufacturedProducts1' })
  fkShippableProductsManufacturedProducts1Inverse = new Collection<ShippableProducts>(this);

}
",
  "import { Entity, OneToOne, PrimaryKey, PrimaryKeyProp, Property, Ref } from '@mikro-orm/core';
import { ManufacturedProducts } from './ManufacturedProducts';

@Entity()
export class Products {

  [PrimaryKeyProp]?: 'productId';

  @PrimaryKey()
  productId!: number;

  @Property({ length: 255 })
  name!: string;

  @OneToOne({ entity: () => ManufacturedProducts, ref: true, mappedBy: 'product' })
  productInverse?: Ref<ManufacturedProducts>;

}
",
  "import { Entity, ManyToOne, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { DeliverableProducts } from './DeliverableProducts';
import { Destinations } from './Destinations';
import { ManufacturedProducts } from './ManufacturedProducts';

@Entity()
export class ShippableProducts {

  [PrimaryKeyProp]?: ['deliverableProducts', 'fkShippableProductsManufacturedProducts', 'fkShippableProductsManufacturedProducts1'];

  @ManyToOne({ entity: () => Destinations, ref: true, fieldName: 'destination', index: 'fk_shippable_products_destinations1_idx' })
  destination!: Ref<Destinations>;

  @ManyToOne({ entity: () => DeliverableProducts, ref: true, fieldName: 'product_id', primary: true })
  deliverableProducts!: Ref<DeliverableProducts>;

  @ManyToOne({ entity: () => ManufacturedProducts, ref: true, fieldName: 'product_id', primary: true })
  fkShippableProductsManufacturedProducts!: Ref<ManufacturedProducts>;

  @ManyToOne({ entity: () => ManufacturedProducts, ref: true, fieldName: 'product_id', primary: true })
  fkShippableProductsManufacturedProducts1!: Ref<ManufacturedProducts>;

}
",
]
`;

exports[`4898 non_composite_ambiguous_fk_example scalarPropertiesForRelations=never bidirectionalRelations=true identifiedReferences=true entitySchema=true: dump 1`] = `
[
  "import { Collection, EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Products } from './Products';
import { ShippableProducts } from './ShippableProducts';

export class DeliverableProducts {
  [PrimaryKeyProp]?: 'product';
  product!: Ref<Products>;
  startingAt!: Date;
  deliverableProductsInverse = new Collection<ShippableProducts>(this);
}

export const DeliverableProductsSchema = new EntitySchema({
  class: DeliverableProducts,
  properties: {
    product: {
      primary: true,
      kind: '1:1',
      entity: () => Products,
      ref: true,
      fieldName: 'product_id',
    },
    startingAt: { type: 'Date', length: 0 },
    deliverableProductsInverse: {
      kind: '1:m',
      entity: () => ShippableProducts,
      mappedBy: 'deliverableProducts',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { ShippableProducts } from './ShippableProducts';

export class Destinations {
  [PrimaryKeyProp]?: 'destinationId';
  destinationId!: number;
  name!: string;
  destinationInverse = new Collection<ShippableProducts>(this);
}

export const DestinationsSchema = new EntitySchema({
  class: Destinations,
  properties: {
    destinationId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255, unique: 'name_UNIQUE' },
    destinationInverse: { kind: '1:m', entity: () => ShippableProducts, mappedBy: 'destination' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Products } from './Products';
import { ShippableProducts } from './ShippableProducts';

export class ManufacturedProducts {
  [PrimaryKeyProp]?: 'product';
  product!: Ref<Products>;
  place!: string;
  fkShippableProductsManufacturedProductsInverse = new Collection<ShippableProducts>(this);
  fkShippableProductsManufacturedProducts1Inverse = new Collection<ShippableProducts>(this);
}

export const ManufacturedProductsSchema = new EntitySchema({
  class: ManufacturedProducts,
  properties: {
    product: {
      primary: true,
      kind: '1:1',
      entity: () => Products,
      ref: true,
      fieldName: 'product_id',
    },
    place: { type: 'string', length: 255 },
    fkShippableProductsManufacturedProductsInverse: {
      kind: '1:m',
      entity: () => ShippableProducts,
      mappedBy: 'fkShippableProductsManufacturedProducts',
    },
    fkShippableProductsManufacturedProducts1Inverse: {
      kind: '1:m',
      entity: () => ShippableProducts,
      mappedBy: 'fkShippableProductsManufacturedProducts1',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { ManufacturedProducts } from './ManufacturedProducts';

export class Products {
  [PrimaryKeyProp]?: 'productId';
  productId!: number;
  name!: string;
  productInverse?: Ref<ManufacturedProducts>;
}

export const ProductsSchema = new EntitySchema({
  class: Products,
  properties: {
    productId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255 },
    productInverse: {
      kind: '1:1',
      entity: () => ManufacturedProducts,
      ref: true,
      mappedBy: 'product',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { DeliverableProducts } from './DeliverableProducts';
import { Destinations } from './Destinations';
import { ManufacturedProducts } from './ManufacturedProducts';

export class ShippableProducts {
  [PrimaryKeyProp]?: ['deliverableProducts', 'fkShippableProductsManufacturedProducts', 'fkShippableProductsManufacturedProducts1'];
  destination!: Ref<Destinations>;
  deliverableProducts!: Ref<DeliverableProducts>;
  fkShippableProductsManufacturedProducts!: Ref<ManufacturedProducts>;
  fkShippableProductsManufacturedProducts1!: Ref<ManufacturedProducts>;
}

export const ShippableProductsSchema = new EntitySchema({
  class: ShippableProducts,
  properties: {
    destination: {
      kind: 'm:1',
      entity: () => Destinations,
      ref: true,
      fieldName: 'destination',
      index: 'fk_shippable_products_destinations1_idx',
    },
    deliverableProducts: {
      primary: true,
      kind: 'm:1',
      entity: () => DeliverableProducts,
      ref: true,
      fieldName: 'product_id',
    },
    fkShippableProductsManufacturedProducts: {
      primary: true,
      kind: 'm:1',
      entity: () => ManufacturedProducts,
      ref: true,
      fieldName: 'product_id',
    },
    fkShippableProductsManufacturedProducts1: {
      primary: true,
      kind: 'm:1',
      entity: () => ManufacturedProducts,
      ref: true,
      fieldName: 'product_id',
    },
  },
});
",
]
`;

exports[`4898 non_composite_ambiguous_fk_example scalarPropertiesForRelations=smart bidirectionalRelations=false identifiedReferences=false entitySchema=false: dump 1`] = `
[
  "import { Entity, OneToOne, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Products } from './Products';

@Entity()
export class DeliverableProducts {

  [PrimaryKeyProp]?: 'product';

  @OneToOne({ entity: () => Products, fieldName: 'product_id', primary: true })
  product!: Products;

  @Property({ length: 0 })
  startingAt!: Date;

}
",
  "import { Entity, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';

@Entity()
export class Destinations {

  [PrimaryKeyProp]?: 'destinationId';

  @PrimaryKey()
  destinationId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property({ length: 255 })
  name!: string;

}
",
  "import { Entity, OneToOne, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Products } from './Products';

@Entity()
export class ManufacturedProducts {

  [PrimaryKeyProp]?: 'product';

  @OneToOne({ entity: () => Products, fieldName: 'product_id', primary: true })
  product!: Products;

  @Property({ length: 255 })
  place!: string;

}
",
  "import { Entity, PrimaryKey, PrimaryKeyProp, Property } from '@mikro-orm/core';

@Entity()
export class Products {

  [PrimaryKeyProp]?: 'productId';

  @PrimaryKey()
  productId!: number;

  @Property({ length: 255 })
  name!: string;

}
",
  "import { Entity, ManyToOne, PrimaryKeyProp } from '@mikro-orm/core';
import { DeliverableProducts } from './DeliverableProducts';
import { Destinations } from './Destinations';
import { ManufacturedProducts } from './ManufacturedProducts';

@Entity()
export class ShippableProducts {

  [PrimaryKeyProp]?: ['deliverableProducts', 'fkShippableProductsManufacturedProducts', 'fkShippableProductsManufacturedProducts1'];

  @ManyToOne({ entity: () => Destinations, fieldName: 'destination', index: 'fk_shippable_products_destinations1_idx' })
  destination!: Destinations;

  @ManyToOne({ entity: () => DeliverableProducts, fieldName: 'product_id', primary: true })
  deliverableProducts!: DeliverableProducts;

  @ManyToOne({ entity: () => ManufacturedProducts, fieldName: 'product_id', primary: true })
  fkShippableProductsManufacturedProducts!: ManufacturedProducts;

  @ManyToOne({ entity: () => ManufacturedProducts, fieldName: 'product_id', primary: true })
  fkShippableProductsManufacturedProducts1!: ManufacturedProducts;

}
",
]
`;

exports[`4898 non_composite_ambiguous_fk_example scalarPropertiesForRelations=smart bidirectionalRelations=false identifiedReferences=false entitySchema=true: dump 1`] = `
[
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class DeliverableProducts {
  [PrimaryKeyProp]?: 'product';
  product!: Products;
  startingAt!: Date;
}

export const DeliverableProductsSchema = new EntitySchema({
  class: DeliverableProducts,
  properties: {
    product: { primary: true, kind: '1:1', entity: () => Products, fieldName: 'product_id' },
    startingAt: { type: 'Date', length: 0 },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Destinations {
  [PrimaryKeyProp]?: 'destinationId';
  destinationId!: number;
  name!: string;
}

export const DestinationsSchema = new EntitySchema({
  class: Destinations,
  properties: {
    destinationId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255, unique: 'name_UNIQUE' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class ManufacturedProducts {
  [PrimaryKeyProp]?: 'product';
  product!: Products;
  place!: string;
}

export const ManufacturedProductsSchema = new EntitySchema({
  class: ManufacturedProducts,
  properties: {
    product: { primary: true, kind: '1:1', entity: () => Products, fieldName: 'product_id' },
    place: { type: 'string', length: 255 },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Products {
  [PrimaryKeyProp]?: 'productId';
  productId!: number;
  name!: string;
}

export const ProductsSchema = new EntitySchema({
  class: Products,
  properties: {
    productId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255 },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class ShippableProducts {
  [PrimaryKeyProp]?: ['deliverableProducts', 'fkShippableProductsManufacturedProducts', 'fkShippableProductsManufacturedProducts1'];
  destination!: Destinations;
  deliverableProducts!: DeliverableProducts;
  fkShippableProductsManufacturedProducts!: ManufacturedProducts;
  fkShippableProductsManufacturedProducts1!: ManufacturedProducts;
}

export const ShippableProductsSchema = new EntitySchema({
  class: ShippableProducts,
  properties: {
    destination: {
      kind: 'm:1',
      entity: () => Destinations,
      fieldName: 'destination',
      index: 'fk_shippable_products_destinations1_idx',
    },
    deliverableProducts: {
      primary: true,
      kind: 'm:1',
      entity: () => DeliverableProducts,
      fieldName: 'product_id',
    },
    fkShippableProductsManufacturedProducts: {
      primary: true,
      kind: 'm:1',
      entity: () => ManufacturedProducts,
      fieldName: 'product_id',
    },
    fkShippableProductsManufacturedProducts1: {
      primary: true,
      kind: 'm:1',
      entity: () => ManufacturedProducts,
      fieldName: 'product_id',
    },
  },
});
",
]
`;

exports[`4898 non_composite_ambiguous_fk_example scalarPropertiesForRelations=smart bidirectionalRelations=false identifiedReferences=true entitySchema=false: dump 1`] = `
[
  "import { Entity, OneToOne, PrimaryKeyProp, Property, Ref } from '@mikro-orm/core';
import { Products } from './Products';

@Entity()
export class DeliverableProducts {

  [PrimaryKeyProp]?: 'product';

  @OneToOne({ entity: () => Products, ref: true, fieldName: 'product_id', primary: true })
  product!: Ref<Products>;

  @Property({ length: 0 })
  startingAt!: Date;

}
",
  "import { Entity, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';

@Entity()
export class Destinations {

  [PrimaryKeyProp]?: 'destinationId';

  @PrimaryKey()
  destinationId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property({ length: 255 })
  name!: string;

}
",
  "import { Entity, OneToOne, PrimaryKeyProp, Property, Ref } from '@mikro-orm/core';
import { Products } from './Products';

@Entity()
export class ManufacturedProducts {

  [PrimaryKeyProp]?: 'product';

  @OneToOne({ entity: () => Products, ref: true, fieldName: 'product_id', primary: true })
  product!: Ref<Products>;

  @Property({ length: 255 })
  place!: string;

}
",
  "import { Entity, PrimaryKey, PrimaryKeyProp, Property } from '@mikro-orm/core';

@Entity()
export class Products {

  [PrimaryKeyProp]?: 'productId';

  @PrimaryKey()
  productId!: number;

  @Property({ length: 255 })
  name!: string;

}
",
  "import { Entity, ManyToOne, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { DeliverableProducts } from './DeliverableProducts';
import { Destinations } from './Destinations';
import { ManufacturedProducts } from './ManufacturedProducts';

@Entity()
export class ShippableProducts {

  [PrimaryKeyProp]?: ['deliverableProducts', 'fkShippableProductsManufacturedProducts', 'fkShippableProductsManufacturedProducts1'];

  @ManyToOne({ entity: () => Destinations, ref: true, fieldName: 'destination', index: 'fk_shippable_products_destinations1_idx' })
  destination!: Ref<Destinations>;

  @ManyToOne({ entity: () => DeliverableProducts, ref: true, fieldName: 'product_id', primary: true })
  deliverableProducts!: Ref<DeliverableProducts>;

  @ManyToOne({ entity: () => ManufacturedProducts, ref: true, fieldName: 'product_id', primary: true })
  fkShippableProductsManufacturedProducts!: Ref<ManufacturedProducts>;

  @ManyToOne({ entity: () => ManufacturedProducts, ref: true, fieldName: 'product_id', primary: true })
  fkShippableProductsManufacturedProducts1!: Ref<ManufacturedProducts>;

}
",
]
`;

exports[`4898 non_composite_ambiguous_fk_example scalarPropertiesForRelations=smart bidirectionalRelations=false identifiedReferences=true entitySchema=true: dump 1`] = `
[
  "import { EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Products } from './Products';

export class DeliverableProducts {
  [PrimaryKeyProp]?: 'product';
  product!: Ref<Products>;
  startingAt!: Date;
}

export const DeliverableProductsSchema = new EntitySchema({
  class: DeliverableProducts,
  properties: {
    product: {
      primary: true,
      kind: '1:1',
      entity: () => Products,
      ref: true,
      fieldName: 'product_id',
    },
    startingAt: { type: 'Date', length: 0 },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Destinations {
  [PrimaryKeyProp]?: 'destinationId';
  destinationId!: number;
  name!: string;
}

export const DestinationsSchema = new EntitySchema({
  class: Destinations,
  properties: {
    destinationId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255, unique: 'name_UNIQUE' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Products } from './Products';

export class ManufacturedProducts {
  [PrimaryKeyProp]?: 'product';
  product!: Ref<Products>;
  place!: string;
}

export const ManufacturedProductsSchema = new EntitySchema({
  class: ManufacturedProducts,
  properties: {
    product: {
      primary: true,
      kind: '1:1',
      entity: () => Products,
      ref: true,
      fieldName: 'product_id',
    },
    place: { type: 'string', length: 255 },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Products {
  [PrimaryKeyProp]?: 'productId';
  productId!: number;
  name!: string;
}

export const ProductsSchema = new EntitySchema({
  class: Products,
  properties: {
    productId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255 },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { DeliverableProducts } from './DeliverableProducts';
import { Destinations } from './Destinations';
import { ManufacturedProducts } from './ManufacturedProducts';

export class ShippableProducts {
  [PrimaryKeyProp]?: ['deliverableProducts', 'fkShippableProductsManufacturedProducts', 'fkShippableProductsManufacturedProducts1'];
  destination!: Ref<Destinations>;
  deliverableProducts!: Ref<DeliverableProducts>;
  fkShippableProductsManufacturedProducts!: Ref<ManufacturedProducts>;
  fkShippableProductsManufacturedProducts1!: Ref<ManufacturedProducts>;
}

export const ShippableProductsSchema = new EntitySchema({
  class: ShippableProducts,
  properties: {
    destination: {
      kind: 'm:1',
      entity: () => Destinations,
      ref: true,
      fieldName: 'destination',
      index: 'fk_shippable_products_destinations1_idx',
    },
    deliverableProducts: {
      primary: true,
      kind: 'm:1',
      entity: () => DeliverableProducts,
      ref: true,
      fieldName: 'product_id',
    },
    fkShippableProductsManufacturedProducts: {
      primary: true,
      kind: 'm:1',
      entity: () => ManufacturedProducts,
      ref: true,
      fieldName: 'product_id',
    },
    fkShippableProductsManufacturedProducts1: {
      primary: true,
      kind: 'm:1',
      entity: () => ManufacturedProducts,
      ref: true,
      fieldName: 'product_id',
    },
  },
});
",
]
`;

exports[`4898 non_composite_ambiguous_fk_example scalarPropertiesForRelations=smart bidirectionalRelations=true identifiedReferences=false entitySchema=false: dump 1`] = `
[
  "import { Collection, Entity, OneToMany, OneToOne, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Products } from './Products';
import { ShippableProducts } from './ShippableProducts';

@Entity()
export class DeliverableProducts {

  [PrimaryKeyProp]?: 'product';

  @OneToOne({ entity: () => Products, fieldName: 'product_id', primary: true })
  product!: Products;

  @Property({ length: 0 })
  startingAt!: Date;

  @OneToMany({ entity: () => ShippableProducts, mappedBy: 'deliverableProducts' })
  deliverableProductsInverse = new Collection<ShippableProducts>(this);

}
",
  "import { Collection, Entity, OneToMany, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { ShippableProducts } from './ShippableProducts';

@Entity()
export class Destinations {

  [PrimaryKeyProp]?: 'destinationId';

  @PrimaryKey()
  destinationId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property({ length: 255 })
  name!: string;

  @OneToMany({ entity: () => ShippableProducts, mappedBy: 'destination' })
  destinationInverse = new Collection<ShippableProducts>(this);

}
",
  "import { Collection, Entity, OneToMany, OneToOne, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Products } from './Products';
import { ShippableProducts } from './ShippableProducts';

@Entity()
export class ManufacturedProducts {

  [PrimaryKeyProp]?: 'product';

  @OneToOne({ entity: () => Products, fieldName: 'product_id', primary: true })
  product!: Products;

  @Property({ length: 255 })
  place!: string;

  @OneToMany({ entity: () => ShippableProducts, mappedBy: 'fkShippableProductsManufacturedProducts' })
  fkShippableProductsManufacturedProductsInverse = new Collection<ShippableProducts>(this);

  @OneToMany({ entity: () => ShippableProducts, mappedBy: 'fkShippableProductsManufacturedProducts1' })
  fkShippableProductsManufacturedProducts1Inverse = new Collection<ShippableProducts>(this);

}
",
  "import { Entity, OneToOne, PrimaryKey, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { ManufacturedProducts } from './ManufacturedProducts';

@Entity()
export class Products {

  [PrimaryKeyProp]?: 'productId';

  @PrimaryKey()
  productId!: number;

  @Property({ length: 255 })
  name!: string;

  @OneToOne({ entity: () => ManufacturedProducts, mappedBy: 'product' })
  productInverse?: ManufacturedProducts;

}
",
  "import { Entity, ManyToOne, PrimaryKeyProp } from '@mikro-orm/core';
import { DeliverableProducts } from './DeliverableProducts';
import { Destinations } from './Destinations';
import { ManufacturedProducts } from './ManufacturedProducts';

@Entity()
export class ShippableProducts {

  [PrimaryKeyProp]?: ['deliverableProducts', 'fkShippableProductsManufacturedProducts', 'fkShippableProductsManufacturedProducts1'];

  @ManyToOne({ entity: () => Destinations, fieldName: 'destination', index: 'fk_shippable_products_destinations1_idx' })
  destination!: Destinations;

  @ManyToOne({ entity: () => DeliverableProducts, fieldName: 'product_id', primary: true })
  deliverableProducts!: DeliverableProducts;

  @ManyToOne({ entity: () => ManufacturedProducts, fieldName: 'product_id', primary: true })
  fkShippableProductsManufacturedProducts!: ManufacturedProducts;

  @ManyToOne({ entity: () => ManufacturedProducts, fieldName: 'product_id', primary: true })
  fkShippableProductsManufacturedProducts1!: ManufacturedProducts;

}
",
]
`;

exports[`4898 non_composite_ambiguous_fk_example scalarPropertiesForRelations=smart bidirectionalRelations=true identifiedReferences=false entitySchema=true: dump 1`] = `
[
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { ShippableProducts } from './ShippableProducts';

export class DeliverableProducts {
  [PrimaryKeyProp]?: 'product';
  product!: Products;
  startingAt!: Date;
  deliverableProductsInverse = new Collection<ShippableProducts>(this);
}

export const DeliverableProductsSchema = new EntitySchema({
  class: DeliverableProducts,
  properties: {
    product: { primary: true, kind: '1:1', entity: () => Products, fieldName: 'product_id' },
    startingAt: { type: 'Date', length: 0 },
    deliverableProductsInverse: {
      kind: '1:m',
      entity: () => ShippableProducts,
      mappedBy: 'deliverableProducts',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { ShippableProducts } from './ShippableProducts';

export class Destinations {
  [PrimaryKeyProp]?: 'destinationId';
  destinationId!: number;
  name!: string;
  destinationInverse = new Collection<ShippableProducts>(this);
}

export const DestinationsSchema = new EntitySchema({
  class: Destinations,
  properties: {
    destinationId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255, unique: 'name_UNIQUE' },
    destinationInverse: { kind: '1:m', entity: () => ShippableProducts, mappedBy: 'destination' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { ShippableProducts } from './ShippableProducts';

export class ManufacturedProducts {
  [PrimaryKeyProp]?: 'product';
  product!: Products;
  place!: string;
  fkShippableProductsManufacturedProductsInverse = new Collection<ShippableProducts>(this);
  fkShippableProductsManufacturedProducts1Inverse = new Collection<ShippableProducts>(this);
}

export const ManufacturedProductsSchema = new EntitySchema({
  class: ManufacturedProducts,
  properties: {
    product: { primary: true, kind: '1:1', entity: () => Products, fieldName: 'product_id' },
    place: { type: 'string', length: 255 },
    fkShippableProductsManufacturedProductsInverse: {
      kind: '1:m',
      entity: () => ShippableProducts,
      mappedBy: 'fkShippableProductsManufacturedProducts',
    },
    fkShippableProductsManufacturedProducts1Inverse: {
      kind: '1:m',
      entity: () => ShippableProducts,
      mappedBy: 'fkShippableProductsManufacturedProducts1',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Products {
  [PrimaryKeyProp]?: 'productId';
  productId!: number;
  name!: string;
  productInverse?: ManufacturedProducts;
}

export const ProductsSchema = new EntitySchema({
  class: Products,
  properties: {
    productId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255 },
    productInverse: { kind: '1:1', entity: () => ManufacturedProducts, mappedBy: 'product' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class ShippableProducts {
  [PrimaryKeyProp]?: ['deliverableProducts', 'fkShippableProductsManufacturedProducts', 'fkShippableProductsManufacturedProducts1'];
  destination!: Destinations;
  deliverableProducts!: DeliverableProducts;
  fkShippableProductsManufacturedProducts!: ManufacturedProducts;
  fkShippableProductsManufacturedProducts1!: ManufacturedProducts;
}

export const ShippableProductsSchema = new EntitySchema({
  class: ShippableProducts,
  properties: {
    destination: {
      kind: 'm:1',
      entity: () => Destinations,
      fieldName: 'destination',
      index: 'fk_shippable_products_destinations1_idx',
    },
    deliverableProducts: {
      primary: true,
      kind: 'm:1',
      entity: () => DeliverableProducts,
      fieldName: 'product_id',
    },
    fkShippableProductsManufacturedProducts: {
      primary: true,
      kind: 'm:1',
      entity: () => ManufacturedProducts,
      fieldName: 'product_id',
    },
    fkShippableProductsManufacturedProducts1: {
      primary: true,
      kind: 'm:1',
      entity: () => ManufacturedProducts,
      fieldName: 'product_id',
    },
  },
});
",
]
`;

exports[`4898 non_composite_ambiguous_fk_example scalarPropertiesForRelations=smart bidirectionalRelations=true identifiedReferences=true entitySchema=false: dump 1`] = `
[
  "import { Collection, Entity, OneToMany, OneToOne, PrimaryKeyProp, Property, Ref } from '@mikro-orm/core';
import { Products } from './Products';
import { ShippableProducts } from './ShippableProducts';

@Entity()
export class DeliverableProducts {

  [PrimaryKeyProp]?: 'product';

  @OneToOne({ entity: () => Products, ref: true, fieldName: 'product_id', primary: true })
  product!: Ref<Products>;

  @Property({ length: 0 })
  startingAt!: Date;

  @OneToMany({ entity: () => ShippableProducts, mappedBy: 'deliverableProducts' })
  deliverableProductsInverse = new Collection<ShippableProducts>(this);

}
",
  "import { Collection, Entity, OneToMany, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { ShippableProducts } from './ShippableProducts';

@Entity()
export class Destinations {

  [PrimaryKeyProp]?: 'destinationId';

  @PrimaryKey()
  destinationId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property({ length: 255 })
  name!: string;

  @OneToMany({ entity: () => ShippableProducts, mappedBy: 'destination' })
  destinationInverse = new Collection<ShippableProducts>(this);

}
",
  "import { Collection, Entity, OneToMany, OneToOne, PrimaryKeyProp, Property, Ref } from '@mikro-orm/core';
import { Products } from './Products';
import { ShippableProducts } from './ShippableProducts';

@Entity()
export class ManufacturedProducts {

  [PrimaryKeyProp]?: 'product';

  @OneToOne({ entity: () => Products, ref: true, fieldName: 'product_id', primary: true })
  product!: Ref<Products>;

  @Property({ length: 255 })
  place!: string;

  @OneToMany({ entity: () => ShippableProducts, mappedBy: 'fkShippableProductsManufacturedProducts' })
  fkShippableProductsManufacturedProductsInverse = new Collection<ShippableProducts>(this);

  @OneToMany({ entity: () => ShippableProducts, mappedBy: 'fkShippableProductsManufacturedProducts1' })
  fkShippableProductsManufacturedProducts1Inverse = new Collection<ShippableProducts>(this);

}
",
  "import { Entity, OneToOne, PrimaryKey, PrimaryKeyProp, Property, Ref } from '@mikro-orm/core';
import { ManufacturedProducts } from './ManufacturedProducts';

@Entity()
export class Products {

  [PrimaryKeyProp]?: 'productId';

  @PrimaryKey()
  productId!: number;

  @Property({ length: 255 })
  name!: string;

  @OneToOne({ entity: () => ManufacturedProducts, ref: true, mappedBy: 'product' })
  productInverse?: Ref<ManufacturedProducts>;

}
",
  "import { Entity, ManyToOne, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { DeliverableProducts } from './DeliverableProducts';
import { Destinations } from './Destinations';
import { ManufacturedProducts } from './ManufacturedProducts';

@Entity()
export class ShippableProducts {

  [PrimaryKeyProp]?: ['deliverableProducts', 'fkShippableProductsManufacturedProducts', 'fkShippableProductsManufacturedProducts1'];

  @ManyToOne({ entity: () => Destinations, ref: true, fieldName: 'destination', index: 'fk_shippable_products_destinations1_idx' })
  destination!: Ref<Destinations>;

  @ManyToOne({ entity: () => DeliverableProducts, ref: true, fieldName: 'product_id', primary: true })
  deliverableProducts!: Ref<DeliverableProducts>;

  @ManyToOne({ entity: () => ManufacturedProducts, ref: true, fieldName: 'product_id', primary: true })
  fkShippableProductsManufacturedProducts!: Ref<ManufacturedProducts>;

  @ManyToOne({ entity: () => ManufacturedProducts, ref: true, fieldName: 'product_id', primary: true })
  fkShippableProductsManufacturedProducts1!: Ref<ManufacturedProducts>;

}
",
]
`;

exports[`4898 non_composite_ambiguous_fk_example scalarPropertiesForRelations=smart bidirectionalRelations=true identifiedReferences=true entitySchema=true: dump 1`] = `
[
  "import { Collection, EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Products } from './Products';
import { ShippableProducts } from './ShippableProducts';

export class DeliverableProducts {
  [PrimaryKeyProp]?: 'product';
  product!: Ref<Products>;
  startingAt!: Date;
  deliverableProductsInverse = new Collection<ShippableProducts>(this);
}

export const DeliverableProductsSchema = new EntitySchema({
  class: DeliverableProducts,
  properties: {
    product: {
      primary: true,
      kind: '1:1',
      entity: () => Products,
      ref: true,
      fieldName: 'product_id',
    },
    startingAt: { type: 'Date', length: 0 },
    deliverableProductsInverse: {
      kind: '1:m',
      entity: () => ShippableProducts,
      mappedBy: 'deliverableProducts',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { ShippableProducts } from './ShippableProducts';

export class Destinations {
  [PrimaryKeyProp]?: 'destinationId';
  destinationId!: number;
  name!: string;
  destinationInverse = new Collection<ShippableProducts>(this);
}

export const DestinationsSchema = new EntitySchema({
  class: Destinations,
  properties: {
    destinationId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255, unique: 'name_UNIQUE' },
    destinationInverse: { kind: '1:m', entity: () => ShippableProducts, mappedBy: 'destination' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Products } from './Products';
import { ShippableProducts } from './ShippableProducts';

export class ManufacturedProducts {
  [PrimaryKeyProp]?: 'product';
  product!: Ref<Products>;
  place!: string;
  fkShippableProductsManufacturedProductsInverse = new Collection<ShippableProducts>(this);
  fkShippableProductsManufacturedProducts1Inverse = new Collection<ShippableProducts>(this);
}

export const ManufacturedProductsSchema = new EntitySchema({
  class: ManufacturedProducts,
  properties: {
    product: {
      primary: true,
      kind: '1:1',
      entity: () => Products,
      ref: true,
      fieldName: 'product_id',
    },
    place: { type: 'string', length: 255 },
    fkShippableProductsManufacturedProductsInverse: {
      kind: '1:m',
      entity: () => ShippableProducts,
      mappedBy: 'fkShippableProductsManufacturedProducts',
    },
    fkShippableProductsManufacturedProducts1Inverse: {
      kind: '1:m',
      entity: () => ShippableProducts,
      mappedBy: 'fkShippableProductsManufacturedProducts1',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { ManufacturedProducts } from './ManufacturedProducts';

export class Products {
  [PrimaryKeyProp]?: 'productId';
  productId!: number;
  name!: string;
  productInverse?: Ref<ManufacturedProducts>;
}

export const ProductsSchema = new EntitySchema({
  class: Products,
  properties: {
    productId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255 },
    productInverse: {
      kind: '1:1',
      entity: () => ManufacturedProducts,
      ref: true,
      mappedBy: 'product',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { DeliverableProducts } from './DeliverableProducts';
import { Destinations } from './Destinations';
import { ManufacturedProducts } from './ManufacturedProducts';

export class ShippableProducts {
  [PrimaryKeyProp]?: ['deliverableProducts', 'fkShippableProductsManufacturedProducts', 'fkShippableProductsManufacturedProducts1'];
  destination!: Ref<Destinations>;
  deliverableProducts!: Ref<DeliverableProducts>;
  fkShippableProductsManufacturedProducts!: Ref<ManufacturedProducts>;
  fkShippableProductsManufacturedProducts1!: Ref<ManufacturedProducts>;
}

export const ShippableProductsSchema = new EntitySchema({
  class: ShippableProducts,
  properties: {
    destination: {
      kind: 'm:1',
      entity: () => Destinations,
      ref: true,
      fieldName: 'destination',
      index: 'fk_shippable_products_destinations1_idx',
    },
    deliverableProducts: {
      primary: true,
      kind: 'm:1',
      entity: () => DeliverableProducts,
      ref: true,
      fieldName: 'product_id',
    },
    fkShippableProductsManufacturedProducts: {
      primary: true,
      kind: 'm:1',
      entity: () => ManufacturedProducts,
      ref: true,
      fieldName: 'product_id',
    },
    fkShippableProductsManufacturedProducts1: {
      primary: true,
      kind: 'm:1',
      entity: () => ManufacturedProducts,
      ref: true,
      fieldName: 'product_id',
    },
  },
});
",
]
`;

exports[`4898 nullable_fk_example scalarPropertiesForRelations=always bidirectionalRelations=false identifiedReferences=false entitySchema=false: dump 1`] = `
[
  "import { Entity, ManyToOne, OptionalProps, PrimaryKey, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { RecepientEmails } from './RecepientEmails';
import { SenderEmails } from './SenderEmails';

@Entity()
export class EmailSendingLogs {

  [PrimaryKeyProp]?: 'logId';

  [OptionalProps]?: 'createdAt';

  @PrimaryKey()
  logId!: number;

  @Property({ persist: false })
  senderId!: number;

  @ManyToOne({ entity: () => RecepientEmails, fieldNames: ['recepient_id', 'recepient_email_id'], index: 'fk_email_sending_logs_recepient_emails1_idx' })
  recepient!: RecepientEmails;

  @Property({ persist: false })
  recepientId!: number;

  @ManyToOne({ entity: () => SenderEmails, fieldNames: ['sender_id', 'sender_email_id'], index: 'fk_email_sending_logs_sender_emails1_idx' })
  sender!: SenderEmails;

  @Property({ persist: false })
  senderEmailId!: number;

  @Property({ persist: false })
  recepientEmailId!: number;

  @ManyToOne({ entity: () => SenderEmails, fieldNames: ['sender_id', 'reply_email_id'], nullable: true, index: 'fk_email_sending_logs_sender_emails2_idx' })
  reply?: SenderEmails;

  @Property({ nullable: true, persist: false })
  replyEmailId?: number;

  @Property({ length: 0, defaultRaw: \`CURRENT_TIMESTAMP\` })
  createdAt!: Date;

}
",
  "import { Entity, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';

@Entity()
export class Emails {

  [PrimaryKeyProp]?: 'emailId';

  @PrimaryKey()
  emailId!: number;

  @Unique({ name: 'address_UNIQUE' })
  @Property({ length: 255 })
  address!: string;

}
",
  "import { Entity, Index, ManyToOne, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Emails } from './Emails';
import { Recepients } from './Recepients';

@Entity()
export class RecepientEmails {

  [PrimaryKeyProp]?: ['recepient', 'email'];

  @ManyToOne({ entity: () => Recepients, fieldName: 'recepient_id', primary: true })
  recepient!: Recepients;

  @Property({ persist: false })
  recepientId!: number;

  @ManyToOne({ entity: () => Emails, fieldName: 'email_id', primary: true, index: 'fk_recepient_emails_emails1_idx' })
  email!: Emails;

  @Index({ name: 'fk_recepient_emails_emails1_idx' })
  @Property({ persist: false })
  emailId!: number;

}
",
  "import { Collection, Entity, ManyToMany, PrimaryKey, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Emails } from './Emails';
import { RecepientEmails } from './RecepientEmails';

@Entity()
export class Recepients {

  [PrimaryKeyProp]?: 'recepientId';

  @PrimaryKey()
  recepientId!: number;

  @Property({ length: 255 })
  name!: string;

  @ManyToMany({ entity: () => Emails, pivotTable: 'recepient_emails', pivotEntity: () => RecepientEmails, joinColumn: 'recepient_id', inverseJoinColumn: 'email_id' })
  recepientEmails = new Collection<Emails>(this);

}
",
  "import { Entity, Index, ManyToOne, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Emails } from './Emails';
import { Senders } from './Senders';

@Entity()
export class SenderEmails {

  [PrimaryKeyProp]?: ['sender', 'email'];

  @ManyToOne({ entity: () => Senders, fieldName: 'sender_id', primary: true })
  sender!: Senders;

  @Property({ persist: false })
  senderId!: number;

  @ManyToOne({ entity: () => Emails, fieldName: 'email_id', primary: true, index: 'fk_sender_emails_emails1_idx' })
  email!: Emails;

  @Index({ name: 'fk_sender_emails_emails1_idx' })
  @Property({ persist: false })
  emailId!: number;

}
",
  "import { Collection, Entity, ManyToMany, PrimaryKey, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Emails } from './Emails';
import { SenderEmails } from './SenderEmails';

@Entity()
export class Senders {

  [PrimaryKeyProp]?: 'senderId';

  @PrimaryKey()
  senderId!: number;

  @Property({ length: 255 })
  name!: string;

  @ManyToMany({ entity: () => Emails, pivotTable: 'sender_emails', pivotEntity: () => SenderEmails, joinColumn: 'sender_id', inverseJoinColumn: 'email_id' })
  senderEmails = new Collection<Emails>(this);

}
",
]
`;

exports[`4898 nullable_fk_example scalarPropertiesForRelations=always bidirectionalRelations=false identifiedReferences=false entitySchema=true: dump 1`] = `
[
  "import { EntitySchema, OptionalProps, PrimaryKeyProp } from '@mikro-orm/core';

export class EmailSendingLogs {
  [PrimaryKeyProp]?: 'logId';
  [OptionalProps]?: 'createdAt';
  logId!: number;
  senderId!: number;
  recepient!: RecepientEmails;
  recepientId!: number;
  sender!: SenderEmails;
  senderEmailId!: number;
  recepientEmailId!: number;
  reply?: SenderEmails;
  replyEmailId?: number;
  createdAt!: Date;
}

export const EmailSendingLogsSchema = new EntitySchema({
  class: EmailSendingLogs,
  properties: {
    logId: { primary: true, type: 'number' },
    senderId: { type: 'number', persist: false },
    recepient: {
      kind: 'm:1',
      entity: () => RecepientEmails,
      fieldNames: [
        'recepient_id',
        'recepient_email_id'
      ],
      index: 'fk_email_sending_logs_recepient_emails1_idx',
    },
    recepientId: { type: 'number', persist: false },
    sender: {
      kind: 'm:1',
      entity: () => SenderEmails,
      fieldNames: [
        'sender_id',
        'sender_email_id'
      ],
      index: 'fk_email_sending_logs_sender_emails1_idx',
    },
    senderEmailId: { type: 'number', persist: false },
    recepientEmailId: { type: 'number', persist: false },
    reply: {
      kind: 'm:1',
      entity: () => SenderEmails,
      fieldNames: [
        'sender_id',
        'reply_email_id'
      ],
      nullable: true,
      index: 'fk_email_sending_logs_sender_emails2_idx',
    },
    replyEmailId: { type: 'number', nullable: true, persist: false },
    createdAt: { type: 'Date', length: 0, defaultRaw: \`CURRENT_TIMESTAMP\` },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Emails {
  [PrimaryKeyProp]?: 'emailId';
  emailId!: number;
  address!: string;
}

export const EmailsSchema = new EntitySchema({
  class: Emails,
  properties: {
    emailId: { primary: true, type: 'number' },
    address: { type: 'string', length: 255, unique: 'address_UNIQUE' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class RecepientEmails {
  [PrimaryKeyProp]?: ['recepient', 'email'];
  recepient!: Recepients;
  recepientId!: number;
  email!: Emails;
  emailId!: number;
}

export const RecepientEmailsSchema = new EntitySchema({
  class: RecepientEmails,
  properties: {
    recepient: {
      primary: true,
      kind: 'm:1',
      entity: () => Recepients,
      fieldName: 'recepient_id',
    },
    recepientId: { type: 'number', persist: false },
    email: {
      primary: true,
      kind: 'm:1',
      entity: () => Emails,
      fieldName: 'email_id',
      index: 'fk_recepient_emails_emails1_idx',
    },
    emailId: { type: 'number', persist: false, index: 'fk_recepient_emails_emails1_idx' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Emails } from './Emails';

export class Recepients {
  [PrimaryKeyProp]?: 'recepientId';
  recepientId!: number;
  name!: string;
  recepientEmails = new Collection<Emails>(this);
}

export const RecepientsSchema = new EntitySchema({
  class: Recepients,
  properties: {
    recepientId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255 },
    recepientEmails: {
      kind: 'm:n',
      entity: () => Emails,
      pivotTable: 'recepient_emails',
      pivotEntity: () => RecepientEmails,
      joinColumn: 'recepient_id',
      inverseJoinColumn: 'email_id',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class SenderEmails {
  [PrimaryKeyProp]?: ['sender', 'email'];
  sender!: Senders;
  senderId!: number;
  email!: Emails;
  emailId!: number;
}

export const SenderEmailsSchema = new EntitySchema({
  class: SenderEmails,
  properties: {
    sender: { primary: true, kind: 'm:1', entity: () => Senders, fieldName: 'sender_id' },
    senderId: { type: 'number', persist: false },
    email: {
      primary: true,
      kind: 'm:1',
      entity: () => Emails,
      fieldName: 'email_id',
      index: 'fk_sender_emails_emails1_idx',
    },
    emailId: { type: 'number', persist: false, index: 'fk_sender_emails_emails1_idx' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Emails } from './Emails';

export class Senders {
  [PrimaryKeyProp]?: 'senderId';
  senderId!: number;
  name!: string;
  senderEmails = new Collection<Emails>(this);
}

export const SendersSchema = new EntitySchema({
  class: Senders,
  properties: {
    senderId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255 },
    senderEmails: {
      kind: 'm:n',
      entity: () => Emails,
      pivotTable: 'sender_emails',
      pivotEntity: () => SenderEmails,
      joinColumn: 'sender_id',
      inverseJoinColumn: 'email_id',
    },
  },
});
",
]
`;

exports[`4898 nullable_fk_example scalarPropertiesForRelations=always bidirectionalRelations=false identifiedReferences=true entitySchema=false: dump 1`] = `
[
  "import { Entity, ManyToOne, OptionalProps, PrimaryKey, PrimaryKeyProp, Property, Ref } from '@mikro-orm/core';
import { RecepientEmails } from './RecepientEmails';
import { SenderEmails } from './SenderEmails';

@Entity()
export class EmailSendingLogs {

  [PrimaryKeyProp]?: 'logId';

  [OptionalProps]?: 'createdAt';

  @PrimaryKey()
  logId!: number;

  @Property({ persist: false })
  senderId!: number;

  @ManyToOne({ entity: () => RecepientEmails, ref: true, fieldNames: ['recepient_id', 'recepient_email_id'], index: 'fk_email_sending_logs_recepient_emails1_idx' })
  recepient!: Ref<RecepientEmails>;

  @Property({ persist: false })
  recepientId!: number;

  @ManyToOne({ entity: () => SenderEmails, ref: true, fieldNames: ['sender_id', 'sender_email_id'], index: 'fk_email_sending_logs_sender_emails1_idx' })
  sender!: Ref<SenderEmails>;

  @Property({ persist: false })
  senderEmailId!: number;

  @Property({ persist: false })
  recepientEmailId!: number;

  @ManyToOne({ entity: () => SenderEmails, ref: true, fieldNames: ['sender_id', 'reply_email_id'], nullable: true, index: 'fk_email_sending_logs_sender_emails2_idx' })
  reply?: Ref<SenderEmails>;

  @Property({ nullable: true, persist: false })
  replyEmailId?: number;

  @Property({ length: 0, defaultRaw: \`CURRENT_TIMESTAMP\` })
  createdAt!: Date;

}
",
  "import { Entity, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';

@Entity()
export class Emails {

  [PrimaryKeyProp]?: 'emailId';

  @PrimaryKey()
  emailId!: number;

  @Unique({ name: 'address_UNIQUE' })
  @Property({ length: 255 })
  address!: string;

}
",
  "import { Entity, Index, ManyToOne, PrimaryKeyProp, Property, Ref } from '@mikro-orm/core';
import { Emails } from './Emails';
import { Recepients } from './Recepients';

@Entity()
export class RecepientEmails {

  [PrimaryKeyProp]?: ['recepient', 'email'];

  @ManyToOne({ entity: () => Recepients, ref: true, fieldName: 'recepient_id', primary: true })
  recepient!: Ref<Recepients>;

  @Property({ persist: false })
  recepientId!: number;

  @ManyToOne({ entity: () => Emails, ref: true, fieldName: 'email_id', primary: true, index: 'fk_recepient_emails_emails1_idx' })
  email!: Ref<Emails>;

  @Index({ name: 'fk_recepient_emails_emails1_idx' })
  @Property({ persist: false })
  emailId!: number;

}
",
  "import { Collection, Entity, ManyToMany, PrimaryKey, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Emails } from './Emails';
import { RecepientEmails } from './RecepientEmails';

@Entity()
export class Recepients {

  [PrimaryKeyProp]?: 'recepientId';

  @PrimaryKey()
  recepientId!: number;

  @Property({ length: 255 })
  name!: string;

  @ManyToMany({ entity: () => Emails, pivotTable: 'recepient_emails', pivotEntity: () => RecepientEmails, joinColumn: 'recepient_id', inverseJoinColumn: 'email_id' })
  recepientEmails = new Collection<Emails>(this);

}
",
  "import { Entity, Index, ManyToOne, PrimaryKeyProp, Property, Ref } from '@mikro-orm/core';
import { Emails } from './Emails';
import { Senders } from './Senders';

@Entity()
export class SenderEmails {

  [PrimaryKeyProp]?: ['sender', 'email'];

  @ManyToOne({ entity: () => Senders, ref: true, fieldName: 'sender_id', primary: true })
  sender!: Ref<Senders>;

  @Property({ persist: false })
  senderId!: number;

  @ManyToOne({ entity: () => Emails, ref: true, fieldName: 'email_id', primary: true, index: 'fk_sender_emails_emails1_idx' })
  email!: Ref<Emails>;

  @Index({ name: 'fk_sender_emails_emails1_idx' })
  @Property({ persist: false })
  emailId!: number;

}
",
  "import { Collection, Entity, ManyToMany, PrimaryKey, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Emails } from './Emails';
import { SenderEmails } from './SenderEmails';

@Entity()
export class Senders {

  [PrimaryKeyProp]?: 'senderId';

  @PrimaryKey()
  senderId!: number;

  @Property({ length: 255 })
  name!: string;

  @ManyToMany({ entity: () => Emails, pivotTable: 'sender_emails', pivotEntity: () => SenderEmails, joinColumn: 'sender_id', inverseJoinColumn: 'email_id' })
  senderEmails = new Collection<Emails>(this);

}
",
]
`;

exports[`4898 nullable_fk_example scalarPropertiesForRelations=always bidirectionalRelations=false identifiedReferences=true entitySchema=true: dump 1`] = `
[
  "import { EntitySchema, OptionalProps, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { RecepientEmails } from './RecepientEmails';
import { SenderEmails } from './SenderEmails';

export class EmailSendingLogs {
  [PrimaryKeyProp]?: 'logId';
  [OptionalProps]?: 'createdAt';
  logId!: number;
  senderId!: number;
  recepient!: Ref<RecepientEmails>;
  recepientId!: number;
  sender!: Ref<SenderEmails>;
  senderEmailId!: number;
  recepientEmailId!: number;
  reply?: Ref<SenderEmails>;
  replyEmailId?: number;
  createdAt!: Date;
}

export const EmailSendingLogsSchema = new EntitySchema({
  class: EmailSendingLogs,
  properties: {
    logId: { primary: true, type: 'number' },
    senderId: { type: 'number', persist: false },
    recepient: {
      kind: 'm:1',
      entity: () => RecepientEmails,
      ref: true,
      fieldNames: [
        'recepient_id',
        'recepient_email_id'
      ],
      index: 'fk_email_sending_logs_recepient_emails1_idx',
    },
    recepientId: { type: 'number', persist: false },
    sender: {
      kind: 'm:1',
      entity: () => SenderEmails,
      ref: true,
      fieldNames: [
        'sender_id',
        'sender_email_id'
      ],
      index: 'fk_email_sending_logs_sender_emails1_idx',
    },
    senderEmailId: { type: 'number', persist: false },
    recepientEmailId: { type: 'number', persist: false },
    reply: {
      kind: 'm:1',
      entity: () => SenderEmails,
      ref: true,
      fieldNames: [
        'sender_id',
        'reply_email_id'
      ],
      nullable: true,
      index: 'fk_email_sending_logs_sender_emails2_idx',
    },
    replyEmailId: { type: 'number', nullable: true, persist: false },
    createdAt: { type: 'Date', length: 0, defaultRaw: \`CURRENT_TIMESTAMP\` },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Emails {
  [PrimaryKeyProp]?: 'emailId';
  emailId!: number;
  address!: string;
}

export const EmailsSchema = new EntitySchema({
  class: Emails,
  properties: {
    emailId: { primary: true, type: 'number' },
    address: { type: 'string', length: 255, unique: 'address_UNIQUE' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Emails } from './Emails';
import { Recepients } from './Recepients';

export class RecepientEmails {
  [PrimaryKeyProp]?: ['recepient', 'email'];
  recepient!: Ref<Recepients>;
  recepientId!: number;
  email!: Ref<Emails>;
  emailId!: number;
}

export const RecepientEmailsSchema = new EntitySchema({
  class: RecepientEmails,
  properties: {
    recepient: {
      primary: true,
      kind: 'm:1',
      entity: () => Recepients,
      ref: true,
      fieldName: 'recepient_id',
    },
    recepientId: { type: 'number', persist: false },
    email: {
      primary: true,
      kind: 'm:1',
      entity: () => Emails,
      ref: true,
      fieldName: 'email_id',
      index: 'fk_recepient_emails_emails1_idx',
    },
    emailId: { type: 'number', persist: false, index: 'fk_recepient_emails_emails1_idx' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Emails } from './Emails';

export class Recepients {
  [PrimaryKeyProp]?: 'recepientId';
  recepientId!: number;
  name!: string;
  recepientEmails = new Collection<Emails>(this);
}

export const RecepientsSchema = new EntitySchema({
  class: Recepients,
  properties: {
    recepientId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255 },
    recepientEmails: {
      kind: 'm:n',
      entity: () => Emails,
      pivotTable: 'recepient_emails',
      pivotEntity: () => RecepientEmails,
      joinColumn: 'recepient_id',
      inverseJoinColumn: 'email_id',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Emails } from './Emails';
import { Senders } from './Senders';

export class SenderEmails {
  [PrimaryKeyProp]?: ['sender', 'email'];
  sender!: Ref<Senders>;
  senderId!: number;
  email!: Ref<Emails>;
  emailId!: number;
}

export const SenderEmailsSchema = new EntitySchema({
  class: SenderEmails,
  properties: {
    sender: {
      primary: true,
      kind: 'm:1',
      entity: () => Senders,
      ref: true,
      fieldName: 'sender_id',
    },
    senderId: { type: 'number', persist: false },
    email: {
      primary: true,
      kind: 'm:1',
      entity: () => Emails,
      ref: true,
      fieldName: 'email_id',
      index: 'fk_sender_emails_emails1_idx',
    },
    emailId: { type: 'number', persist: false, index: 'fk_sender_emails_emails1_idx' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Emails } from './Emails';

export class Senders {
  [PrimaryKeyProp]?: 'senderId';
  senderId!: number;
  name!: string;
  senderEmails = new Collection<Emails>(this);
}

export const SendersSchema = new EntitySchema({
  class: Senders,
  properties: {
    senderId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255 },
    senderEmails: {
      kind: 'm:n',
      entity: () => Emails,
      pivotTable: 'sender_emails',
      pivotEntity: () => SenderEmails,
      joinColumn: 'sender_id',
      inverseJoinColumn: 'email_id',
    },
  },
});
",
]
`;

exports[`4898 nullable_fk_example scalarPropertiesForRelations=always bidirectionalRelations=true identifiedReferences=false entitySchema=false: dump 1`] = `
[
  "import { Entity, ManyToOne, OptionalProps, PrimaryKey, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { RecepientEmails } from './RecepientEmails';
import { SenderEmails } from './SenderEmails';

@Entity()
export class EmailSendingLogs {

  [PrimaryKeyProp]?: 'logId';

  [OptionalProps]?: 'createdAt';

  @PrimaryKey()
  logId!: number;

  @Property({ persist: false })
  senderId!: number;

  @ManyToOne({ entity: () => RecepientEmails, fieldNames: ['recepient_id', 'recepient_email_id'], index: 'fk_email_sending_logs_recepient_emails1_idx' })
  recepient!: RecepientEmails;

  @Property({ persist: false })
  recepientId!: number;

  @ManyToOne({ entity: () => SenderEmails, fieldNames: ['sender_id', 'sender_email_id'], index: 'fk_email_sending_logs_sender_emails1_idx' })
  sender!: SenderEmails;

  @Property({ persist: false })
  senderEmailId!: number;

  @Property({ persist: false })
  recepientEmailId!: number;

  @ManyToOne({ entity: () => SenderEmails, fieldNames: ['sender_id', 'reply_email_id'], nullable: true, index: 'fk_email_sending_logs_sender_emails2_idx' })
  reply?: SenderEmails;

  @Property({ nullable: true, persist: false })
  replyEmailId?: number;

  @Property({ length: 0, defaultRaw: \`CURRENT_TIMESTAMP\` })
  createdAt!: Date;

}
",
  "import { Collection, Entity, ManyToMany, OneToMany, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { Recepients } from './Recepients';
import { SenderEmails } from './SenderEmails';
import { Senders } from './Senders';

@Entity()
export class Emails {

  [PrimaryKeyProp]?: 'emailId';

  @PrimaryKey()
  emailId!: number;

  @Unique({ name: 'address_UNIQUE' })
  @Property({ length: 255 })
  address!: string;

  @OneToMany({ entity: () => SenderEmails, mappedBy: 'email' })
  emailInverse = new Collection<SenderEmails>(this);

  @ManyToMany({ entity: () => Recepients, mappedBy: 'recepientEmails' })
  recepientEmailsInverse = new Collection<Recepients>(this);

  @ManyToMany({ entity: () => Senders, mappedBy: 'senderEmails' })
  senderEmailsInverse = new Collection<Senders>(this);

}
",
  "import { Collection, Entity, Index, ManyToOne, OneToMany, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { EmailSendingLogs } from './EmailSendingLogs';
import { Emails } from './Emails';
import { Recepients } from './Recepients';

@Entity()
export class RecepientEmails {

  [PrimaryKeyProp]?: ['recepient', 'email'];

  @ManyToOne({ entity: () => Recepients, fieldName: 'recepient_id', primary: true })
  recepient!: Recepients;

  @Property({ persist: false })
  recepientId!: number;

  @ManyToOne({ entity: () => Emails, fieldName: 'email_id', primary: true, index: 'fk_recepient_emails_emails1_idx' })
  email!: Emails;

  @Index({ name: 'fk_recepient_emails_emails1_idx' })
  @Property({ persist: false })
  emailId!: number;

  @OneToMany({ entity: () => EmailSendingLogs, mappedBy: 'recepient' })
  recepientInverse = new Collection<EmailSendingLogs>(this);

}
",
  "import { Collection, Entity, ManyToMany, OneToMany, PrimaryKey, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Emails } from './Emails';
import { RecepientEmails } from './RecepientEmails';

@Entity()
export class Recepients {

  [PrimaryKeyProp]?: 'recepientId';

  @PrimaryKey()
  recepientId!: number;

  @Property({ length: 255 })
  name!: string;

  @ManyToMany({ entity: () => Emails, pivotTable: 'recepient_emails', pivotEntity: () => RecepientEmails, joinColumn: 'recepient_id', inverseJoinColumn: 'email_id' })
  recepientEmails = new Collection<Emails>(this);

  @OneToMany({ entity: () => RecepientEmails, mappedBy: 'recepient' })
  recepientInverse = new Collection<RecepientEmails>(this);

}
",
  "import { Collection, Entity, Index, ManyToOne, OneToMany, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { EmailSendingLogs } from './EmailSendingLogs';
import { Emails } from './Emails';
import { Senders } from './Senders';

@Entity()
export class SenderEmails {

  [PrimaryKeyProp]?: ['sender', 'email'];

  @ManyToOne({ entity: () => Senders, fieldName: 'sender_id', primary: true })
  sender!: Senders;

  @Property({ persist: false })
  senderId!: number;

  @ManyToOne({ entity: () => Emails, fieldName: 'email_id', primary: true, index: 'fk_sender_emails_emails1_idx' })
  email!: Emails;

  @Index({ name: 'fk_sender_emails_emails1_idx' })
  @Property({ persist: false })
  emailId!: number;

  @OneToMany({ entity: () => EmailSendingLogs, mappedBy: 'sender' })
  senderInverse = new Collection<EmailSendingLogs>(this);

  @OneToMany({ entity: () => EmailSendingLogs, mappedBy: 'reply' })
  replyInverse = new Collection<EmailSendingLogs>(this);

}
",
  "import { Collection, Entity, ManyToMany, OneToMany, PrimaryKey, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Emails } from './Emails';
import { SenderEmails } from './SenderEmails';

@Entity()
export class Senders {

  [PrimaryKeyProp]?: 'senderId';

  @PrimaryKey()
  senderId!: number;

  @Property({ length: 255 })
  name!: string;

  @ManyToMany({ entity: () => Emails, pivotTable: 'sender_emails', pivotEntity: () => SenderEmails, joinColumn: 'sender_id', inverseJoinColumn: 'email_id' })
  senderEmails = new Collection<Emails>(this);

  @OneToMany({ entity: () => SenderEmails, mappedBy: 'sender' })
  senderInverse = new Collection<SenderEmails>(this);

}
",
]
`;

exports[`4898 nullable_fk_example scalarPropertiesForRelations=always bidirectionalRelations=true identifiedReferences=false entitySchema=true: dump 1`] = `
[
  "import { EntitySchema, OptionalProps, PrimaryKeyProp } from '@mikro-orm/core';

export class EmailSendingLogs {
  [PrimaryKeyProp]?: 'logId';
  [OptionalProps]?: 'createdAt';
  logId!: number;
  senderId!: number;
  recepient!: RecepientEmails;
  recepientId!: number;
  sender!: SenderEmails;
  senderEmailId!: number;
  recepientEmailId!: number;
  reply?: SenderEmails;
  replyEmailId?: number;
  createdAt!: Date;
}

export const EmailSendingLogsSchema = new EntitySchema({
  class: EmailSendingLogs,
  properties: {
    logId: { primary: true, type: 'number' },
    senderId: { type: 'number', persist: false },
    recepient: {
      kind: 'm:1',
      entity: () => RecepientEmails,
      fieldNames: [
        'recepient_id',
        'recepient_email_id'
      ],
      index: 'fk_email_sending_logs_recepient_emails1_idx',
    },
    recepientId: { type: 'number', persist: false },
    sender: {
      kind: 'm:1',
      entity: () => SenderEmails,
      fieldNames: [
        'sender_id',
        'sender_email_id'
      ],
      index: 'fk_email_sending_logs_sender_emails1_idx',
    },
    senderEmailId: { type: 'number', persist: false },
    recepientEmailId: { type: 'number', persist: false },
    reply: {
      kind: 'm:1',
      entity: () => SenderEmails,
      fieldNames: [
        'sender_id',
        'reply_email_id'
      ],
      nullable: true,
      index: 'fk_email_sending_logs_sender_emails2_idx',
    },
    replyEmailId: { type: 'number', nullable: true, persist: false },
    createdAt: { type: 'Date', length: 0, defaultRaw: \`CURRENT_TIMESTAMP\` },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Recepients } from './Recepients';
import { SenderEmails } from './SenderEmails';
import { Senders } from './Senders';

export class Emails {
  [PrimaryKeyProp]?: 'emailId';
  emailId!: number;
  address!: string;
  emailInverse = new Collection<SenderEmails>(this);
  recepientEmailsInverse = new Collection<Recepients>(this);
  senderEmailsInverse = new Collection<Senders>(this);
}

export const EmailsSchema = new EntitySchema({
  class: Emails,
  properties: {
    emailId: { primary: true, type: 'number' },
    address: { type: 'string', length: 255, unique: 'address_UNIQUE' },
    emailInverse: { kind: '1:m', entity: () => SenderEmails, mappedBy: 'email' },
    recepientEmailsInverse: { kind: 'm:n', entity: () => Recepients, mappedBy: 'recepientEmails' },
    senderEmailsInverse: { kind: 'm:n', entity: () => Senders, mappedBy: 'senderEmails' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { EmailSendingLogs } from './EmailSendingLogs';

export class RecepientEmails {
  [PrimaryKeyProp]?: ['recepient', 'email'];
  recepient!: Recepients;
  recepientId!: number;
  email!: Emails;
  emailId!: number;
  recepientInverse = new Collection<EmailSendingLogs>(this);
}

export const RecepientEmailsSchema = new EntitySchema({
  class: RecepientEmails,
  properties: {
    recepient: {
      primary: true,
      kind: 'm:1',
      entity: () => Recepients,
      fieldName: 'recepient_id',
    },
    recepientId: { type: 'number', persist: false },
    email: {
      primary: true,
      kind: 'm:1',
      entity: () => Emails,
      fieldName: 'email_id',
      index: 'fk_recepient_emails_emails1_idx',
    },
    emailId: { type: 'number', persist: false, index: 'fk_recepient_emails_emails1_idx' },
    recepientInverse: { kind: '1:m', entity: () => EmailSendingLogs, mappedBy: 'recepient' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Emails } from './Emails';
import { RecepientEmails } from './RecepientEmails';

export class Recepients {
  [PrimaryKeyProp]?: 'recepientId';
  recepientId!: number;
  name!: string;
  recepientEmails = new Collection<Emails>(this);
  recepientInverse = new Collection<RecepientEmails>(this);
}

export const RecepientsSchema = new EntitySchema({
  class: Recepients,
  properties: {
    recepientId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255 },
    recepientEmails: {
      kind: 'm:n',
      entity: () => Emails,
      pivotTable: 'recepient_emails',
      pivotEntity: () => RecepientEmails,
      joinColumn: 'recepient_id',
      inverseJoinColumn: 'email_id',
    },
    recepientInverse: { kind: '1:m', entity: () => RecepientEmails, mappedBy: 'recepient' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { EmailSendingLogs } from './EmailSendingLogs';

export class SenderEmails {
  [PrimaryKeyProp]?: ['sender', 'email'];
  sender!: Senders;
  senderId!: number;
  email!: Emails;
  emailId!: number;
  senderInverse = new Collection<EmailSendingLogs>(this);
  replyInverse = new Collection<EmailSendingLogs>(this);
}

export const SenderEmailsSchema = new EntitySchema({
  class: SenderEmails,
  properties: {
    sender: { primary: true, kind: 'm:1', entity: () => Senders, fieldName: 'sender_id' },
    senderId: { type: 'number', persist: false },
    email: {
      primary: true,
      kind: 'm:1',
      entity: () => Emails,
      fieldName: 'email_id',
      index: 'fk_sender_emails_emails1_idx',
    },
    emailId: { type: 'number', persist: false, index: 'fk_sender_emails_emails1_idx' },
    senderInverse: { kind: '1:m', entity: () => EmailSendingLogs, mappedBy: 'sender' },
    replyInverse: { kind: '1:m', entity: () => EmailSendingLogs, mappedBy: 'reply' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Emails } from './Emails';
import { SenderEmails } from './SenderEmails';

export class Senders {
  [PrimaryKeyProp]?: 'senderId';
  senderId!: number;
  name!: string;
  senderEmails = new Collection<Emails>(this);
  senderInverse = new Collection<SenderEmails>(this);
}

export const SendersSchema = new EntitySchema({
  class: Senders,
  properties: {
    senderId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255 },
    senderEmails: {
      kind: 'm:n',
      entity: () => Emails,
      pivotTable: 'sender_emails',
      pivotEntity: () => SenderEmails,
      joinColumn: 'sender_id',
      inverseJoinColumn: 'email_id',
    },
    senderInverse: { kind: '1:m', entity: () => SenderEmails, mappedBy: 'sender' },
  },
});
",
]
`;

exports[`4898 nullable_fk_example scalarPropertiesForRelations=always bidirectionalRelations=true identifiedReferences=true entitySchema=false: dump 1`] = `
[
  "import { Entity, ManyToOne, OptionalProps, PrimaryKey, PrimaryKeyProp, Property, Ref } from '@mikro-orm/core';
import { RecepientEmails } from './RecepientEmails';
import { SenderEmails } from './SenderEmails';

@Entity()
export class EmailSendingLogs {

  [PrimaryKeyProp]?: 'logId';

  [OptionalProps]?: 'createdAt';

  @PrimaryKey()
  logId!: number;

  @Property({ persist: false })
  senderId!: number;

  @ManyToOne({ entity: () => RecepientEmails, ref: true, fieldNames: ['recepient_id', 'recepient_email_id'], index: 'fk_email_sending_logs_recepient_emails1_idx' })
  recepient!: Ref<RecepientEmails>;

  @Property({ persist: false })
  recepientId!: number;

  @ManyToOne({ entity: () => SenderEmails, ref: true, fieldNames: ['sender_id', 'sender_email_id'], index: 'fk_email_sending_logs_sender_emails1_idx' })
  sender!: Ref<SenderEmails>;

  @Property({ persist: false })
  senderEmailId!: number;

  @Property({ persist: false })
  recepientEmailId!: number;

  @ManyToOne({ entity: () => SenderEmails, ref: true, fieldNames: ['sender_id', 'reply_email_id'], nullable: true, index: 'fk_email_sending_logs_sender_emails2_idx' })
  reply?: Ref<SenderEmails>;

  @Property({ nullable: true, persist: false })
  replyEmailId?: number;

  @Property({ length: 0, defaultRaw: \`CURRENT_TIMESTAMP\` })
  createdAt!: Date;

}
",
  "import { Collection, Entity, ManyToMany, OneToMany, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { Recepients } from './Recepients';
import { SenderEmails } from './SenderEmails';
import { Senders } from './Senders';

@Entity()
export class Emails {

  [PrimaryKeyProp]?: 'emailId';

  @PrimaryKey()
  emailId!: number;

  @Unique({ name: 'address_UNIQUE' })
  @Property({ length: 255 })
  address!: string;

  @OneToMany({ entity: () => SenderEmails, mappedBy: 'email' })
  emailInverse = new Collection<SenderEmails>(this);

  @ManyToMany({ entity: () => Recepients, mappedBy: 'recepientEmails' })
  recepientEmailsInverse = new Collection<Recepients>(this);

  @ManyToMany({ entity: () => Senders, mappedBy: 'senderEmails' })
  senderEmailsInverse = new Collection<Senders>(this);

}
",
  "import { Collection, Entity, Index, ManyToOne, OneToMany, PrimaryKeyProp, Property, Ref } from '@mikro-orm/core';
import { EmailSendingLogs } from './EmailSendingLogs';
import { Emails } from './Emails';
import { Recepients } from './Recepients';

@Entity()
export class RecepientEmails {

  [PrimaryKeyProp]?: ['recepient', 'email'];

  @ManyToOne({ entity: () => Recepients, ref: true, fieldName: 'recepient_id', primary: true })
  recepient!: Ref<Recepients>;

  @Property({ persist: false })
  recepientId!: number;

  @ManyToOne({ entity: () => Emails, ref: true, fieldName: 'email_id', primary: true, index: 'fk_recepient_emails_emails1_idx' })
  email!: Ref<Emails>;

  @Index({ name: 'fk_recepient_emails_emails1_idx' })
  @Property({ persist: false })
  emailId!: number;

  @OneToMany({ entity: () => EmailSendingLogs, mappedBy: 'recepient' })
  recepientInverse = new Collection<EmailSendingLogs>(this);

}
",
  "import { Collection, Entity, ManyToMany, OneToMany, PrimaryKey, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Emails } from './Emails';
import { RecepientEmails } from './RecepientEmails';

@Entity()
export class Recepients {

  [PrimaryKeyProp]?: 'recepientId';

  @PrimaryKey()
  recepientId!: number;

  @Property({ length: 255 })
  name!: string;

  @ManyToMany({ entity: () => Emails, pivotTable: 'recepient_emails', pivotEntity: () => RecepientEmails, joinColumn: 'recepient_id', inverseJoinColumn: 'email_id' })
  recepientEmails = new Collection<Emails>(this);

  @OneToMany({ entity: () => RecepientEmails, mappedBy: 'recepient' })
  recepientInverse = new Collection<RecepientEmails>(this);

}
",
  "import { Collection, Entity, Index, ManyToOne, OneToMany, PrimaryKeyProp, Property, Ref } from '@mikro-orm/core';
import { EmailSendingLogs } from './EmailSendingLogs';
import { Emails } from './Emails';
import { Senders } from './Senders';

@Entity()
export class SenderEmails {

  [PrimaryKeyProp]?: ['sender', 'email'];

  @ManyToOne({ entity: () => Senders, ref: true, fieldName: 'sender_id', primary: true })
  sender!: Ref<Senders>;

  @Property({ persist: false })
  senderId!: number;

  @ManyToOne({ entity: () => Emails, ref: true, fieldName: 'email_id', primary: true, index: 'fk_sender_emails_emails1_idx' })
  email!: Ref<Emails>;

  @Index({ name: 'fk_sender_emails_emails1_idx' })
  @Property({ persist: false })
  emailId!: number;

  @OneToMany({ entity: () => EmailSendingLogs, mappedBy: 'sender' })
  senderInverse = new Collection<EmailSendingLogs>(this);

  @OneToMany({ entity: () => EmailSendingLogs, mappedBy: 'reply' })
  replyInverse = new Collection<EmailSendingLogs>(this);

}
",
  "import { Collection, Entity, ManyToMany, OneToMany, PrimaryKey, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Emails } from './Emails';
import { SenderEmails } from './SenderEmails';

@Entity()
export class Senders {

  [PrimaryKeyProp]?: 'senderId';

  @PrimaryKey()
  senderId!: number;

  @Property({ length: 255 })
  name!: string;

  @ManyToMany({ entity: () => Emails, pivotTable: 'sender_emails', pivotEntity: () => SenderEmails, joinColumn: 'sender_id', inverseJoinColumn: 'email_id' })
  senderEmails = new Collection<Emails>(this);

  @OneToMany({ entity: () => SenderEmails, mappedBy: 'sender' })
  senderInverse = new Collection<SenderEmails>(this);

}
",
]
`;

exports[`4898 nullable_fk_example scalarPropertiesForRelations=always bidirectionalRelations=true identifiedReferences=true entitySchema=true: dump 1`] = `
[
  "import { EntitySchema, OptionalProps, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { RecepientEmails } from './RecepientEmails';
import { SenderEmails } from './SenderEmails';

export class EmailSendingLogs {
  [PrimaryKeyProp]?: 'logId';
  [OptionalProps]?: 'createdAt';
  logId!: number;
  senderId!: number;
  recepient!: Ref<RecepientEmails>;
  recepientId!: number;
  sender!: Ref<SenderEmails>;
  senderEmailId!: number;
  recepientEmailId!: number;
  reply?: Ref<SenderEmails>;
  replyEmailId?: number;
  createdAt!: Date;
}

export const EmailSendingLogsSchema = new EntitySchema({
  class: EmailSendingLogs,
  properties: {
    logId: { primary: true, type: 'number' },
    senderId: { type: 'number', persist: false },
    recepient: {
      kind: 'm:1',
      entity: () => RecepientEmails,
      ref: true,
      fieldNames: [
        'recepient_id',
        'recepient_email_id'
      ],
      index: 'fk_email_sending_logs_recepient_emails1_idx',
    },
    recepientId: { type: 'number', persist: false },
    sender: {
      kind: 'm:1',
      entity: () => SenderEmails,
      ref: true,
      fieldNames: [
        'sender_id',
        'sender_email_id'
      ],
      index: 'fk_email_sending_logs_sender_emails1_idx',
    },
    senderEmailId: { type: 'number', persist: false },
    recepientEmailId: { type: 'number', persist: false },
    reply: {
      kind: 'm:1',
      entity: () => SenderEmails,
      ref: true,
      fieldNames: [
        'sender_id',
        'reply_email_id'
      ],
      nullable: true,
      index: 'fk_email_sending_logs_sender_emails2_idx',
    },
    replyEmailId: { type: 'number', nullable: true, persist: false },
    createdAt: { type: 'Date', length: 0, defaultRaw: \`CURRENT_TIMESTAMP\` },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Recepients } from './Recepients';
import { SenderEmails } from './SenderEmails';
import { Senders } from './Senders';

export class Emails {
  [PrimaryKeyProp]?: 'emailId';
  emailId!: number;
  address!: string;
  emailInverse = new Collection<SenderEmails>(this);
  recepientEmailsInverse = new Collection<Recepients>(this);
  senderEmailsInverse = new Collection<Senders>(this);
}

export const EmailsSchema = new EntitySchema({
  class: Emails,
  properties: {
    emailId: { primary: true, type: 'number' },
    address: { type: 'string', length: 255, unique: 'address_UNIQUE' },
    emailInverse: { kind: '1:m', entity: () => SenderEmails, mappedBy: 'email' },
    recepientEmailsInverse: { kind: 'm:n', entity: () => Recepients, mappedBy: 'recepientEmails' },
    senderEmailsInverse: { kind: 'm:n', entity: () => Senders, mappedBy: 'senderEmails' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { EmailSendingLogs } from './EmailSendingLogs';
import { Emails } from './Emails';
import { Recepients } from './Recepients';

export class RecepientEmails {
  [PrimaryKeyProp]?: ['recepient', 'email'];
  recepient!: Ref<Recepients>;
  recepientId!: number;
  email!: Ref<Emails>;
  emailId!: number;
  recepientInverse = new Collection<EmailSendingLogs>(this);
}

export const RecepientEmailsSchema = new EntitySchema({
  class: RecepientEmails,
  properties: {
    recepient: {
      primary: true,
      kind: 'm:1',
      entity: () => Recepients,
      ref: true,
      fieldName: 'recepient_id',
    },
    recepientId: { type: 'number', persist: false },
    email: {
      primary: true,
      kind: 'm:1',
      entity: () => Emails,
      ref: true,
      fieldName: 'email_id',
      index: 'fk_recepient_emails_emails1_idx',
    },
    emailId: { type: 'number', persist: false, index: 'fk_recepient_emails_emails1_idx' },
    recepientInverse: { kind: '1:m', entity: () => EmailSendingLogs, mappedBy: 'recepient' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Emails } from './Emails';
import { RecepientEmails } from './RecepientEmails';

export class Recepients {
  [PrimaryKeyProp]?: 'recepientId';
  recepientId!: number;
  name!: string;
  recepientEmails = new Collection<Emails>(this);
  recepientInverse = new Collection<RecepientEmails>(this);
}

export const RecepientsSchema = new EntitySchema({
  class: Recepients,
  properties: {
    recepientId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255 },
    recepientEmails: {
      kind: 'm:n',
      entity: () => Emails,
      pivotTable: 'recepient_emails',
      pivotEntity: () => RecepientEmails,
      joinColumn: 'recepient_id',
      inverseJoinColumn: 'email_id',
    },
    recepientInverse: { kind: '1:m', entity: () => RecepientEmails, mappedBy: 'recepient' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { EmailSendingLogs } from './EmailSendingLogs';
import { Emails } from './Emails';
import { Senders } from './Senders';

export class SenderEmails {
  [PrimaryKeyProp]?: ['sender', 'email'];
  sender!: Ref<Senders>;
  senderId!: number;
  email!: Ref<Emails>;
  emailId!: number;
  senderInverse = new Collection<EmailSendingLogs>(this);
  replyInverse = new Collection<EmailSendingLogs>(this);
}

export const SenderEmailsSchema = new EntitySchema({
  class: SenderEmails,
  properties: {
    sender: {
      primary: true,
      kind: 'm:1',
      entity: () => Senders,
      ref: true,
      fieldName: 'sender_id',
    },
    senderId: { type: 'number', persist: false },
    email: {
      primary: true,
      kind: 'm:1',
      entity: () => Emails,
      ref: true,
      fieldName: 'email_id',
      index: 'fk_sender_emails_emails1_idx',
    },
    emailId: { type: 'number', persist: false, index: 'fk_sender_emails_emails1_idx' },
    senderInverse: { kind: '1:m', entity: () => EmailSendingLogs, mappedBy: 'sender' },
    replyInverse: { kind: '1:m', entity: () => EmailSendingLogs, mappedBy: 'reply' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Emails } from './Emails';
import { SenderEmails } from './SenderEmails';

export class Senders {
  [PrimaryKeyProp]?: 'senderId';
  senderId!: number;
  name!: string;
  senderEmails = new Collection<Emails>(this);
  senderInverse = new Collection<SenderEmails>(this);
}

export const SendersSchema = new EntitySchema({
  class: Senders,
  properties: {
    senderId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255 },
    senderEmails: {
      kind: 'm:n',
      entity: () => Emails,
      pivotTable: 'sender_emails',
      pivotEntity: () => SenderEmails,
      joinColumn: 'sender_id',
      inverseJoinColumn: 'email_id',
    },
    senderInverse: { kind: '1:m', entity: () => SenderEmails, mappedBy: 'sender' },
  },
});
",
]
`;

exports[`4898 nullable_fk_example scalarPropertiesForRelations=never bidirectionalRelations=false identifiedReferences=false entitySchema=false: dump 1`] = `
[
  "import { Entity, ManyToOne, OptionalProps, PrimaryKey, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { RecepientEmails } from './RecepientEmails';
import { SenderEmails } from './SenderEmails';

@Entity()
export class EmailSendingLogs {

  [PrimaryKeyProp]?: 'logId';

  [OptionalProps]?: 'createdAt';

  @PrimaryKey()
  logId!: number;

  @ManyToOne({ entity: () => RecepientEmails, fieldNames: ['recepient_id', 'recepient_email_id'], index: 'fk_email_sending_logs_recepient_emails1_idx' })
  recepient!: RecepientEmails;

  @ManyToOne({ entity: () => SenderEmails, fieldNames: ['sender_id', 'sender_email_id'], index: 'fk_email_sending_logs_sender_emails1_idx' })
  sender!: SenderEmails;

  @ManyToOne({ entity: () => SenderEmails, fieldNames: ['sender_id', 'reply_email_id'], nullable: true, index: 'fk_email_sending_logs_sender_emails2_idx' })
  reply?: SenderEmails;

  @Property({ length: 0, defaultRaw: \`CURRENT_TIMESTAMP\` })
  createdAt!: Date;

}
",
  "import { Entity, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';

@Entity()
export class Emails {

  [PrimaryKeyProp]?: 'emailId';

  @PrimaryKey()
  emailId!: number;

  @Unique({ name: 'address_UNIQUE' })
  @Property({ length: 255 })
  address!: string;

}
",
  "import { Entity, ManyToOne, PrimaryKeyProp } from '@mikro-orm/core';
import { Emails } from './Emails';
import { Recepients } from './Recepients';

@Entity()
export class RecepientEmails {

  [PrimaryKeyProp]?: ['recepient', 'email'];

  @ManyToOne({ entity: () => Recepients, fieldName: 'recepient_id', primary: true })
  recepient!: Recepients;

  @ManyToOne({ entity: () => Emails, fieldName: 'email_id', primary: true, index: 'fk_recepient_emails_emails1_idx' })
  email!: Emails;

}
",
  "import { Collection, Entity, ManyToMany, PrimaryKey, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Emails } from './Emails';
import { RecepientEmails } from './RecepientEmails';

@Entity()
export class Recepients {

  [PrimaryKeyProp]?: 'recepientId';

  @PrimaryKey()
  recepientId!: number;

  @Property({ length: 255 })
  name!: string;

  @ManyToMany({ entity: () => Emails, pivotTable: 'recepient_emails', pivotEntity: () => RecepientEmails, joinColumn: 'recepient_id', inverseJoinColumn: 'email_id' })
  recepientEmails = new Collection<Emails>(this);

}
",
  "import { Entity, ManyToOne, PrimaryKeyProp } from '@mikro-orm/core';
import { Emails } from './Emails';
import { Senders } from './Senders';

@Entity()
export class SenderEmails {

  [PrimaryKeyProp]?: ['sender', 'email'];

  @ManyToOne({ entity: () => Senders, fieldName: 'sender_id', primary: true })
  sender!: Senders;

  @ManyToOne({ entity: () => Emails, fieldName: 'email_id', primary: true, index: 'fk_sender_emails_emails1_idx' })
  email!: Emails;

}
",
  "import { Collection, Entity, ManyToMany, PrimaryKey, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Emails } from './Emails';
import { SenderEmails } from './SenderEmails';

@Entity()
export class Senders {

  [PrimaryKeyProp]?: 'senderId';

  @PrimaryKey()
  senderId!: number;

  @Property({ length: 255 })
  name!: string;

  @ManyToMany({ entity: () => Emails, pivotTable: 'sender_emails', pivotEntity: () => SenderEmails, joinColumn: 'sender_id', inverseJoinColumn: 'email_id' })
  senderEmails = new Collection<Emails>(this);

}
",
]
`;

exports[`4898 nullable_fk_example scalarPropertiesForRelations=never bidirectionalRelations=false identifiedReferences=false entitySchema=true: dump 1`] = `
[
  "import { EntitySchema, OptionalProps, PrimaryKeyProp } from '@mikro-orm/core';

export class EmailSendingLogs {
  [PrimaryKeyProp]?: 'logId';
  [OptionalProps]?: 'createdAt';
  logId!: number;
  recepient!: RecepientEmails;
  sender!: SenderEmails;
  reply?: SenderEmails;
  createdAt!: Date;
}

export const EmailSendingLogsSchema = new EntitySchema({
  class: EmailSendingLogs,
  properties: {
    logId: { primary: true, type: 'number' },
    recepient: {
      kind: 'm:1',
      entity: () => RecepientEmails,
      fieldNames: [
        'recepient_id',
        'recepient_email_id'
      ],
      index: 'fk_email_sending_logs_recepient_emails1_idx',
    },
    sender: {
      kind: 'm:1',
      entity: () => SenderEmails,
      fieldNames: [
        'sender_id',
        'sender_email_id'
      ],
      index: 'fk_email_sending_logs_sender_emails1_idx',
    },
    reply: {
      kind: 'm:1',
      entity: () => SenderEmails,
      fieldNames: [
        'sender_id',
        'reply_email_id'
      ],
      nullable: true,
      index: 'fk_email_sending_logs_sender_emails2_idx',
    },
    createdAt: { type: 'Date', length: 0, defaultRaw: \`CURRENT_TIMESTAMP\` },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Emails {
  [PrimaryKeyProp]?: 'emailId';
  emailId!: number;
  address!: string;
}

export const EmailsSchema = new EntitySchema({
  class: Emails,
  properties: {
    emailId: { primary: true, type: 'number' },
    address: { type: 'string', length: 255, unique: 'address_UNIQUE' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class RecepientEmails {
  [PrimaryKeyProp]?: ['recepient', 'email'];
  recepient!: Recepients;
  email!: Emails;
}

export const RecepientEmailsSchema = new EntitySchema({
  class: RecepientEmails,
  properties: {
    recepient: {
      primary: true,
      kind: 'm:1',
      entity: () => Recepients,
      fieldName: 'recepient_id',
    },
    email: {
      primary: true,
      kind: 'm:1',
      entity: () => Emails,
      fieldName: 'email_id',
      index: 'fk_recepient_emails_emails1_idx',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Emails } from './Emails';

export class Recepients {
  [PrimaryKeyProp]?: 'recepientId';
  recepientId!: number;
  name!: string;
  recepientEmails = new Collection<Emails>(this);
}

export const RecepientsSchema = new EntitySchema({
  class: Recepients,
  properties: {
    recepientId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255 },
    recepientEmails: {
      kind: 'm:n',
      entity: () => Emails,
      pivotTable: 'recepient_emails',
      pivotEntity: () => RecepientEmails,
      joinColumn: 'recepient_id',
      inverseJoinColumn: 'email_id',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class SenderEmails {
  [PrimaryKeyProp]?: ['sender', 'email'];
  sender!: Senders;
  email!: Emails;
}

export const SenderEmailsSchema = new EntitySchema({
  class: SenderEmails,
  properties: {
    sender: { primary: true, kind: 'm:1', entity: () => Senders, fieldName: 'sender_id' },
    email: {
      primary: true,
      kind: 'm:1',
      entity: () => Emails,
      fieldName: 'email_id',
      index: 'fk_sender_emails_emails1_idx',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Emails } from './Emails';

export class Senders {
  [PrimaryKeyProp]?: 'senderId';
  senderId!: number;
  name!: string;
  senderEmails = new Collection<Emails>(this);
}

export const SendersSchema = new EntitySchema({
  class: Senders,
  properties: {
    senderId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255 },
    senderEmails: {
      kind: 'm:n',
      entity: () => Emails,
      pivotTable: 'sender_emails',
      pivotEntity: () => SenderEmails,
      joinColumn: 'sender_id',
      inverseJoinColumn: 'email_id',
    },
  },
});
",
]
`;

exports[`4898 nullable_fk_example scalarPropertiesForRelations=never bidirectionalRelations=false identifiedReferences=true entitySchema=false: dump 1`] = `
[
  "import { Entity, ManyToOne, OptionalProps, PrimaryKey, PrimaryKeyProp, Property, Ref } from '@mikro-orm/core';
import { RecepientEmails } from './RecepientEmails';
import { SenderEmails } from './SenderEmails';

@Entity()
export class EmailSendingLogs {

  [PrimaryKeyProp]?: 'logId';

  [OptionalProps]?: 'createdAt';

  @PrimaryKey()
  logId!: number;

  @ManyToOne({ entity: () => RecepientEmails, ref: true, fieldNames: ['recepient_id', 'recepient_email_id'], index: 'fk_email_sending_logs_recepient_emails1_idx' })
  recepient!: Ref<RecepientEmails>;

  @ManyToOne({ entity: () => SenderEmails, ref: true, fieldNames: ['sender_id', 'sender_email_id'], index: 'fk_email_sending_logs_sender_emails1_idx' })
  sender!: Ref<SenderEmails>;

  @ManyToOne({ entity: () => SenderEmails, ref: true, fieldNames: ['sender_id', 'reply_email_id'], nullable: true, index: 'fk_email_sending_logs_sender_emails2_idx' })
  reply?: Ref<SenderEmails>;

  @Property({ length: 0, defaultRaw: \`CURRENT_TIMESTAMP\` })
  createdAt!: Date;

}
",
  "import { Entity, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';

@Entity()
export class Emails {

  [PrimaryKeyProp]?: 'emailId';

  @PrimaryKey()
  emailId!: number;

  @Unique({ name: 'address_UNIQUE' })
  @Property({ length: 255 })
  address!: string;

}
",
  "import { Entity, ManyToOne, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Emails } from './Emails';
import { Recepients } from './Recepients';

@Entity()
export class RecepientEmails {

  [PrimaryKeyProp]?: ['recepient', 'email'];

  @ManyToOne({ entity: () => Recepients, ref: true, fieldName: 'recepient_id', primary: true })
  recepient!: Ref<Recepients>;

  @ManyToOne({ entity: () => Emails, ref: true, fieldName: 'email_id', primary: true, index: 'fk_recepient_emails_emails1_idx' })
  email!: Ref<Emails>;

}
",
  "import { Collection, Entity, ManyToMany, PrimaryKey, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Emails } from './Emails';
import { RecepientEmails } from './RecepientEmails';

@Entity()
export class Recepients {

  [PrimaryKeyProp]?: 'recepientId';

  @PrimaryKey()
  recepientId!: number;

  @Property({ length: 255 })
  name!: string;

  @ManyToMany({ entity: () => Emails, pivotTable: 'recepient_emails', pivotEntity: () => RecepientEmails, joinColumn: 'recepient_id', inverseJoinColumn: 'email_id' })
  recepientEmails = new Collection<Emails>(this);

}
",
  "import { Entity, ManyToOne, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Emails } from './Emails';
import { Senders } from './Senders';

@Entity()
export class SenderEmails {

  [PrimaryKeyProp]?: ['sender', 'email'];

  @ManyToOne({ entity: () => Senders, ref: true, fieldName: 'sender_id', primary: true })
  sender!: Ref<Senders>;

  @ManyToOne({ entity: () => Emails, ref: true, fieldName: 'email_id', primary: true, index: 'fk_sender_emails_emails1_idx' })
  email!: Ref<Emails>;

}
",
  "import { Collection, Entity, ManyToMany, PrimaryKey, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Emails } from './Emails';
import { SenderEmails } from './SenderEmails';

@Entity()
export class Senders {

  [PrimaryKeyProp]?: 'senderId';

  @PrimaryKey()
  senderId!: number;

  @Property({ length: 255 })
  name!: string;

  @ManyToMany({ entity: () => Emails, pivotTable: 'sender_emails', pivotEntity: () => SenderEmails, joinColumn: 'sender_id', inverseJoinColumn: 'email_id' })
  senderEmails = new Collection<Emails>(this);

}
",
]
`;

exports[`4898 nullable_fk_example scalarPropertiesForRelations=never bidirectionalRelations=false identifiedReferences=true entitySchema=true: dump 1`] = `
[
  "import { EntitySchema, OptionalProps, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { RecepientEmails } from './RecepientEmails';
import { SenderEmails } from './SenderEmails';

export class EmailSendingLogs {
  [PrimaryKeyProp]?: 'logId';
  [OptionalProps]?: 'createdAt';
  logId!: number;
  recepient!: Ref<RecepientEmails>;
  sender!: Ref<SenderEmails>;
  reply?: Ref<SenderEmails>;
  createdAt!: Date;
}

export const EmailSendingLogsSchema = new EntitySchema({
  class: EmailSendingLogs,
  properties: {
    logId: { primary: true, type: 'number' },
    recepient: {
      kind: 'm:1',
      entity: () => RecepientEmails,
      ref: true,
      fieldNames: [
        'recepient_id',
        'recepient_email_id'
      ],
      index: 'fk_email_sending_logs_recepient_emails1_idx',
    },
    sender: {
      kind: 'm:1',
      entity: () => SenderEmails,
      ref: true,
      fieldNames: [
        'sender_id',
        'sender_email_id'
      ],
      index: 'fk_email_sending_logs_sender_emails1_idx',
    },
    reply: {
      kind: 'm:1',
      entity: () => SenderEmails,
      ref: true,
      fieldNames: [
        'sender_id',
        'reply_email_id'
      ],
      nullable: true,
      index: 'fk_email_sending_logs_sender_emails2_idx',
    },
    createdAt: { type: 'Date', length: 0, defaultRaw: \`CURRENT_TIMESTAMP\` },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Emails {
  [PrimaryKeyProp]?: 'emailId';
  emailId!: number;
  address!: string;
}

export const EmailsSchema = new EntitySchema({
  class: Emails,
  properties: {
    emailId: { primary: true, type: 'number' },
    address: { type: 'string', length: 255, unique: 'address_UNIQUE' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Emails } from './Emails';
import { Recepients } from './Recepients';

export class RecepientEmails {
  [PrimaryKeyProp]?: ['recepient', 'email'];
  recepient!: Ref<Recepients>;
  email!: Ref<Emails>;
}

export const RecepientEmailsSchema = new EntitySchema({
  class: RecepientEmails,
  properties: {
    recepient: {
      primary: true,
      kind: 'm:1',
      entity: () => Recepients,
      ref: true,
      fieldName: 'recepient_id',
    },
    email: {
      primary: true,
      kind: 'm:1',
      entity: () => Emails,
      ref: true,
      fieldName: 'email_id',
      index: 'fk_recepient_emails_emails1_idx',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Emails } from './Emails';

export class Recepients {
  [PrimaryKeyProp]?: 'recepientId';
  recepientId!: number;
  name!: string;
  recepientEmails = new Collection<Emails>(this);
}

export const RecepientsSchema = new EntitySchema({
  class: Recepients,
  properties: {
    recepientId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255 },
    recepientEmails: {
      kind: 'm:n',
      entity: () => Emails,
      pivotTable: 'recepient_emails',
      pivotEntity: () => RecepientEmails,
      joinColumn: 'recepient_id',
      inverseJoinColumn: 'email_id',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Emails } from './Emails';
import { Senders } from './Senders';

export class SenderEmails {
  [PrimaryKeyProp]?: ['sender', 'email'];
  sender!: Ref<Senders>;
  email!: Ref<Emails>;
}

export const SenderEmailsSchema = new EntitySchema({
  class: SenderEmails,
  properties: {
    sender: {
      primary: true,
      kind: 'm:1',
      entity: () => Senders,
      ref: true,
      fieldName: 'sender_id',
    },
    email: {
      primary: true,
      kind: 'm:1',
      entity: () => Emails,
      ref: true,
      fieldName: 'email_id',
      index: 'fk_sender_emails_emails1_idx',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Emails } from './Emails';

export class Senders {
  [PrimaryKeyProp]?: 'senderId';
  senderId!: number;
  name!: string;
  senderEmails = new Collection<Emails>(this);
}

export const SendersSchema = new EntitySchema({
  class: Senders,
  properties: {
    senderId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255 },
    senderEmails: {
      kind: 'm:n',
      entity: () => Emails,
      pivotTable: 'sender_emails',
      pivotEntity: () => SenderEmails,
      joinColumn: 'sender_id',
      inverseJoinColumn: 'email_id',
    },
  },
});
",
]
`;

exports[`4898 nullable_fk_example scalarPropertiesForRelations=never bidirectionalRelations=true identifiedReferences=false entitySchema=false: dump 1`] = `
[
  "import { Entity, ManyToOne, OptionalProps, PrimaryKey, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { RecepientEmails } from './RecepientEmails';
import { SenderEmails } from './SenderEmails';

@Entity()
export class EmailSendingLogs {

  [PrimaryKeyProp]?: 'logId';

  [OptionalProps]?: 'createdAt';

  @PrimaryKey()
  logId!: number;

  @ManyToOne({ entity: () => RecepientEmails, fieldNames: ['recepient_id', 'recepient_email_id'], index: 'fk_email_sending_logs_recepient_emails1_idx' })
  recepient!: RecepientEmails;

  @ManyToOne({ entity: () => SenderEmails, fieldNames: ['sender_id', 'sender_email_id'], index: 'fk_email_sending_logs_sender_emails1_idx' })
  sender!: SenderEmails;

  @ManyToOne({ entity: () => SenderEmails, fieldNames: ['sender_id', 'reply_email_id'], nullable: true, index: 'fk_email_sending_logs_sender_emails2_idx' })
  reply?: SenderEmails;

  @Property({ length: 0, defaultRaw: \`CURRENT_TIMESTAMP\` })
  createdAt!: Date;

}
",
  "import { Collection, Entity, ManyToMany, OneToMany, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { Recepients } from './Recepients';
import { SenderEmails } from './SenderEmails';
import { Senders } from './Senders';

@Entity()
export class Emails {

  [PrimaryKeyProp]?: 'emailId';

  @PrimaryKey()
  emailId!: number;

  @Unique({ name: 'address_UNIQUE' })
  @Property({ length: 255 })
  address!: string;

  @OneToMany({ entity: () => SenderEmails, mappedBy: 'email' })
  emailInverse = new Collection<SenderEmails>(this);

  @ManyToMany({ entity: () => Recepients, mappedBy: 'recepientEmails' })
  recepientEmailsInverse = new Collection<Recepients>(this);

  @ManyToMany({ entity: () => Senders, mappedBy: 'senderEmails' })
  senderEmailsInverse = new Collection<Senders>(this);

}
",
  "import { Collection, Entity, ManyToOne, OneToMany, PrimaryKeyProp } from '@mikro-orm/core';
import { EmailSendingLogs } from './EmailSendingLogs';
import { Emails } from './Emails';
import { Recepients } from './Recepients';

@Entity()
export class RecepientEmails {

  [PrimaryKeyProp]?: ['recepient', 'email'];

  @ManyToOne({ entity: () => Recepients, fieldName: 'recepient_id', primary: true })
  recepient!: Recepients;

  @ManyToOne({ entity: () => Emails, fieldName: 'email_id', primary: true, index: 'fk_recepient_emails_emails1_idx' })
  email!: Emails;

  @OneToMany({ entity: () => EmailSendingLogs, mappedBy: 'recepient' })
  recepientInverse = new Collection<EmailSendingLogs>(this);

}
",
  "import { Collection, Entity, ManyToMany, OneToMany, PrimaryKey, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Emails } from './Emails';
import { RecepientEmails } from './RecepientEmails';

@Entity()
export class Recepients {

  [PrimaryKeyProp]?: 'recepientId';

  @PrimaryKey()
  recepientId!: number;

  @Property({ length: 255 })
  name!: string;

  @ManyToMany({ entity: () => Emails, pivotTable: 'recepient_emails', pivotEntity: () => RecepientEmails, joinColumn: 'recepient_id', inverseJoinColumn: 'email_id' })
  recepientEmails = new Collection<Emails>(this);

  @OneToMany({ entity: () => RecepientEmails, mappedBy: 'recepient' })
  recepientInverse = new Collection<RecepientEmails>(this);

}
",
  "import { Collection, Entity, ManyToOne, OneToMany, PrimaryKeyProp } from '@mikro-orm/core';
import { EmailSendingLogs } from './EmailSendingLogs';
import { Emails } from './Emails';
import { Senders } from './Senders';

@Entity()
export class SenderEmails {

  [PrimaryKeyProp]?: ['sender', 'email'];

  @ManyToOne({ entity: () => Senders, fieldName: 'sender_id', primary: true })
  sender!: Senders;

  @ManyToOne({ entity: () => Emails, fieldName: 'email_id', primary: true, index: 'fk_sender_emails_emails1_idx' })
  email!: Emails;

  @OneToMany({ entity: () => EmailSendingLogs, mappedBy: 'sender' })
  senderInverse = new Collection<EmailSendingLogs>(this);

  @OneToMany({ entity: () => EmailSendingLogs, mappedBy: 'reply' })
  replyInverse = new Collection<EmailSendingLogs>(this);

}
",
  "import { Collection, Entity, ManyToMany, OneToMany, PrimaryKey, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Emails } from './Emails';
import { SenderEmails } from './SenderEmails';

@Entity()
export class Senders {

  [PrimaryKeyProp]?: 'senderId';

  @PrimaryKey()
  senderId!: number;

  @Property({ length: 255 })
  name!: string;

  @ManyToMany({ entity: () => Emails, pivotTable: 'sender_emails', pivotEntity: () => SenderEmails, joinColumn: 'sender_id', inverseJoinColumn: 'email_id' })
  senderEmails = new Collection<Emails>(this);

  @OneToMany({ entity: () => SenderEmails, mappedBy: 'sender' })
  senderInverse = new Collection<SenderEmails>(this);

}
",
]
`;

exports[`4898 nullable_fk_example scalarPropertiesForRelations=never bidirectionalRelations=true identifiedReferences=false entitySchema=true: dump 1`] = `
[
  "import { EntitySchema, OptionalProps, PrimaryKeyProp } from '@mikro-orm/core';

export class EmailSendingLogs {
  [PrimaryKeyProp]?: 'logId';
  [OptionalProps]?: 'createdAt';
  logId!: number;
  recepient!: RecepientEmails;
  sender!: SenderEmails;
  reply?: SenderEmails;
  createdAt!: Date;
}

export const EmailSendingLogsSchema = new EntitySchema({
  class: EmailSendingLogs,
  properties: {
    logId: { primary: true, type: 'number' },
    recepient: {
      kind: 'm:1',
      entity: () => RecepientEmails,
      fieldNames: [
        'recepient_id',
        'recepient_email_id'
      ],
      index: 'fk_email_sending_logs_recepient_emails1_idx',
    },
    sender: {
      kind: 'm:1',
      entity: () => SenderEmails,
      fieldNames: [
        'sender_id',
        'sender_email_id'
      ],
      index: 'fk_email_sending_logs_sender_emails1_idx',
    },
    reply: {
      kind: 'm:1',
      entity: () => SenderEmails,
      fieldNames: [
        'sender_id',
        'reply_email_id'
      ],
      nullable: true,
      index: 'fk_email_sending_logs_sender_emails2_idx',
    },
    createdAt: { type: 'Date', length: 0, defaultRaw: \`CURRENT_TIMESTAMP\` },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Recepients } from './Recepients';
import { SenderEmails } from './SenderEmails';
import { Senders } from './Senders';

export class Emails {
  [PrimaryKeyProp]?: 'emailId';
  emailId!: number;
  address!: string;
  emailInverse = new Collection<SenderEmails>(this);
  recepientEmailsInverse = new Collection<Recepients>(this);
  senderEmailsInverse = new Collection<Senders>(this);
}

export const EmailsSchema = new EntitySchema({
  class: Emails,
  properties: {
    emailId: { primary: true, type: 'number' },
    address: { type: 'string', length: 255, unique: 'address_UNIQUE' },
    emailInverse: { kind: '1:m', entity: () => SenderEmails, mappedBy: 'email' },
    recepientEmailsInverse: { kind: 'm:n', entity: () => Recepients, mappedBy: 'recepientEmails' },
    senderEmailsInverse: { kind: 'm:n', entity: () => Senders, mappedBy: 'senderEmails' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { EmailSendingLogs } from './EmailSendingLogs';

export class RecepientEmails {
  [PrimaryKeyProp]?: ['recepient', 'email'];
  recepient!: Recepients;
  email!: Emails;
  recepientInverse = new Collection<EmailSendingLogs>(this);
}

export const RecepientEmailsSchema = new EntitySchema({
  class: RecepientEmails,
  properties: {
    recepient: {
      primary: true,
      kind: 'm:1',
      entity: () => Recepients,
      fieldName: 'recepient_id',
    },
    email: {
      primary: true,
      kind: 'm:1',
      entity: () => Emails,
      fieldName: 'email_id',
      index: 'fk_recepient_emails_emails1_idx',
    },
    recepientInverse: { kind: '1:m', entity: () => EmailSendingLogs, mappedBy: 'recepient' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Emails } from './Emails';
import { RecepientEmails } from './RecepientEmails';

export class Recepients {
  [PrimaryKeyProp]?: 'recepientId';
  recepientId!: number;
  name!: string;
  recepientEmails = new Collection<Emails>(this);
  recepientInverse = new Collection<RecepientEmails>(this);
}

export const RecepientsSchema = new EntitySchema({
  class: Recepients,
  properties: {
    recepientId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255 },
    recepientEmails: {
      kind: 'm:n',
      entity: () => Emails,
      pivotTable: 'recepient_emails',
      pivotEntity: () => RecepientEmails,
      joinColumn: 'recepient_id',
      inverseJoinColumn: 'email_id',
    },
    recepientInverse: { kind: '1:m', entity: () => RecepientEmails, mappedBy: 'recepient' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { EmailSendingLogs } from './EmailSendingLogs';

export class SenderEmails {
  [PrimaryKeyProp]?: ['sender', 'email'];
  sender!: Senders;
  email!: Emails;
  senderInverse = new Collection<EmailSendingLogs>(this);
  replyInverse = new Collection<EmailSendingLogs>(this);
}

export const SenderEmailsSchema = new EntitySchema({
  class: SenderEmails,
  properties: {
    sender: { primary: true, kind: 'm:1', entity: () => Senders, fieldName: 'sender_id' },
    email: {
      primary: true,
      kind: 'm:1',
      entity: () => Emails,
      fieldName: 'email_id',
      index: 'fk_sender_emails_emails1_idx',
    },
    senderInverse: { kind: '1:m', entity: () => EmailSendingLogs, mappedBy: 'sender' },
    replyInverse: { kind: '1:m', entity: () => EmailSendingLogs, mappedBy: 'reply' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Emails } from './Emails';
import { SenderEmails } from './SenderEmails';

export class Senders {
  [PrimaryKeyProp]?: 'senderId';
  senderId!: number;
  name!: string;
  senderEmails = new Collection<Emails>(this);
  senderInverse = new Collection<SenderEmails>(this);
}

export const SendersSchema = new EntitySchema({
  class: Senders,
  properties: {
    senderId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255 },
    senderEmails: {
      kind: 'm:n',
      entity: () => Emails,
      pivotTable: 'sender_emails',
      pivotEntity: () => SenderEmails,
      joinColumn: 'sender_id',
      inverseJoinColumn: 'email_id',
    },
    senderInverse: { kind: '1:m', entity: () => SenderEmails, mappedBy: 'sender' },
  },
});
",
]
`;

exports[`4898 nullable_fk_example scalarPropertiesForRelations=never bidirectionalRelations=true identifiedReferences=true entitySchema=false: dump 1`] = `
[
  "import { Entity, ManyToOne, OptionalProps, PrimaryKey, PrimaryKeyProp, Property, Ref } from '@mikro-orm/core';
import { RecepientEmails } from './RecepientEmails';
import { SenderEmails } from './SenderEmails';

@Entity()
export class EmailSendingLogs {

  [PrimaryKeyProp]?: 'logId';

  [OptionalProps]?: 'createdAt';

  @PrimaryKey()
  logId!: number;

  @ManyToOne({ entity: () => RecepientEmails, ref: true, fieldNames: ['recepient_id', 'recepient_email_id'], index: 'fk_email_sending_logs_recepient_emails1_idx' })
  recepient!: Ref<RecepientEmails>;

  @ManyToOne({ entity: () => SenderEmails, ref: true, fieldNames: ['sender_id', 'sender_email_id'], index: 'fk_email_sending_logs_sender_emails1_idx' })
  sender!: Ref<SenderEmails>;

  @ManyToOne({ entity: () => SenderEmails, ref: true, fieldNames: ['sender_id', 'reply_email_id'], nullable: true, index: 'fk_email_sending_logs_sender_emails2_idx' })
  reply?: Ref<SenderEmails>;

  @Property({ length: 0, defaultRaw: \`CURRENT_TIMESTAMP\` })
  createdAt!: Date;

}
",
  "import { Collection, Entity, ManyToMany, OneToMany, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { Recepients } from './Recepients';
import { SenderEmails } from './SenderEmails';
import { Senders } from './Senders';

@Entity()
export class Emails {

  [PrimaryKeyProp]?: 'emailId';

  @PrimaryKey()
  emailId!: number;

  @Unique({ name: 'address_UNIQUE' })
  @Property({ length: 255 })
  address!: string;

  @OneToMany({ entity: () => SenderEmails, mappedBy: 'email' })
  emailInverse = new Collection<SenderEmails>(this);

  @ManyToMany({ entity: () => Recepients, mappedBy: 'recepientEmails' })
  recepientEmailsInverse = new Collection<Recepients>(this);

  @ManyToMany({ entity: () => Senders, mappedBy: 'senderEmails' })
  senderEmailsInverse = new Collection<Senders>(this);

}
",
  "import { Collection, Entity, ManyToOne, OneToMany, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { EmailSendingLogs } from './EmailSendingLogs';
import { Emails } from './Emails';
import { Recepients } from './Recepients';

@Entity()
export class RecepientEmails {

  [PrimaryKeyProp]?: ['recepient', 'email'];

  @ManyToOne({ entity: () => Recepients, ref: true, fieldName: 'recepient_id', primary: true })
  recepient!: Ref<Recepients>;

  @ManyToOne({ entity: () => Emails, ref: true, fieldName: 'email_id', primary: true, index: 'fk_recepient_emails_emails1_idx' })
  email!: Ref<Emails>;

  @OneToMany({ entity: () => EmailSendingLogs, mappedBy: 'recepient' })
  recepientInverse = new Collection<EmailSendingLogs>(this);

}
",
  "import { Collection, Entity, ManyToMany, OneToMany, PrimaryKey, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Emails } from './Emails';
import { RecepientEmails } from './RecepientEmails';

@Entity()
export class Recepients {

  [PrimaryKeyProp]?: 'recepientId';

  @PrimaryKey()
  recepientId!: number;

  @Property({ length: 255 })
  name!: string;

  @ManyToMany({ entity: () => Emails, pivotTable: 'recepient_emails', pivotEntity: () => RecepientEmails, joinColumn: 'recepient_id', inverseJoinColumn: 'email_id' })
  recepientEmails = new Collection<Emails>(this);

  @OneToMany({ entity: () => RecepientEmails, mappedBy: 'recepient' })
  recepientInverse = new Collection<RecepientEmails>(this);

}
",
  "import { Collection, Entity, ManyToOne, OneToMany, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { EmailSendingLogs } from './EmailSendingLogs';
import { Emails } from './Emails';
import { Senders } from './Senders';

@Entity()
export class SenderEmails {

  [PrimaryKeyProp]?: ['sender', 'email'];

  @ManyToOne({ entity: () => Senders, ref: true, fieldName: 'sender_id', primary: true })
  sender!: Ref<Senders>;

  @ManyToOne({ entity: () => Emails, ref: true, fieldName: 'email_id', primary: true, index: 'fk_sender_emails_emails1_idx' })
  email!: Ref<Emails>;

  @OneToMany({ entity: () => EmailSendingLogs, mappedBy: 'sender' })
  senderInverse = new Collection<EmailSendingLogs>(this);

  @OneToMany({ entity: () => EmailSendingLogs, mappedBy: 'reply' })
  replyInverse = new Collection<EmailSendingLogs>(this);

}
",
  "import { Collection, Entity, ManyToMany, OneToMany, PrimaryKey, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Emails } from './Emails';
import { SenderEmails } from './SenderEmails';

@Entity()
export class Senders {

  [PrimaryKeyProp]?: 'senderId';

  @PrimaryKey()
  senderId!: number;

  @Property({ length: 255 })
  name!: string;

  @ManyToMany({ entity: () => Emails, pivotTable: 'sender_emails', pivotEntity: () => SenderEmails, joinColumn: 'sender_id', inverseJoinColumn: 'email_id' })
  senderEmails = new Collection<Emails>(this);

  @OneToMany({ entity: () => SenderEmails, mappedBy: 'sender' })
  senderInverse = new Collection<SenderEmails>(this);

}
",
]
`;

exports[`4898 nullable_fk_example scalarPropertiesForRelations=never bidirectionalRelations=true identifiedReferences=true entitySchema=true: dump 1`] = `
[
  "import { EntitySchema, OptionalProps, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { RecepientEmails } from './RecepientEmails';
import { SenderEmails } from './SenderEmails';

export class EmailSendingLogs {
  [PrimaryKeyProp]?: 'logId';
  [OptionalProps]?: 'createdAt';
  logId!: number;
  recepient!: Ref<RecepientEmails>;
  sender!: Ref<SenderEmails>;
  reply?: Ref<SenderEmails>;
  createdAt!: Date;
}

export const EmailSendingLogsSchema = new EntitySchema({
  class: EmailSendingLogs,
  properties: {
    logId: { primary: true, type: 'number' },
    recepient: {
      kind: 'm:1',
      entity: () => RecepientEmails,
      ref: true,
      fieldNames: [
        'recepient_id',
        'recepient_email_id'
      ],
      index: 'fk_email_sending_logs_recepient_emails1_idx',
    },
    sender: {
      kind: 'm:1',
      entity: () => SenderEmails,
      ref: true,
      fieldNames: [
        'sender_id',
        'sender_email_id'
      ],
      index: 'fk_email_sending_logs_sender_emails1_idx',
    },
    reply: {
      kind: 'm:1',
      entity: () => SenderEmails,
      ref: true,
      fieldNames: [
        'sender_id',
        'reply_email_id'
      ],
      nullable: true,
      index: 'fk_email_sending_logs_sender_emails2_idx',
    },
    createdAt: { type: 'Date', length: 0, defaultRaw: \`CURRENT_TIMESTAMP\` },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Recepients } from './Recepients';
import { SenderEmails } from './SenderEmails';
import { Senders } from './Senders';

export class Emails {
  [PrimaryKeyProp]?: 'emailId';
  emailId!: number;
  address!: string;
  emailInverse = new Collection<SenderEmails>(this);
  recepientEmailsInverse = new Collection<Recepients>(this);
  senderEmailsInverse = new Collection<Senders>(this);
}

export const EmailsSchema = new EntitySchema({
  class: Emails,
  properties: {
    emailId: { primary: true, type: 'number' },
    address: { type: 'string', length: 255, unique: 'address_UNIQUE' },
    emailInverse: { kind: '1:m', entity: () => SenderEmails, mappedBy: 'email' },
    recepientEmailsInverse: { kind: 'm:n', entity: () => Recepients, mappedBy: 'recepientEmails' },
    senderEmailsInverse: { kind: 'm:n', entity: () => Senders, mappedBy: 'senderEmails' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { EmailSendingLogs } from './EmailSendingLogs';
import { Emails } from './Emails';
import { Recepients } from './Recepients';

export class RecepientEmails {
  [PrimaryKeyProp]?: ['recepient', 'email'];
  recepient!: Ref<Recepients>;
  email!: Ref<Emails>;
  recepientInverse = new Collection<EmailSendingLogs>(this);
}

export const RecepientEmailsSchema = new EntitySchema({
  class: RecepientEmails,
  properties: {
    recepient: {
      primary: true,
      kind: 'm:1',
      entity: () => Recepients,
      ref: true,
      fieldName: 'recepient_id',
    },
    email: {
      primary: true,
      kind: 'm:1',
      entity: () => Emails,
      ref: true,
      fieldName: 'email_id',
      index: 'fk_recepient_emails_emails1_idx',
    },
    recepientInverse: { kind: '1:m', entity: () => EmailSendingLogs, mappedBy: 'recepient' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Emails } from './Emails';
import { RecepientEmails } from './RecepientEmails';

export class Recepients {
  [PrimaryKeyProp]?: 'recepientId';
  recepientId!: number;
  name!: string;
  recepientEmails = new Collection<Emails>(this);
  recepientInverse = new Collection<RecepientEmails>(this);
}

export const RecepientsSchema = new EntitySchema({
  class: Recepients,
  properties: {
    recepientId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255 },
    recepientEmails: {
      kind: 'm:n',
      entity: () => Emails,
      pivotTable: 'recepient_emails',
      pivotEntity: () => RecepientEmails,
      joinColumn: 'recepient_id',
      inverseJoinColumn: 'email_id',
    },
    recepientInverse: { kind: '1:m', entity: () => RecepientEmails, mappedBy: 'recepient' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { EmailSendingLogs } from './EmailSendingLogs';
import { Emails } from './Emails';
import { Senders } from './Senders';

export class SenderEmails {
  [PrimaryKeyProp]?: ['sender', 'email'];
  sender!: Ref<Senders>;
  email!: Ref<Emails>;
  senderInverse = new Collection<EmailSendingLogs>(this);
  replyInverse = new Collection<EmailSendingLogs>(this);
}

export const SenderEmailsSchema = new EntitySchema({
  class: SenderEmails,
  properties: {
    sender: {
      primary: true,
      kind: 'm:1',
      entity: () => Senders,
      ref: true,
      fieldName: 'sender_id',
    },
    email: {
      primary: true,
      kind: 'm:1',
      entity: () => Emails,
      ref: true,
      fieldName: 'email_id',
      index: 'fk_sender_emails_emails1_idx',
    },
    senderInverse: { kind: '1:m', entity: () => EmailSendingLogs, mappedBy: 'sender' },
    replyInverse: { kind: '1:m', entity: () => EmailSendingLogs, mappedBy: 'reply' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Emails } from './Emails';
import { SenderEmails } from './SenderEmails';

export class Senders {
  [PrimaryKeyProp]?: 'senderId';
  senderId!: number;
  name!: string;
  senderEmails = new Collection<Emails>(this);
  senderInverse = new Collection<SenderEmails>(this);
}

export const SendersSchema = new EntitySchema({
  class: Senders,
  properties: {
    senderId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255 },
    senderEmails: {
      kind: 'm:n',
      entity: () => Emails,
      pivotTable: 'sender_emails',
      pivotEntity: () => SenderEmails,
      joinColumn: 'sender_id',
      inverseJoinColumn: 'email_id',
    },
    senderInverse: { kind: '1:m', entity: () => SenderEmails, mappedBy: 'sender' },
  },
});
",
]
`;

exports[`4898 nullable_fk_example scalarPropertiesForRelations=smart bidirectionalRelations=false identifiedReferences=false entitySchema=false: dump 1`] = `
[
  "import { Entity, ManyToOne, OptionalProps, PrimaryKey, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { RecepientEmails } from './RecepientEmails';
import { SenderEmails } from './SenderEmails';

@Entity()
export class EmailSendingLogs {

  [PrimaryKeyProp]?: 'logId';

  [OptionalProps]?: 'createdAt';

  @PrimaryKey()
  logId!: number;

  @ManyToOne({ entity: () => RecepientEmails, fieldNames: ['recepient_id', 'recepient_email_id'], index: 'fk_email_sending_logs_recepient_emails1_idx' })
  recepient!: RecepientEmails;

  @ManyToOne({ entity: () => SenderEmails, fieldNames: ['sender_id', 'sender_email_id'], index: 'fk_email_sending_logs_sender_emails1_idx' })
  sender!: SenderEmails;

  @ManyToOne({ entity: () => SenderEmails, fieldNames: ['sender_id', 'reply_email_id'], nullable: true, index: 'fk_email_sending_logs_sender_emails2_idx' })
  reply?: SenderEmails;

  @Property({ length: 0, defaultRaw: \`CURRENT_TIMESTAMP\` })
  createdAt!: Date;

}
",
  "import { Entity, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';

@Entity()
export class Emails {

  [PrimaryKeyProp]?: 'emailId';

  @PrimaryKey()
  emailId!: number;

  @Unique({ name: 'address_UNIQUE' })
  @Property({ length: 255 })
  address!: string;

}
",
  "import { Entity, ManyToOne, PrimaryKeyProp } from '@mikro-orm/core';
import { Emails } from './Emails';
import { Recepients } from './Recepients';

@Entity()
export class RecepientEmails {

  [PrimaryKeyProp]?: ['recepient', 'email'];

  @ManyToOne({ entity: () => Recepients, fieldName: 'recepient_id', primary: true })
  recepient!: Recepients;

  @ManyToOne({ entity: () => Emails, fieldName: 'email_id', primary: true, index: 'fk_recepient_emails_emails1_idx' })
  email!: Emails;

}
",
  "import { Collection, Entity, ManyToMany, PrimaryKey, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Emails } from './Emails';
import { RecepientEmails } from './RecepientEmails';

@Entity()
export class Recepients {

  [PrimaryKeyProp]?: 'recepientId';

  @PrimaryKey()
  recepientId!: number;

  @Property({ length: 255 })
  name!: string;

  @ManyToMany({ entity: () => Emails, pivotTable: 'recepient_emails', pivotEntity: () => RecepientEmails, joinColumn: 'recepient_id', inverseJoinColumn: 'email_id' })
  recepientEmails = new Collection<Emails>(this);

}
",
  "import { Entity, ManyToOne, PrimaryKeyProp } from '@mikro-orm/core';
import { Emails } from './Emails';
import { Senders } from './Senders';

@Entity()
export class SenderEmails {

  [PrimaryKeyProp]?: ['sender', 'email'];

  @ManyToOne({ entity: () => Senders, fieldName: 'sender_id', primary: true })
  sender!: Senders;

  @ManyToOne({ entity: () => Emails, fieldName: 'email_id', primary: true, index: 'fk_sender_emails_emails1_idx' })
  email!: Emails;

}
",
  "import { Collection, Entity, ManyToMany, PrimaryKey, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Emails } from './Emails';
import { SenderEmails } from './SenderEmails';

@Entity()
export class Senders {

  [PrimaryKeyProp]?: 'senderId';

  @PrimaryKey()
  senderId!: number;

  @Property({ length: 255 })
  name!: string;

  @ManyToMany({ entity: () => Emails, pivotTable: 'sender_emails', pivotEntity: () => SenderEmails, joinColumn: 'sender_id', inverseJoinColumn: 'email_id' })
  senderEmails = new Collection<Emails>(this);

}
",
]
`;

exports[`4898 nullable_fk_example scalarPropertiesForRelations=smart bidirectionalRelations=false identifiedReferences=false entitySchema=true: dump 1`] = `
[
  "import { EntitySchema, OptionalProps, PrimaryKeyProp } from '@mikro-orm/core';

export class EmailSendingLogs {
  [PrimaryKeyProp]?: 'logId';
  [OptionalProps]?: 'createdAt';
  logId!: number;
  recepient!: RecepientEmails;
  sender!: SenderEmails;
  reply?: SenderEmails;
  createdAt!: Date;
}

export const EmailSendingLogsSchema = new EntitySchema({
  class: EmailSendingLogs,
  properties: {
    logId: { primary: true, type: 'number' },
    recepient: {
      kind: 'm:1',
      entity: () => RecepientEmails,
      fieldNames: [
        'recepient_id',
        'recepient_email_id'
      ],
      index: 'fk_email_sending_logs_recepient_emails1_idx',
    },
    sender: {
      kind: 'm:1',
      entity: () => SenderEmails,
      fieldNames: [
        'sender_id',
        'sender_email_id'
      ],
      index: 'fk_email_sending_logs_sender_emails1_idx',
    },
    reply: {
      kind: 'm:1',
      entity: () => SenderEmails,
      fieldNames: [
        'sender_id',
        'reply_email_id'
      ],
      nullable: true,
      index: 'fk_email_sending_logs_sender_emails2_idx',
    },
    createdAt: { type: 'Date', length: 0, defaultRaw: \`CURRENT_TIMESTAMP\` },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Emails {
  [PrimaryKeyProp]?: 'emailId';
  emailId!: number;
  address!: string;
}

export const EmailsSchema = new EntitySchema({
  class: Emails,
  properties: {
    emailId: { primary: true, type: 'number' },
    address: { type: 'string', length: 255, unique: 'address_UNIQUE' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class RecepientEmails {
  [PrimaryKeyProp]?: ['recepient', 'email'];
  recepient!: Recepients;
  email!: Emails;
}

export const RecepientEmailsSchema = new EntitySchema({
  class: RecepientEmails,
  properties: {
    recepient: {
      primary: true,
      kind: 'm:1',
      entity: () => Recepients,
      fieldName: 'recepient_id',
    },
    email: {
      primary: true,
      kind: 'm:1',
      entity: () => Emails,
      fieldName: 'email_id',
      index: 'fk_recepient_emails_emails1_idx',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Emails } from './Emails';

export class Recepients {
  [PrimaryKeyProp]?: 'recepientId';
  recepientId!: number;
  name!: string;
  recepientEmails = new Collection<Emails>(this);
}

export const RecepientsSchema = new EntitySchema({
  class: Recepients,
  properties: {
    recepientId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255 },
    recepientEmails: {
      kind: 'm:n',
      entity: () => Emails,
      pivotTable: 'recepient_emails',
      pivotEntity: () => RecepientEmails,
      joinColumn: 'recepient_id',
      inverseJoinColumn: 'email_id',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class SenderEmails {
  [PrimaryKeyProp]?: ['sender', 'email'];
  sender!: Senders;
  email!: Emails;
}

export const SenderEmailsSchema = new EntitySchema({
  class: SenderEmails,
  properties: {
    sender: { primary: true, kind: 'm:1', entity: () => Senders, fieldName: 'sender_id' },
    email: {
      primary: true,
      kind: 'm:1',
      entity: () => Emails,
      fieldName: 'email_id',
      index: 'fk_sender_emails_emails1_idx',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Emails } from './Emails';

export class Senders {
  [PrimaryKeyProp]?: 'senderId';
  senderId!: number;
  name!: string;
  senderEmails = new Collection<Emails>(this);
}

export const SendersSchema = new EntitySchema({
  class: Senders,
  properties: {
    senderId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255 },
    senderEmails: {
      kind: 'm:n',
      entity: () => Emails,
      pivotTable: 'sender_emails',
      pivotEntity: () => SenderEmails,
      joinColumn: 'sender_id',
      inverseJoinColumn: 'email_id',
    },
  },
});
",
]
`;

exports[`4898 nullable_fk_example scalarPropertiesForRelations=smart bidirectionalRelations=false identifiedReferences=true entitySchema=false: dump 1`] = `
[
  "import { Entity, ManyToOne, OptionalProps, PrimaryKey, PrimaryKeyProp, Property, Ref } from '@mikro-orm/core';
import { RecepientEmails } from './RecepientEmails';
import { SenderEmails } from './SenderEmails';

@Entity()
export class EmailSendingLogs {

  [PrimaryKeyProp]?: 'logId';

  [OptionalProps]?: 'createdAt';

  @PrimaryKey()
  logId!: number;

  @ManyToOne({ entity: () => RecepientEmails, ref: true, fieldNames: ['recepient_id', 'recepient_email_id'], index: 'fk_email_sending_logs_recepient_emails1_idx' })
  recepient!: Ref<RecepientEmails>;

  @ManyToOne({ entity: () => SenderEmails, ref: true, fieldNames: ['sender_id', 'sender_email_id'], index: 'fk_email_sending_logs_sender_emails1_idx' })
  sender!: Ref<SenderEmails>;

  @ManyToOne({ entity: () => SenderEmails, ref: true, fieldNames: ['sender_id', 'reply_email_id'], nullable: true, index: 'fk_email_sending_logs_sender_emails2_idx' })
  reply?: Ref<SenderEmails>;

  @Property({ length: 0, defaultRaw: \`CURRENT_TIMESTAMP\` })
  createdAt!: Date;

}
",
  "import { Entity, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';

@Entity()
export class Emails {

  [PrimaryKeyProp]?: 'emailId';

  @PrimaryKey()
  emailId!: number;

  @Unique({ name: 'address_UNIQUE' })
  @Property({ length: 255 })
  address!: string;

}
",
  "import { Entity, ManyToOne, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Emails } from './Emails';
import { Recepients } from './Recepients';

@Entity()
export class RecepientEmails {

  [PrimaryKeyProp]?: ['recepient', 'email'];

  @ManyToOne({ entity: () => Recepients, ref: true, fieldName: 'recepient_id', primary: true })
  recepient!: Ref<Recepients>;

  @ManyToOne({ entity: () => Emails, ref: true, fieldName: 'email_id', primary: true, index: 'fk_recepient_emails_emails1_idx' })
  email!: Ref<Emails>;

}
",
  "import { Collection, Entity, ManyToMany, PrimaryKey, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Emails } from './Emails';
import { RecepientEmails } from './RecepientEmails';

@Entity()
export class Recepients {

  [PrimaryKeyProp]?: 'recepientId';

  @PrimaryKey()
  recepientId!: number;

  @Property({ length: 255 })
  name!: string;

  @ManyToMany({ entity: () => Emails, pivotTable: 'recepient_emails', pivotEntity: () => RecepientEmails, joinColumn: 'recepient_id', inverseJoinColumn: 'email_id' })
  recepientEmails = new Collection<Emails>(this);

}
",
  "import { Entity, ManyToOne, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Emails } from './Emails';
import { Senders } from './Senders';

@Entity()
export class SenderEmails {

  [PrimaryKeyProp]?: ['sender', 'email'];

  @ManyToOne({ entity: () => Senders, ref: true, fieldName: 'sender_id', primary: true })
  sender!: Ref<Senders>;

  @ManyToOne({ entity: () => Emails, ref: true, fieldName: 'email_id', primary: true, index: 'fk_sender_emails_emails1_idx' })
  email!: Ref<Emails>;

}
",
  "import { Collection, Entity, ManyToMany, PrimaryKey, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Emails } from './Emails';
import { SenderEmails } from './SenderEmails';

@Entity()
export class Senders {

  [PrimaryKeyProp]?: 'senderId';

  @PrimaryKey()
  senderId!: number;

  @Property({ length: 255 })
  name!: string;

  @ManyToMany({ entity: () => Emails, pivotTable: 'sender_emails', pivotEntity: () => SenderEmails, joinColumn: 'sender_id', inverseJoinColumn: 'email_id' })
  senderEmails = new Collection<Emails>(this);

}
",
]
`;

exports[`4898 nullable_fk_example scalarPropertiesForRelations=smart bidirectionalRelations=false identifiedReferences=true entitySchema=true: dump 1`] = `
[
  "import { EntitySchema, OptionalProps, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { RecepientEmails } from './RecepientEmails';
import { SenderEmails } from './SenderEmails';

export class EmailSendingLogs {
  [PrimaryKeyProp]?: 'logId';
  [OptionalProps]?: 'createdAt';
  logId!: number;
  recepient!: Ref<RecepientEmails>;
  sender!: Ref<SenderEmails>;
  reply?: Ref<SenderEmails>;
  createdAt!: Date;
}

export const EmailSendingLogsSchema = new EntitySchema({
  class: EmailSendingLogs,
  properties: {
    logId: { primary: true, type: 'number' },
    recepient: {
      kind: 'm:1',
      entity: () => RecepientEmails,
      ref: true,
      fieldNames: [
        'recepient_id',
        'recepient_email_id'
      ],
      index: 'fk_email_sending_logs_recepient_emails1_idx',
    },
    sender: {
      kind: 'm:1',
      entity: () => SenderEmails,
      ref: true,
      fieldNames: [
        'sender_id',
        'sender_email_id'
      ],
      index: 'fk_email_sending_logs_sender_emails1_idx',
    },
    reply: {
      kind: 'm:1',
      entity: () => SenderEmails,
      ref: true,
      fieldNames: [
        'sender_id',
        'reply_email_id'
      ],
      nullable: true,
      index: 'fk_email_sending_logs_sender_emails2_idx',
    },
    createdAt: { type: 'Date', length: 0, defaultRaw: \`CURRENT_TIMESTAMP\` },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Emails {
  [PrimaryKeyProp]?: 'emailId';
  emailId!: number;
  address!: string;
}

export const EmailsSchema = new EntitySchema({
  class: Emails,
  properties: {
    emailId: { primary: true, type: 'number' },
    address: { type: 'string', length: 255, unique: 'address_UNIQUE' },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Emails } from './Emails';
import { Recepients } from './Recepients';

export class RecepientEmails {
  [PrimaryKeyProp]?: ['recepient', 'email'];
  recepient!: Ref<Recepients>;
  email!: Ref<Emails>;
}

export const RecepientEmailsSchema = new EntitySchema({
  class: RecepientEmails,
  properties: {
    recepient: {
      primary: true,
      kind: 'm:1',
      entity: () => Recepients,
      ref: true,
      fieldName: 'recepient_id',
    },
    email: {
      primary: true,
      kind: 'm:1',
      entity: () => Emails,
      ref: true,
      fieldName: 'email_id',
      index: 'fk_recepient_emails_emails1_idx',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Emails } from './Emails';

export class Recepients {
  [PrimaryKeyProp]?: 'recepientId';
  recepientId!: number;
  name!: string;
  recepientEmails = new Collection<Emails>(this);
}

export const RecepientsSchema = new EntitySchema({
  class: Recepients,
  properties: {
    recepientId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255 },
    recepientEmails: {
      kind: 'm:n',
      entity: () => Emails,
      pivotTable: 'recepient_emails',
      pivotEntity: () => RecepientEmails,
      joinColumn: 'recepient_id',
      inverseJoinColumn: 'email_id',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Emails } from './Emails';
import { Senders } from './Senders';

export class SenderEmails {
  [PrimaryKeyProp]?: ['sender', 'email'];
  sender!: Ref<Senders>;
  email!: Ref<Emails>;
}

export const SenderEmailsSchema = new EntitySchema({
  class: SenderEmails,
  properties: {
    sender: {
      primary: true,
      kind: 'm:1',
      entity: () => Senders,
      ref: true,
      fieldName: 'sender_id',
    },
    email: {
      primary: true,
      kind: 'm:1',
      entity: () => Emails,
      ref: true,
      fieldName: 'email_id',
      index: 'fk_sender_emails_emails1_idx',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Emails } from './Emails';

export class Senders {
  [PrimaryKeyProp]?: 'senderId';
  senderId!: number;
  name!: string;
  senderEmails = new Collection<Emails>(this);
}

export const SendersSchema = new EntitySchema({
  class: Senders,
  properties: {
    senderId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255 },
    senderEmails: {
      kind: 'm:n',
      entity: () => Emails,
      pivotTable: 'sender_emails',
      pivotEntity: () => SenderEmails,
      joinColumn: 'sender_id',
      inverseJoinColumn: 'email_id',
    },
  },
});
",
]
`;

exports[`4898 nullable_fk_example scalarPropertiesForRelations=smart bidirectionalRelations=true identifiedReferences=false entitySchema=false: dump 1`] = `
[
  "import { Entity, ManyToOne, OptionalProps, PrimaryKey, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { RecepientEmails } from './RecepientEmails';
import { SenderEmails } from './SenderEmails';

@Entity()
export class EmailSendingLogs {

  [PrimaryKeyProp]?: 'logId';

  [OptionalProps]?: 'createdAt';

  @PrimaryKey()
  logId!: number;

  @ManyToOne({ entity: () => RecepientEmails, fieldNames: ['recepient_id', 'recepient_email_id'], index: 'fk_email_sending_logs_recepient_emails1_idx' })
  recepient!: RecepientEmails;

  @ManyToOne({ entity: () => SenderEmails, fieldNames: ['sender_id', 'sender_email_id'], index: 'fk_email_sending_logs_sender_emails1_idx' })
  sender!: SenderEmails;

  @ManyToOne({ entity: () => SenderEmails, fieldNames: ['sender_id', 'reply_email_id'], nullable: true, index: 'fk_email_sending_logs_sender_emails2_idx' })
  reply?: SenderEmails;

  @Property({ length: 0, defaultRaw: \`CURRENT_TIMESTAMP\` })
  createdAt!: Date;

}
",
  "import { Collection, Entity, ManyToMany, OneToMany, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { Recepients } from './Recepients';
import { SenderEmails } from './SenderEmails';
import { Senders } from './Senders';

@Entity()
export class Emails {

  [PrimaryKeyProp]?: 'emailId';

  @PrimaryKey()
  emailId!: number;

  @Unique({ name: 'address_UNIQUE' })
  @Property({ length: 255 })
  address!: string;

  @OneToMany({ entity: () => SenderEmails, mappedBy: 'email' })
  emailInverse = new Collection<SenderEmails>(this);

  @ManyToMany({ entity: () => Recepients, mappedBy: 'recepientEmails' })
  recepientEmailsInverse = new Collection<Recepients>(this);

  @ManyToMany({ entity: () => Senders, mappedBy: 'senderEmails' })
  senderEmailsInverse = new Collection<Senders>(this);

}
",
  "import { Collection, Entity, ManyToOne, OneToMany, PrimaryKeyProp } from '@mikro-orm/core';
import { EmailSendingLogs } from './EmailSendingLogs';
import { Emails } from './Emails';
import { Recepients } from './Recepients';

@Entity()
export class RecepientEmails {

  [PrimaryKeyProp]?: ['recepient', 'email'];

  @ManyToOne({ entity: () => Recepients, fieldName: 'recepient_id', primary: true })
  recepient!: Recepients;

  @ManyToOne({ entity: () => Emails, fieldName: 'email_id', primary: true, index: 'fk_recepient_emails_emails1_idx' })
  email!: Emails;

  @OneToMany({ entity: () => EmailSendingLogs, mappedBy: 'recepient' })
  recepientInverse = new Collection<EmailSendingLogs>(this);

}
",
  "import { Collection, Entity, ManyToMany, OneToMany, PrimaryKey, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Emails } from './Emails';
import { RecepientEmails } from './RecepientEmails';

@Entity()
export class Recepients {

  [PrimaryKeyProp]?: 'recepientId';

  @PrimaryKey()
  recepientId!: number;

  @Property({ length: 255 })
  name!: string;

  @ManyToMany({ entity: () => Emails, pivotTable: 'recepient_emails', pivotEntity: () => RecepientEmails, joinColumn: 'recepient_id', inverseJoinColumn: 'email_id' })
  recepientEmails = new Collection<Emails>(this);

  @OneToMany({ entity: () => RecepientEmails, mappedBy: 'recepient' })
  recepientInverse = new Collection<RecepientEmails>(this);

}
",
  "import { Collection, Entity, ManyToOne, OneToMany, PrimaryKeyProp } from '@mikro-orm/core';
import { EmailSendingLogs } from './EmailSendingLogs';
import { Emails } from './Emails';
import { Senders } from './Senders';

@Entity()
export class SenderEmails {

  [PrimaryKeyProp]?: ['sender', 'email'];

  @ManyToOne({ entity: () => Senders, fieldName: 'sender_id', primary: true })
  sender!: Senders;

  @ManyToOne({ entity: () => Emails, fieldName: 'email_id', primary: true, index: 'fk_sender_emails_emails1_idx' })
  email!: Emails;

  @OneToMany({ entity: () => EmailSendingLogs, mappedBy: 'sender' })
  senderInverse = new Collection<EmailSendingLogs>(this);

  @OneToMany({ entity: () => EmailSendingLogs, mappedBy: 'reply' })
  replyInverse = new Collection<EmailSendingLogs>(this);

}
",
  "import { Collection, Entity, ManyToMany, OneToMany, PrimaryKey, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Emails } from './Emails';
import { SenderEmails } from './SenderEmails';

@Entity()
export class Senders {

  [PrimaryKeyProp]?: 'senderId';

  @PrimaryKey()
  senderId!: number;

  @Property({ length: 255 })
  name!: string;

  @ManyToMany({ entity: () => Emails, pivotTable: 'sender_emails', pivotEntity: () => SenderEmails, joinColumn: 'sender_id', inverseJoinColumn: 'email_id' })
  senderEmails = new Collection<Emails>(this);

  @OneToMany({ entity: () => SenderEmails, mappedBy: 'sender' })
  senderInverse = new Collection<SenderEmails>(this);

}
",
]
`;

exports[`4898 nullable_fk_example scalarPropertiesForRelations=smart bidirectionalRelations=true identifiedReferences=false entitySchema=true: dump 1`] = `
[
  "import { EntitySchema, OptionalProps, PrimaryKeyProp } from '@mikro-orm/core';

export class EmailSendingLogs {
  [PrimaryKeyProp]?: 'logId';
  [OptionalProps]?: 'createdAt';
  logId!: number;
  recepient!: RecepientEmails;
  sender!: SenderEmails;
  reply?: SenderEmails;
  createdAt!: Date;
}

export const EmailSendingLogsSchema = new EntitySchema({
  class: EmailSendingLogs,
  properties: {
    logId: { primary: true, type: 'number' },
    recepient: {
      kind: 'm:1',
      entity: () => RecepientEmails,
      fieldNames: [
        'recepient_id',
        'recepient_email_id'
      ],
      index: 'fk_email_sending_logs_recepient_emails1_idx',
    },
    sender: {
      kind: 'm:1',
      entity: () => SenderEmails,
      fieldNames: [
        'sender_id',
        'sender_email_id'
      ],
      index: 'fk_email_sending_logs_sender_emails1_idx',
    },
    reply: {
      kind: 'm:1',
      entity: () => SenderEmails,
      fieldNames: [
        'sender_id',
        'reply_email_id'
      ],
      nullable: true,
      index: 'fk_email_sending_logs_sender_emails2_idx',
    },
    createdAt: { type: 'Date', length: 0, defaultRaw: \`CURRENT_TIMESTAMP\` },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Recepients } from './Recepients';
import { SenderEmails } from './SenderEmails';
import { Senders } from './Senders';

export class Emails {
  [PrimaryKeyProp]?: 'emailId';
  emailId!: number;
  address!: string;
  emailInverse = new Collection<SenderEmails>(this);
  recepientEmailsInverse = new Collection<Recepients>(this);
  senderEmailsInverse = new Collection<Senders>(this);
}

export const EmailsSchema = new EntitySchema({
  class: Emails,
  properties: {
    emailId: { primary: true, type: 'number' },
    address: { type: 'string', length: 255, unique: 'address_UNIQUE' },
    emailInverse: { kind: '1:m', entity: () => SenderEmails, mappedBy: 'email' },
    recepientEmailsInverse: { kind: 'm:n', entity: () => Recepients, mappedBy: 'recepientEmails' },
    senderEmailsInverse: { kind: 'm:n', entity: () => Senders, mappedBy: 'senderEmails' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { EmailSendingLogs } from './EmailSendingLogs';

export class RecepientEmails {
  [PrimaryKeyProp]?: ['recepient', 'email'];
  recepient!: Recepients;
  email!: Emails;
  recepientInverse = new Collection<EmailSendingLogs>(this);
}

export const RecepientEmailsSchema = new EntitySchema({
  class: RecepientEmails,
  properties: {
    recepient: {
      primary: true,
      kind: 'm:1',
      entity: () => Recepients,
      fieldName: 'recepient_id',
    },
    email: {
      primary: true,
      kind: 'm:1',
      entity: () => Emails,
      fieldName: 'email_id',
      index: 'fk_recepient_emails_emails1_idx',
    },
    recepientInverse: { kind: '1:m', entity: () => EmailSendingLogs, mappedBy: 'recepient' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Emails } from './Emails';
import { RecepientEmails } from './RecepientEmails';

export class Recepients {
  [PrimaryKeyProp]?: 'recepientId';
  recepientId!: number;
  name!: string;
  recepientEmails = new Collection<Emails>(this);
  recepientInverse = new Collection<RecepientEmails>(this);
}

export const RecepientsSchema = new EntitySchema({
  class: Recepients,
  properties: {
    recepientId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255 },
    recepientEmails: {
      kind: 'm:n',
      entity: () => Emails,
      pivotTable: 'recepient_emails',
      pivotEntity: () => RecepientEmails,
      joinColumn: 'recepient_id',
      inverseJoinColumn: 'email_id',
    },
    recepientInverse: { kind: '1:m', entity: () => RecepientEmails, mappedBy: 'recepient' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { EmailSendingLogs } from './EmailSendingLogs';

export class SenderEmails {
  [PrimaryKeyProp]?: ['sender', 'email'];
  sender!: Senders;
  email!: Emails;
  senderInverse = new Collection<EmailSendingLogs>(this);
  replyInverse = new Collection<EmailSendingLogs>(this);
}

export const SenderEmailsSchema = new EntitySchema({
  class: SenderEmails,
  properties: {
    sender: { primary: true, kind: 'm:1', entity: () => Senders, fieldName: 'sender_id' },
    email: {
      primary: true,
      kind: 'm:1',
      entity: () => Emails,
      fieldName: 'email_id',
      index: 'fk_sender_emails_emails1_idx',
    },
    senderInverse: { kind: '1:m', entity: () => EmailSendingLogs, mappedBy: 'sender' },
    replyInverse: { kind: '1:m', entity: () => EmailSendingLogs, mappedBy: 'reply' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Emails } from './Emails';
import { SenderEmails } from './SenderEmails';

export class Senders {
  [PrimaryKeyProp]?: 'senderId';
  senderId!: number;
  name!: string;
  senderEmails = new Collection<Emails>(this);
  senderInverse = new Collection<SenderEmails>(this);
}

export const SendersSchema = new EntitySchema({
  class: Senders,
  properties: {
    senderId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255 },
    senderEmails: {
      kind: 'm:n',
      entity: () => Emails,
      pivotTable: 'sender_emails',
      pivotEntity: () => SenderEmails,
      joinColumn: 'sender_id',
      inverseJoinColumn: 'email_id',
    },
    senderInverse: { kind: '1:m', entity: () => SenderEmails, mappedBy: 'sender' },
  },
});
",
]
`;

exports[`4898 nullable_fk_example scalarPropertiesForRelations=smart bidirectionalRelations=true identifiedReferences=true entitySchema=false: dump 1`] = `
[
  "import { Entity, ManyToOne, OptionalProps, PrimaryKey, PrimaryKeyProp, Property, Ref } from '@mikro-orm/core';
import { RecepientEmails } from './RecepientEmails';
import { SenderEmails } from './SenderEmails';

@Entity()
export class EmailSendingLogs {

  [PrimaryKeyProp]?: 'logId';

  [OptionalProps]?: 'createdAt';

  @PrimaryKey()
  logId!: number;

  @ManyToOne({ entity: () => RecepientEmails, ref: true, fieldNames: ['recepient_id', 'recepient_email_id'], index: 'fk_email_sending_logs_recepient_emails1_idx' })
  recepient!: Ref<RecepientEmails>;

  @ManyToOne({ entity: () => SenderEmails, ref: true, fieldNames: ['sender_id', 'sender_email_id'], index: 'fk_email_sending_logs_sender_emails1_idx' })
  sender!: Ref<SenderEmails>;

  @ManyToOne({ entity: () => SenderEmails, ref: true, fieldNames: ['sender_id', 'reply_email_id'], nullable: true, index: 'fk_email_sending_logs_sender_emails2_idx' })
  reply?: Ref<SenderEmails>;

  @Property({ length: 0, defaultRaw: \`CURRENT_TIMESTAMP\` })
  createdAt!: Date;

}
",
  "import { Collection, Entity, ManyToMany, OneToMany, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { Recepients } from './Recepients';
import { SenderEmails } from './SenderEmails';
import { Senders } from './Senders';

@Entity()
export class Emails {

  [PrimaryKeyProp]?: 'emailId';

  @PrimaryKey()
  emailId!: number;

  @Unique({ name: 'address_UNIQUE' })
  @Property({ length: 255 })
  address!: string;

  @OneToMany({ entity: () => SenderEmails, mappedBy: 'email' })
  emailInverse = new Collection<SenderEmails>(this);

  @ManyToMany({ entity: () => Recepients, mappedBy: 'recepientEmails' })
  recepientEmailsInverse = new Collection<Recepients>(this);

  @ManyToMany({ entity: () => Senders, mappedBy: 'senderEmails' })
  senderEmailsInverse = new Collection<Senders>(this);

}
",
  "import { Collection, Entity, ManyToOne, OneToMany, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { EmailSendingLogs } from './EmailSendingLogs';
import { Emails } from './Emails';
import { Recepients } from './Recepients';

@Entity()
export class RecepientEmails {

  [PrimaryKeyProp]?: ['recepient', 'email'];

  @ManyToOne({ entity: () => Recepients, ref: true, fieldName: 'recepient_id', primary: true })
  recepient!: Ref<Recepients>;

  @ManyToOne({ entity: () => Emails, ref: true, fieldName: 'email_id', primary: true, index: 'fk_recepient_emails_emails1_idx' })
  email!: Ref<Emails>;

  @OneToMany({ entity: () => EmailSendingLogs, mappedBy: 'recepient' })
  recepientInverse = new Collection<EmailSendingLogs>(this);

}
",
  "import { Collection, Entity, ManyToMany, OneToMany, PrimaryKey, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Emails } from './Emails';
import { RecepientEmails } from './RecepientEmails';

@Entity()
export class Recepients {

  [PrimaryKeyProp]?: 'recepientId';

  @PrimaryKey()
  recepientId!: number;

  @Property({ length: 255 })
  name!: string;

  @ManyToMany({ entity: () => Emails, pivotTable: 'recepient_emails', pivotEntity: () => RecepientEmails, joinColumn: 'recepient_id', inverseJoinColumn: 'email_id' })
  recepientEmails = new Collection<Emails>(this);

  @OneToMany({ entity: () => RecepientEmails, mappedBy: 'recepient' })
  recepientInverse = new Collection<RecepientEmails>(this);

}
",
  "import { Collection, Entity, ManyToOne, OneToMany, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { EmailSendingLogs } from './EmailSendingLogs';
import { Emails } from './Emails';
import { Senders } from './Senders';

@Entity()
export class SenderEmails {

  [PrimaryKeyProp]?: ['sender', 'email'];

  @ManyToOne({ entity: () => Senders, ref: true, fieldName: 'sender_id', primary: true })
  sender!: Ref<Senders>;

  @ManyToOne({ entity: () => Emails, ref: true, fieldName: 'email_id', primary: true, index: 'fk_sender_emails_emails1_idx' })
  email!: Ref<Emails>;

  @OneToMany({ entity: () => EmailSendingLogs, mappedBy: 'sender' })
  senderInverse = new Collection<EmailSendingLogs>(this);

  @OneToMany({ entity: () => EmailSendingLogs, mappedBy: 'reply' })
  replyInverse = new Collection<EmailSendingLogs>(this);

}
",
  "import { Collection, Entity, ManyToMany, OneToMany, PrimaryKey, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Emails } from './Emails';
import { SenderEmails } from './SenderEmails';

@Entity()
export class Senders {

  [PrimaryKeyProp]?: 'senderId';

  @PrimaryKey()
  senderId!: number;

  @Property({ length: 255 })
  name!: string;

  @ManyToMany({ entity: () => Emails, pivotTable: 'sender_emails', pivotEntity: () => SenderEmails, joinColumn: 'sender_id', inverseJoinColumn: 'email_id' })
  senderEmails = new Collection<Emails>(this);

  @OneToMany({ entity: () => SenderEmails, mappedBy: 'sender' })
  senderInverse = new Collection<SenderEmails>(this);

}
",
]
`;

exports[`4898 nullable_fk_example scalarPropertiesForRelations=smart bidirectionalRelations=true identifiedReferences=true entitySchema=true: dump 1`] = `
[
  "import { EntitySchema, OptionalProps, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { RecepientEmails } from './RecepientEmails';
import { SenderEmails } from './SenderEmails';

export class EmailSendingLogs {
  [PrimaryKeyProp]?: 'logId';
  [OptionalProps]?: 'createdAt';
  logId!: number;
  recepient!: Ref<RecepientEmails>;
  sender!: Ref<SenderEmails>;
  reply?: Ref<SenderEmails>;
  createdAt!: Date;
}

export const EmailSendingLogsSchema = new EntitySchema({
  class: EmailSendingLogs,
  properties: {
    logId: { primary: true, type: 'number' },
    recepient: {
      kind: 'm:1',
      entity: () => RecepientEmails,
      ref: true,
      fieldNames: [
        'recepient_id',
        'recepient_email_id'
      ],
      index: 'fk_email_sending_logs_recepient_emails1_idx',
    },
    sender: {
      kind: 'm:1',
      entity: () => SenderEmails,
      ref: true,
      fieldNames: [
        'sender_id',
        'sender_email_id'
      ],
      index: 'fk_email_sending_logs_sender_emails1_idx',
    },
    reply: {
      kind: 'm:1',
      entity: () => SenderEmails,
      ref: true,
      fieldNames: [
        'sender_id',
        'reply_email_id'
      ],
      nullable: true,
      index: 'fk_email_sending_logs_sender_emails2_idx',
    },
    createdAt: { type: 'Date', length: 0, defaultRaw: \`CURRENT_TIMESTAMP\` },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Recepients } from './Recepients';
import { SenderEmails } from './SenderEmails';
import { Senders } from './Senders';

export class Emails {
  [PrimaryKeyProp]?: 'emailId';
  emailId!: number;
  address!: string;
  emailInverse = new Collection<SenderEmails>(this);
  recepientEmailsInverse = new Collection<Recepients>(this);
  senderEmailsInverse = new Collection<Senders>(this);
}

export const EmailsSchema = new EntitySchema({
  class: Emails,
  properties: {
    emailId: { primary: true, type: 'number' },
    address: { type: 'string', length: 255, unique: 'address_UNIQUE' },
    emailInverse: { kind: '1:m', entity: () => SenderEmails, mappedBy: 'email' },
    recepientEmailsInverse: { kind: 'm:n', entity: () => Recepients, mappedBy: 'recepientEmails' },
    senderEmailsInverse: { kind: 'm:n', entity: () => Senders, mappedBy: 'senderEmails' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { EmailSendingLogs } from './EmailSendingLogs';
import { Emails } from './Emails';
import { Recepients } from './Recepients';

export class RecepientEmails {
  [PrimaryKeyProp]?: ['recepient', 'email'];
  recepient!: Ref<Recepients>;
  email!: Ref<Emails>;
  recepientInverse = new Collection<EmailSendingLogs>(this);
}

export const RecepientEmailsSchema = new EntitySchema({
  class: RecepientEmails,
  properties: {
    recepient: {
      primary: true,
      kind: 'm:1',
      entity: () => Recepients,
      ref: true,
      fieldName: 'recepient_id',
    },
    email: {
      primary: true,
      kind: 'm:1',
      entity: () => Emails,
      ref: true,
      fieldName: 'email_id',
      index: 'fk_recepient_emails_emails1_idx',
    },
    recepientInverse: { kind: '1:m', entity: () => EmailSendingLogs, mappedBy: 'recepient' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Emails } from './Emails';
import { RecepientEmails } from './RecepientEmails';

export class Recepients {
  [PrimaryKeyProp]?: 'recepientId';
  recepientId!: number;
  name!: string;
  recepientEmails = new Collection<Emails>(this);
  recepientInverse = new Collection<RecepientEmails>(this);
}

export const RecepientsSchema = new EntitySchema({
  class: Recepients,
  properties: {
    recepientId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255 },
    recepientEmails: {
      kind: 'm:n',
      entity: () => Emails,
      pivotTable: 'recepient_emails',
      pivotEntity: () => RecepientEmails,
      joinColumn: 'recepient_id',
      inverseJoinColumn: 'email_id',
    },
    recepientInverse: { kind: '1:m', entity: () => RecepientEmails, mappedBy: 'recepient' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { EmailSendingLogs } from './EmailSendingLogs';
import { Emails } from './Emails';
import { Senders } from './Senders';

export class SenderEmails {
  [PrimaryKeyProp]?: ['sender', 'email'];
  sender!: Ref<Senders>;
  email!: Ref<Emails>;
  senderInverse = new Collection<EmailSendingLogs>(this);
  replyInverse = new Collection<EmailSendingLogs>(this);
}

export const SenderEmailsSchema = new EntitySchema({
  class: SenderEmails,
  properties: {
    sender: {
      primary: true,
      kind: 'm:1',
      entity: () => Senders,
      ref: true,
      fieldName: 'sender_id',
    },
    email: {
      primary: true,
      kind: 'm:1',
      entity: () => Emails,
      ref: true,
      fieldName: 'email_id',
      index: 'fk_sender_emails_emails1_idx',
    },
    senderInverse: { kind: '1:m', entity: () => EmailSendingLogs, mappedBy: 'sender' },
    replyInverse: { kind: '1:m', entity: () => EmailSendingLogs, mappedBy: 'reply' },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { Emails } from './Emails';
import { SenderEmails } from './SenderEmails';

export class Senders {
  [PrimaryKeyProp]?: 'senderId';
  senderId!: number;
  name!: string;
  senderEmails = new Collection<Emails>(this);
  senderInverse = new Collection<SenderEmails>(this);
}

export const SendersSchema = new EntitySchema({
  class: Senders,
  properties: {
    senderId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255 },
    senderEmails: {
      kind: 'm:n',
      entity: () => Emails,
      pivotTable: 'sender_emails',
      pivotEntity: () => SenderEmails,
      joinColumn: 'sender_id',
      inverseJoinColumn: 'email_id',
    },
    senderInverse: { kind: '1:m', entity: () => SenderEmails, mappedBy: 'sender' },
  },
});
",
]
`;

exports[`4898 overlap_fk_example scalarPropertiesForRelations=always bidirectionalRelations=false identifiedReferences=false entitySchema=false: dump 1`] = `
[
  "import { Entity, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';

@Entity()
export class Countries {

  [PrimaryKeyProp]?: 'code';

  @PrimaryKey({ columnType: 'char(2)' })
  code!: unknown;

}
",
  "import { Entity, Index, ManyToOne, OptionalProps, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Products } from './Products';

@Entity()
export class ProductCountryMap {

  [PrimaryKeyProp]?: ['product', 'countries'];

  [OptionalProps]?: 'isCurrentlyAllowed';

  @Property({ columnType: 'char(2)', persist: false })
  country!: unknown;

  @ManyToOne({ entity: () => Products, fieldName: 'product_id', primary: true, index: 'fk_product_country_map_products1' })
  product!: Products;

  @Index({ name: 'fk_product_country_map_products1' })
  @Property({ persist: false })
  productId!: number;

  @Property({ default: false })
  isCurrentlyAllowed: boolean = false;

  @ManyToOne({ entity: () => Countries, fieldName: 'country', primary: true })
  countries!: Countries;

}
",
  "import { Entity, Index, ManyToOne, OptionalProps, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Products } from './Products';
import { Sellers } from './Sellers';

@Entity()
export class ProductSellers {

  [PrimaryKeyProp]?: ['seller', 'product'];

  [OptionalProps]?: 'isCurrentlyAllowed';

  @ManyToOne({ entity: () => Sellers, fieldName: 'seller_id', updateRule: 'cascade', deleteRule: 'cascade', primary: true })
  seller!: Sellers;

  @Property({ persist: false })
  sellerId!: number;

  @ManyToOne({ entity: () => Products, fieldName: 'product_id', updateRule: 'cascade', deleteRule: 'cascade', primary: true, index: 'fk_product_sellers_products1' })
  product!: Products;

  @Index({ name: 'fk_product_sellers_products1' })
  @Property({ persist: false })
  productId!: number;

  @Property({ default: false })
  isCurrentlyAllowed: boolean = false;

}
",
  "import { Entity, OptionalProps, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';

@Entity()
export class Products {

  [PrimaryKeyProp]?: 'productId';

  [OptionalProps]?: 'currentQuantity';

  @PrimaryKey()
  productId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property({ length: 255 })
  name!: string;

  @Property({ columnType: 'numeric(10,2)' })
  currentPrice!: string;

  @Property({ default: 0 })
  currentQuantity: number = 0;

}
",
  "import { Entity, Index, ManyToOne, OptionalProps, PrimaryKey, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { ProductCountryMap } from './ProductCountryMap';
import { ProductSellers } from './ProductSellers';

@Entity()
export class Sales {

  [PrimaryKeyProp]?: 'saleId';

  [OptionalProps]?: 'quantitySold';

  @PrimaryKey()
  saleId!: number;

  @Property({ columnType: 'char(2)', persist: false })
  country!: unknown;

  @ManyToOne({ entity: () => ProductSellers, fieldNames: ['seller_id', 'product_id'], updateRule: 'cascade', index: 'fk_sales_product_sellers1_idx' })
  seller!: ProductSellers;

  @Property({ persist: false })
  sellerId!: number;

  @Index({ name: 'product_id_idx' })
  @Property({ persist: false })
  productId!: number;

  @Property({ columnType: 'numeric(10,2)' })
  singularPrice!: string;

  @Property({ default: 1 })
  quantitySold: number = 1;

  @ManyToOne({ entity: () => ProductCountryMap, fieldNames: ['country', 'product_id'], updateRule: 'cascade', index: 'fk_sales_product_country_map1_idx' })
  productCountryMap!: ProductCountryMap;

}
",
  "import { Entity, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';

@Entity()
export class Sellers {

  [PrimaryKeyProp]?: 'sellerId';

  @PrimaryKey()
  sellerId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property({ length: 255 })
  name!: string;

}
",
]
`;

exports[`4898 overlap_fk_example scalarPropertiesForRelations=always bidirectionalRelations=false identifiedReferences=false entitySchema=true: dump 1`] = `
[
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Countries {
  [PrimaryKeyProp]?: 'code';
  code!: unknown;
}

export const CountriesSchema = new EntitySchema({
  class: Countries,
  properties: {
    code: { primary: true, type: 'unknown', columnType: 'char(2)' },
  },
});
",
  "import { EntitySchema, OptionalProps, PrimaryKeyProp } from '@mikro-orm/core';

export class ProductCountryMap {
  [PrimaryKeyProp]?: ['product', 'countries'];
  [OptionalProps]?: 'isCurrentlyAllowed';
  country!: unknown;
  product!: Products;
  productId!: number;
  isCurrentlyAllowed: boolean = false;
  countries!: Countries;
}

export const ProductCountryMapSchema = new EntitySchema({
  class: ProductCountryMap,
  properties: {
    country: { type: 'unknown', columnType: 'char(2)', persist: false },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => Products,
      fieldName: 'product_id',
      index: 'fk_product_country_map_products1',
    },
    productId: { type: 'number', persist: false, index: 'fk_product_country_map_products1' },
    isCurrentlyAllowed: { type: 'boolean', default: false },
    countries: { primary: true, kind: 'm:1', entity: () => Countries, fieldName: 'country' },
  },
});
",
  "import { EntitySchema, OptionalProps, PrimaryKeyProp } from '@mikro-orm/core';

export class ProductSellers {
  [PrimaryKeyProp]?: ['seller', 'product'];
  [OptionalProps]?: 'isCurrentlyAllowed';
  seller!: Sellers;
  sellerId!: number;
  product!: Products;
  productId!: number;
  isCurrentlyAllowed: boolean = false;
}

export const ProductSellersSchema = new EntitySchema({
  class: ProductSellers,
  properties: {
    seller: {
      primary: true,
      kind: 'm:1',
      entity: () => Sellers,
      fieldName: 'seller_id',
      updateRule: 'cascade',
      deleteRule: 'cascade',
    },
    sellerId: { type: 'number', persist: false },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => Products,
      fieldName: 'product_id',
      updateRule: 'cascade',
      deleteRule: 'cascade',
      index: 'fk_product_sellers_products1',
    },
    productId: { type: 'number', persist: false, index: 'fk_product_sellers_products1' },
    isCurrentlyAllowed: { type: 'boolean', default: false },
  },
});
",
  "import { EntitySchema, OptionalProps, PrimaryKeyProp } from '@mikro-orm/core';

export class Products {
  [PrimaryKeyProp]?: 'productId';
  [OptionalProps]?: 'currentQuantity';
  productId!: number;
  name!: string;
  currentPrice!: string;
  currentQuantity: number = 0;
}

export const ProductsSchema = new EntitySchema({
  class: Products,
  properties: {
    productId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255, unique: 'name_UNIQUE' },
    currentPrice: { type: 'string', columnType: 'numeric(10,2)' },
    currentQuantity: { type: 'number', default: 0 },
  },
});
",
  "import { EntitySchema, OptionalProps, PrimaryKeyProp } from '@mikro-orm/core';

export class Sales {
  [PrimaryKeyProp]?: 'saleId';
  [OptionalProps]?: 'quantitySold';
  saleId!: number;
  country!: unknown;
  seller!: ProductSellers;
  sellerId!: number;
  productId!: number;
  singularPrice!: string;
  quantitySold: number = 1;
  productCountryMap!: ProductCountryMap;
}

export const SalesSchema = new EntitySchema({
  class: Sales,
  properties: {
    saleId: { primary: true, type: 'number' },
    country: { type: 'unknown', columnType: 'char(2)', persist: false },
    seller: {
      kind: 'm:1',
      entity: () => ProductSellers,
      fieldNames: [
        'seller_id',
        'product_id'
      ],
      updateRule: 'cascade',
      index: 'fk_sales_product_sellers1_idx',
    },
    sellerId: { type: 'number', persist: false },
    productId: { type: 'number', persist: false, index: 'product_id_idx' },
    singularPrice: { type: 'string', columnType: 'numeric(10,2)' },
    quantitySold: { type: 'number', default: 1 },
    productCountryMap: {
      kind: 'm:1',
      entity: () => ProductCountryMap,
      fieldNames: [
        'country',
        'product_id'
      ],
      updateRule: 'cascade',
      index: 'fk_sales_product_country_map1_idx',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Sellers {
  [PrimaryKeyProp]?: 'sellerId';
  sellerId!: number;
  name!: string;
}

export const SellersSchema = new EntitySchema({
  class: Sellers,
  properties: {
    sellerId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255, unique: 'name_UNIQUE' },
  },
});
",
]
`;

exports[`4898 overlap_fk_example scalarPropertiesForRelations=always bidirectionalRelations=false identifiedReferences=true entitySchema=false: dump 1`] = `
[
  "import { Entity, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';

@Entity()
export class Countries {

  [PrimaryKeyProp]?: 'code';

  @PrimaryKey({ columnType: 'char(2)' })
  code!: unknown;

}
",
  "import { Entity, Index, ManyToOne, OptionalProps, PrimaryKeyProp, Property, Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Products } from './Products';

@Entity()
export class ProductCountryMap {

  [PrimaryKeyProp]?: ['product', 'countries'];

  [OptionalProps]?: 'isCurrentlyAllowed';

  @Property({ columnType: 'char(2)', persist: false })
  country!: unknown;

  @ManyToOne({ entity: () => Products, ref: true, fieldName: 'product_id', primary: true, index: 'fk_product_country_map_products1' })
  product!: Ref<Products>;

  @Index({ name: 'fk_product_country_map_products1' })
  @Property({ persist: false })
  productId!: number;

  @Property({ default: false })
  isCurrentlyAllowed: boolean = false;

  @ManyToOne({ entity: () => Countries, ref: true, fieldName: 'country', primary: true })
  countries!: Ref<Countries>;

}
",
  "import { Entity, Index, ManyToOne, OptionalProps, PrimaryKeyProp, Property, Ref } from '@mikro-orm/core';
import { Products } from './Products';
import { Sellers } from './Sellers';

@Entity()
export class ProductSellers {

  [PrimaryKeyProp]?: ['seller', 'product'];

  [OptionalProps]?: 'isCurrentlyAllowed';

  @ManyToOne({ entity: () => Sellers, ref: true, fieldName: 'seller_id', updateRule: 'cascade', deleteRule: 'cascade', primary: true })
  seller!: Ref<Sellers>;

  @Property({ persist: false })
  sellerId!: number;

  @ManyToOne({ entity: () => Products, ref: true, fieldName: 'product_id', updateRule: 'cascade', deleteRule: 'cascade', primary: true, index: 'fk_product_sellers_products1' })
  product!: Ref<Products>;

  @Index({ name: 'fk_product_sellers_products1' })
  @Property({ persist: false })
  productId!: number;

  @Property({ default: false })
  isCurrentlyAllowed: boolean = false;

}
",
  "import { Entity, OptionalProps, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';

@Entity()
export class Products {

  [PrimaryKeyProp]?: 'productId';

  [OptionalProps]?: 'currentQuantity';

  @PrimaryKey()
  productId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property({ length: 255 })
  name!: string;

  @Property({ columnType: 'numeric(10,2)' })
  currentPrice!: string;

  @Property({ default: 0 })
  currentQuantity: number = 0;

}
",
  "import { Entity, Index, ManyToOne, OptionalProps, PrimaryKey, PrimaryKeyProp, Property, Ref } from '@mikro-orm/core';
import { ProductCountryMap } from './ProductCountryMap';
import { ProductSellers } from './ProductSellers';

@Entity()
export class Sales {

  [PrimaryKeyProp]?: 'saleId';

  [OptionalProps]?: 'quantitySold';

  @PrimaryKey()
  saleId!: number;

  @Property({ columnType: 'char(2)', persist: false })
  country!: unknown;

  @ManyToOne({ entity: () => ProductSellers, ref: true, fieldNames: ['seller_id', 'product_id'], updateRule: 'cascade', index: 'fk_sales_product_sellers1_idx' })
  seller!: Ref<ProductSellers>;

  @Property({ persist: false })
  sellerId!: number;

  @Index({ name: 'product_id_idx' })
  @Property({ persist: false })
  productId!: number;

  @Property({ columnType: 'numeric(10,2)' })
  singularPrice!: string;

  @Property({ default: 1 })
  quantitySold: number = 1;

  @ManyToOne({ entity: () => ProductCountryMap, ref: true, fieldNames: ['country', 'product_id'], updateRule: 'cascade', index: 'fk_sales_product_country_map1_idx' })
  productCountryMap!: Ref<ProductCountryMap>;

}
",
  "import { Entity, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';

@Entity()
export class Sellers {

  [PrimaryKeyProp]?: 'sellerId';

  @PrimaryKey()
  sellerId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property({ length: 255 })
  name!: string;

}
",
]
`;

exports[`4898 overlap_fk_example scalarPropertiesForRelations=always bidirectionalRelations=false identifiedReferences=true entitySchema=true: dump 1`] = `
[
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Countries {
  [PrimaryKeyProp]?: 'code';
  code!: unknown;
}

export const CountriesSchema = new EntitySchema({
  class: Countries,
  properties: {
    code: { primary: true, type: 'unknown', columnType: 'char(2)' },
  },
});
",
  "import { EntitySchema, OptionalProps, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Products } from './Products';

export class ProductCountryMap {
  [PrimaryKeyProp]?: ['product', 'countries'];
  [OptionalProps]?: 'isCurrentlyAllowed';
  country!: unknown;
  product!: Ref<Products>;
  productId!: number;
  isCurrentlyAllowed: boolean = false;
  countries!: Ref<Countries>;
}

export const ProductCountryMapSchema = new EntitySchema({
  class: ProductCountryMap,
  properties: {
    country: { type: 'unknown', columnType: 'char(2)', persist: false },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => Products,
      ref: true,
      fieldName: 'product_id',
      index: 'fk_product_country_map_products1',
    },
    productId: { type: 'number', persist: false, index: 'fk_product_country_map_products1' },
    isCurrentlyAllowed: { type: 'boolean', default: false },
    countries: {
      primary: true,
      kind: 'm:1',
      entity: () => Countries,
      ref: true,
      fieldName: 'country',
    },
  },
});
",
  "import { EntitySchema, OptionalProps, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Products } from './Products';
import { Sellers } from './Sellers';

export class ProductSellers {
  [PrimaryKeyProp]?: ['seller', 'product'];
  [OptionalProps]?: 'isCurrentlyAllowed';
  seller!: Ref<Sellers>;
  sellerId!: number;
  product!: Ref<Products>;
  productId!: number;
  isCurrentlyAllowed: boolean = false;
}

export const ProductSellersSchema = new EntitySchema({
  class: ProductSellers,
  properties: {
    seller: {
      primary: true,
      kind: 'm:1',
      entity: () => Sellers,
      ref: true,
      fieldName: 'seller_id',
      updateRule: 'cascade',
      deleteRule: 'cascade',
    },
    sellerId: { type: 'number', persist: false },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => Products,
      ref: true,
      fieldName: 'product_id',
      updateRule: 'cascade',
      deleteRule: 'cascade',
      index: 'fk_product_sellers_products1',
    },
    productId: { type: 'number', persist: false, index: 'fk_product_sellers_products1' },
    isCurrentlyAllowed: { type: 'boolean', default: false },
  },
});
",
  "import { EntitySchema, OptionalProps, PrimaryKeyProp } from '@mikro-orm/core';

export class Products {
  [PrimaryKeyProp]?: 'productId';
  [OptionalProps]?: 'currentQuantity';
  productId!: number;
  name!: string;
  currentPrice!: string;
  currentQuantity: number = 0;
}

export const ProductsSchema = new EntitySchema({
  class: Products,
  properties: {
    productId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255, unique: 'name_UNIQUE' },
    currentPrice: { type: 'string', columnType: 'numeric(10,2)' },
    currentQuantity: { type: 'number', default: 0 },
  },
});
",
  "import { EntitySchema, OptionalProps, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { ProductCountryMap } from './ProductCountryMap';
import { ProductSellers } from './ProductSellers';

export class Sales {
  [PrimaryKeyProp]?: 'saleId';
  [OptionalProps]?: 'quantitySold';
  saleId!: number;
  country!: unknown;
  seller!: Ref<ProductSellers>;
  sellerId!: number;
  productId!: number;
  singularPrice!: string;
  quantitySold: number = 1;
  productCountryMap!: Ref<ProductCountryMap>;
}

export const SalesSchema = new EntitySchema({
  class: Sales,
  properties: {
    saleId: { primary: true, type: 'number' },
    country: { type: 'unknown', columnType: 'char(2)', persist: false },
    seller: {
      kind: 'm:1',
      entity: () => ProductSellers,
      ref: true,
      fieldNames: [
        'seller_id',
        'product_id'
      ],
      updateRule: 'cascade',
      index: 'fk_sales_product_sellers1_idx',
    },
    sellerId: { type: 'number', persist: false },
    productId: { type: 'number', persist: false, index: 'product_id_idx' },
    singularPrice: { type: 'string', columnType: 'numeric(10,2)' },
    quantitySold: { type: 'number', default: 1 },
    productCountryMap: {
      kind: 'm:1',
      entity: () => ProductCountryMap,
      ref: true,
      fieldNames: [
        'country',
        'product_id'
      ],
      updateRule: 'cascade',
      index: 'fk_sales_product_country_map1_idx',
    },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Sellers {
  [PrimaryKeyProp]?: 'sellerId';
  sellerId!: number;
  name!: string;
}

export const SellersSchema = new EntitySchema({
  class: Sellers,
  properties: {
    sellerId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255, unique: 'name_UNIQUE' },
  },
});
",
]
`;

exports[`4898 overlap_fk_example scalarPropertiesForRelations=always bidirectionalRelations=true identifiedReferences=false entitySchema=false: dump 1`] = `
[
  "import { Collection, Entity, OneToMany, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductCountryMap } from './ProductCountryMap';

@Entity()
export class Countries {

  [PrimaryKeyProp]?: 'code';

  @PrimaryKey({ columnType: 'char(2)' })
  code!: unknown;

  @OneToMany({ entity: () => ProductCountryMap, mappedBy: 'countries' })
  countriesInverse = new Collection<ProductCountryMap>(this);

}
",
  "import { Collection, Entity, Index, ManyToOne, OneToMany, OptionalProps, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Products } from './Products';
import { Sales } from './Sales';

@Entity()
export class ProductCountryMap {

  [PrimaryKeyProp]?: ['product', 'countries'];

  [OptionalProps]?: 'isCurrentlyAllowed';

  @Property({ columnType: 'char(2)', persist: false })
  country!: unknown;

  @ManyToOne({ entity: () => Products, fieldName: 'product_id', primary: true, index: 'fk_product_country_map_products1' })
  product!: Products;

  @Index({ name: 'fk_product_country_map_products1' })
  @Property({ persist: false })
  productId!: number;

  @Property({ default: false })
  isCurrentlyAllowed: boolean = false;

  @ManyToOne({ entity: () => Countries, fieldName: 'country', primary: true })
  countries!: Countries;

  @OneToMany({ entity: () => Sales, mappedBy: 'productCountryMap' })
  productCountryMapInverse = new Collection<Sales>(this);

}
",
  "import { Collection, Entity, Index, ManyToOne, OneToMany, OptionalProps, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Products } from './Products';
import { Sales } from './Sales';
import { Sellers } from './Sellers';

@Entity()
export class ProductSellers {

  [PrimaryKeyProp]?: ['seller', 'product'];

  [OptionalProps]?: 'isCurrentlyAllowed';

  @ManyToOne({ entity: () => Sellers, fieldName: 'seller_id', updateRule: 'cascade', deleteRule: 'cascade', primary: true })
  seller!: Sellers;

  @Property({ persist: false })
  sellerId!: number;

  @ManyToOne({ entity: () => Products, fieldName: 'product_id', updateRule: 'cascade', deleteRule: 'cascade', primary: true, index: 'fk_product_sellers_products1' })
  product!: Products;

  @Index({ name: 'fk_product_sellers_products1' })
  @Property({ persist: false })
  productId!: number;

  @Property({ default: false })
  isCurrentlyAllowed: boolean = false;

  @OneToMany({ entity: () => Sales, mappedBy: 'seller' })
  sellerInverse = new Collection<Sales>(this);

}
",
  "import { Collection, Entity, OneToMany, OptionalProps, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { ProductSellers } from './ProductSellers';

@Entity()
export class Products {

  [PrimaryKeyProp]?: 'productId';

  [OptionalProps]?: 'currentQuantity';

  @PrimaryKey()
  productId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property({ length: 255 })
  name!: string;

  @Property({ columnType: 'numeric(10,2)' })
  currentPrice!: string;

  @Property({ default: 0 })
  currentQuantity: number = 0;

  @OneToMany({ entity: () => ProductSellers, mappedBy: 'product' })
  productInverse = new Collection<ProductSellers>(this);

}
",
  "import { Entity, Index, ManyToOne, OptionalProps, PrimaryKey, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { ProductCountryMap } from './ProductCountryMap';
import { ProductSellers } from './ProductSellers';

@Entity()
export class Sales {

  [PrimaryKeyProp]?: 'saleId';

  [OptionalProps]?: 'quantitySold';

  @PrimaryKey()
  saleId!: number;

  @Property({ columnType: 'char(2)', persist: false })
  country!: unknown;

  @ManyToOne({ entity: () => ProductSellers, fieldNames: ['seller_id', 'product_id'], updateRule: 'cascade', index: 'fk_sales_product_sellers1_idx' })
  seller!: ProductSellers;

  @Property({ persist: false })
  sellerId!: number;

  @Index({ name: 'product_id_idx' })
  @Property({ persist: false })
  productId!: number;

  @Property({ columnType: 'numeric(10,2)' })
  singularPrice!: string;

  @Property({ default: 1 })
  quantitySold: number = 1;

  @ManyToOne({ entity: () => ProductCountryMap, fieldNames: ['country', 'product_id'], updateRule: 'cascade', index: 'fk_sales_product_country_map1_idx' })
  productCountryMap!: ProductCountryMap;

}
",
  "import { Collection, Entity, OneToMany, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { ProductSellers } from './ProductSellers';

@Entity()
export class Sellers {

  [PrimaryKeyProp]?: 'sellerId';

  @PrimaryKey()
  sellerId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property({ length: 255 })
  name!: string;

  @OneToMany({ entity: () => ProductSellers, mappedBy: 'seller' })
  sellerInverse = new Collection<ProductSellers>(this);

}
",
]
`;

exports[`4898 overlap_fk_example scalarPropertiesForRelations=always bidirectionalRelations=true identifiedReferences=false entitySchema=true: dump 1`] = `
[
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductCountryMap } from './ProductCountryMap';

export class Countries {
  [PrimaryKeyProp]?: 'code';
  code!: unknown;
  countriesInverse = new Collection<ProductCountryMap>(this);
}

export const CountriesSchema = new EntitySchema({
  class: Countries,
  properties: {
    code: { primary: true, type: 'unknown', columnType: 'char(2)' },
    countriesInverse: { kind: '1:m', entity: () => ProductCountryMap, mappedBy: 'countries' },
  },
});
",
  "import { Collection, EntitySchema, OptionalProps, PrimaryKeyProp } from '@mikro-orm/core';
import { Sales } from './Sales';

export class ProductCountryMap {
  [PrimaryKeyProp]?: ['product', 'countries'];
  [OptionalProps]?: 'isCurrentlyAllowed';
  country!: unknown;
  product!: Products;
  productId!: number;
  isCurrentlyAllowed: boolean = false;
  countries!: Countries;
  productCountryMapInverse = new Collection<Sales>(this);
}

export const ProductCountryMapSchema = new EntitySchema({
  class: ProductCountryMap,
  properties: {
    country: { type: 'unknown', columnType: 'char(2)', persist: false },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => Products,
      fieldName: 'product_id',
      index: 'fk_product_country_map_products1',
    },
    productId: { type: 'number', persist: false, index: 'fk_product_country_map_products1' },
    isCurrentlyAllowed: { type: 'boolean', default: false },
    countries: { primary: true, kind: 'm:1', entity: () => Countries, fieldName: 'country' },
    productCountryMapInverse: { kind: '1:m', entity: () => Sales, mappedBy: 'productCountryMap' },
  },
});
",
  "import { Collection, EntitySchema, OptionalProps, PrimaryKeyProp } from '@mikro-orm/core';
import { Sales } from './Sales';

export class ProductSellers {
  [PrimaryKeyProp]?: ['seller', 'product'];
  [OptionalProps]?: 'isCurrentlyAllowed';
  seller!: Sellers;
  sellerId!: number;
  product!: Products;
  productId!: number;
  isCurrentlyAllowed: boolean = false;
  sellerInverse = new Collection<Sales>(this);
}

export const ProductSellersSchema = new EntitySchema({
  class: ProductSellers,
  properties: {
    seller: {
      primary: true,
      kind: 'm:1',
      entity: () => Sellers,
      fieldName: 'seller_id',
      updateRule: 'cascade',
      deleteRule: 'cascade',
    },
    sellerId: { type: 'number', persist: false },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => Products,
      fieldName: 'product_id',
      updateRule: 'cascade',
      deleteRule: 'cascade',
      index: 'fk_product_sellers_products1',
    },
    productId: { type: 'number', persist: false, index: 'fk_product_sellers_products1' },
    isCurrentlyAllowed: { type: 'boolean', default: false },
    sellerInverse: { kind: '1:m', entity: () => Sales, mappedBy: 'seller' },
  },
});
",
  "import { Collection, EntitySchema, OptionalProps, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductSellers } from './ProductSellers';

export class Products {
  [PrimaryKeyProp]?: 'productId';
  [OptionalProps]?: 'currentQuantity';
  productId!: number;
  name!: string;
  currentPrice!: string;
  currentQuantity: number = 0;
  productInverse = new Collection<ProductSellers>(this);
}

export const ProductsSchema = new EntitySchema({
  class: Products,
  properties: {
    productId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255, unique: 'name_UNIQUE' },
    currentPrice: { type: 'string', columnType: 'numeric(10,2)' },
    currentQuantity: { type: 'number', default: 0 },
    productInverse: { kind: '1:m', entity: () => ProductSellers, mappedBy: 'product' },
  },
});
",
  "import { EntitySchema, OptionalProps, PrimaryKeyProp } from '@mikro-orm/core';

export class Sales {
  [PrimaryKeyProp]?: 'saleId';
  [OptionalProps]?: 'quantitySold';
  saleId!: number;
  country!: unknown;
  seller!: ProductSellers;
  sellerId!: number;
  productId!: number;
  singularPrice!: string;
  quantitySold: number = 1;
  productCountryMap!: ProductCountryMap;
}

export const SalesSchema = new EntitySchema({
  class: Sales,
  properties: {
    saleId: { primary: true, type: 'number' },
    country: { type: 'unknown', columnType: 'char(2)', persist: false },
    seller: {
      kind: 'm:1',
      entity: () => ProductSellers,
      fieldNames: [
        'seller_id',
        'product_id'
      ],
      updateRule: 'cascade',
      index: 'fk_sales_product_sellers1_idx',
    },
    sellerId: { type: 'number', persist: false },
    productId: { type: 'number', persist: false, index: 'product_id_idx' },
    singularPrice: { type: 'string', columnType: 'numeric(10,2)' },
    quantitySold: { type: 'number', default: 1 },
    productCountryMap: {
      kind: 'm:1',
      entity: () => ProductCountryMap,
      fieldNames: [
        'country',
        'product_id'
      ],
      updateRule: 'cascade',
      index: 'fk_sales_product_country_map1_idx',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductSellers } from './ProductSellers';

export class Sellers {
  [PrimaryKeyProp]?: 'sellerId';
  sellerId!: number;
  name!: string;
  sellerInverse = new Collection<ProductSellers>(this);
}

export const SellersSchema = new EntitySchema({
  class: Sellers,
  properties: {
    sellerId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255, unique: 'name_UNIQUE' },
    sellerInverse: { kind: '1:m', entity: () => ProductSellers, mappedBy: 'seller' },
  },
});
",
]
`;

exports[`4898 overlap_fk_example scalarPropertiesForRelations=always bidirectionalRelations=true identifiedReferences=true entitySchema=false: dump 1`] = `
[
  "import { Collection, Entity, OneToMany, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductCountryMap } from './ProductCountryMap';

@Entity()
export class Countries {

  [PrimaryKeyProp]?: 'code';

  @PrimaryKey({ columnType: 'char(2)' })
  code!: unknown;

  @OneToMany({ entity: () => ProductCountryMap, mappedBy: 'countries' })
  countriesInverse = new Collection<ProductCountryMap>(this);

}
",
  "import { Collection, Entity, Index, ManyToOne, OneToMany, OptionalProps, PrimaryKeyProp, Property, Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Products } from './Products';
import { Sales } from './Sales';

@Entity()
export class ProductCountryMap {

  [PrimaryKeyProp]?: ['product', 'countries'];

  [OptionalProps]?: 'isCurrentlyAllowed';

  @Property({ columnType: 'char(2)', persist: false })
  country!: unknown;

  @ManyToOne({ entity: () => Products, ref: true, fieldName: 'product_id', primary: true, index: 'fk_product_country_map_products1' })
  product!: Ref<Products>;

  @Index({ name: 'fk_product_country_map_products1' })
  @Property({ persist: false })
  productId!: number;

  @Property({ default: false })
  isCurrentlyAllowed: boolean = false;

  @ManyToOne({ entity: () => Countries, ref: true, fieldName: 'country', primary: true })
  countries!: Ref<Countries>;

  @OneToMany({ entity: () => Sales, mappedBy: 'productCountryMap' })
  productCountryMapInverse = new Collection<Sales>(this);

}
",
  "import { Collection, Entity, Index, ManyToOne, OneToMany, OptionalProps, PrimaryKeyProp, Property, Ref } from '@mikro-orm/core';
import { Products } from './Products';
import { Sales } from './Sales';
import { Sellers } from './Sellers';

@Entity()
export class ProductSellers {

  [PrimaryKeyProp]?: ['seller', 'product'];

  [OptionalProps]?: 'isCurrentlyAllowed';

  @ManyToOne({ entity: () => Sellers, ref: true, fieldName: 'seller_id', updateRule: 'cascade', deleteRule: 'cascade', primary: true })
  seller!: Ref<Sellers>;

  @Property({ persist: false })
  sellerId!: number;

  @ManyToOne({ entity: () => Products, ref: true, fieldName: 'product_id', updateRule: 'cascade', deleteRule: 'cascade', primary: true, index: 'fk_product_sellers_products1' })
  product!: Ref<Products>;

  @Index({ name: 'fk_product_sellers_products1' })
  @Property({ persist: false })
  productId!: number;

  @Property({ default: false })
  isCurrentlyAllowed: boolean = false;

  @OneToMany({ entity: () => Sales, mappedBy: 'seller' })
  sellerInverse = new Collection<Sales>(this);

}
",
  "import { Collection, Entity, OneToMany, OptionalProps, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { ProductSellers } from './ProductSellers';

@Entity()
export class Products {

  [PrimaryKeyProp]?: 'productId';

  [OptionalProps]?: 'currentQuantity';

  @PrimaryKey()
  productId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property({ length: 255 })
  name!: string;

  @Property({ columnType: 'numeric(10,2)' })
  currentPrice!: string;

  @Property({ default: 0 })
  currentQuantity: number = 0;

  @OneToMany({ entity: () => ProductSellers, mappedBy: 'product' })
  productInverse = new Collection<ProductSellers>(this);

}
",
  "import { Entity, Index, ManyToOne, OptionalProps, PrimaryKey, PrimaryKeyProp, Property, Ref } from '@mikro-orm/core';
import { ProductCountryMap } from './ProductCountryMap';
import { ProductSellers } from './ProductSellers';

@Entity()
export class Sales {

  [PrimaryKeyProp]?: 'saleId';

  [OptionalProps]?: 'quantitySold';

  @PrimaryKey()
  saleId!: number;

  @Property({ columnType: 'char(2)', persist: false })
  country!: unknown;

  @ManyToOne({ entity: () => ProductSellers, ref: true, fieldNames: ['seller_id', 'product_id'], updateRule: 'cascade', index: 'fk_sales_product_sellers1_idx' })
  seller!: Ref<ProductSellers>;

  @Property({ persist: false })
  sellerId!: number;

  @Index({ name: 'product_id_idx' })
  @Property({ persist: false })
  productId!: number;

  @Property({ columnType: 'numeric(10,2)' })
  singularPrice!: string;

  @Property({ default: 1 })
  quantitySold: number = 1;

  @ManyToOne({ entity: () => ProductCountryMap, ref: true, fieldNames: ['country', 'product_id'], updateRule: 'cascade', index: 'fk_sales_product_country_map1_idx' })
  productCountryMap!: Ref<ProductCountryMap>;

}
",
  "import { Collection, Entity, OneToMany, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { ProductSellers } from './ProductSellers';

@Entity()
export class Sellers {

  [PrimaryKeyProp]?: 'sellerId';

  @PrimaryKey()
  sellerId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property({ length: 255 })
  name!: string;

  @OneToMany({ entity: () => ProductSellers, mappedBy: 'seller' })
  sellerInverse = new Collection<ProductSellers>(this);

}
",
]
`;

exports[`4898 overlap_fk_example scalarPropertiesForRelations=always bidirectionalRelations=true identifiedReferences=true entitySchema=true: dump 1`] = `
[
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductCountryMap } from './ProductCountryMap';

export class Countries {
  [PrimaryKeyProp]?: 'code';
  code!: unknown;
  countriesInverse = new Collection<ProductCountryMap>(this);
}

export const CountriesSchema = new EntitySchema({
  class: Countries,
  properties: {
    code: { primary: true, type: 'unknown', columnType: 'char(2)' },
    countriesInverse: { kind: '1:m', entity: () => ProductCountryMap, mappedBy: 'countries' },
  },
});
",
  "import { Collection, EntitySchema, OptionalProps, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Products } from './Products';
import { Sales } from './Sales';

export class ProductCountryMap {
  [PrimaryKeyProp]?: ['product', 'countries'];
  [OptionalProps]?: 'isCurrentlyAllowed';
  country!: unknown;
  product!: Ref<Products>;
  productId!: number;
  isCurrentlyAllowed: boolean = false;
  countries!: Ref<Countries>;
  productCountryMapInverse = new Collection<Sales>(this);
}

export const ProductCountryMapSchema = new EntitySchema({
  class: ProductCountryMap,
  properties: {
    country: { type: 'unknown', columnType: 'char(2)', persist: false },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => Products,
      ref: true,
      fieldName: 'product_id',
      index: 'fk_product_country_map_products1',
    },
    productId: { type: 'number', persist: false, index: 'fk_product_country_map_products1' },
    isCurrentlyAllowed: { type: 'boolean', default: false },
    countries: {
      primary: true,
      kind: 'm:1',
      entity: () => Countries,
      ref: true,
      fieldName: 'country',
    },
    productCountryMapInverse: { kind: '1:m', entity: () => Sales, mappedBy: 'productCountryMap' },
  },
});
",
  "import { Collection, EntitySchema, OptionalProps, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Products } from './Products';
import { Sales } from './Sales';
import { Sellers } from './Sellers';

export class ProductSellers {
  [PrimaryKeyProp]?: ['seller', 'product'];
  [OptionalProps]?: 'isCurrentlyAllowed';
  seller!: Ref<Sellers>;
  sellerId!: number;
  product!: Ref<Products>;
  productId!: number;
  isCurrentlyAllowed: boolean = false;
  sellerInverse = new Collection<Sales>(this);
}

export const ProductSellersSchema = new EntitySchema({
  class: ProductSellers,
  properties: {
    seller: {
      primary: true,
      kind: 'm:1',
      entity: () => Sellers,
      ref: true,
      fieldName: 'seller_id',
      updateRule: 'cascade',
      deleteRule: 'cascade',
    },
    sellerId: { type: 'number', persist: false },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => Products,
      ref: true,
      fieldName: 'product_id',
      updateRule: 'cascade',
      deleteRule: 'cascade',
      index: 'fk_product_sellers_products1',
    },
    productId: { type: 'number', persist: false, index: 'fk_product_sellers_products1' },
    isCurrentlyAllowed: { type: 'boolean', default: false },
    sellerInverse: { kind: '1:m', entity: () => Sales, mappedBy: 'seller' },
  },
});
",
  "import { Collection, EntitySchema, OptionalProps, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductSellers } from './ProductSellers';

export class Products {
  [PrimaryKeyProp]?: 'productId';
  [OptionalProps]?: 'currentQuantity';
  productId!: number;
  name!: string;
  currentPrice!: string;
  currentQuantity: number = 0;
  productInverse = new Collection<ProductSellers>(this);
}

export const ProductsSchema = new EntitySchema({
  class: Products,
  properties: {
    productId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255, unique: 'name_UNIQUE' },
    currentPrice: { type: 'string', columnType: 'numeric(10,2)' },
    currentQuantity: { type: 'number', default: 0 },
    productInverse: { kind: '1:m', entity: () => ProductSellers, mappedBy: 'product' },
  },
});
",
  "import { EntitySchema, OptionalProps, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { ProductCountryMap } from './ProductCountryMap';
import { ProductSellers } from './ProductSellers';

export class Sales {
  [PrimaryKeyProp]?: 'saleId';
  [OptionalProps]?: 'quantitySold';
  saleId!: number;
  country!: unknown;
  seller!: Ref<ProductSellers>;
  sellerId!: number;
  productId!: number;
  singularPrice!: string;
  quantitySold: number = 1;
  productCountryMap!: Ref<ProductCountryMap>;
}

export const SalesSchema = new EntitySchema({
  class: Sales,
  properties: {
    saleId: { primary: true, type: 'number' },
    country: { type: 'unknown', columnType: 'char(2)', persist: false },
    seller: {
      kind: 'm:1',
      entity: () => ProductSellers,
      ref: true,
      fieldNames: [
        'seller_id',
        'product_id'
      ],
      updateRule: 'cascade',
      index: 'fk_sales_product_sellers1_idx',
    },
    sellerId: { type: 'number', persist: false },
    productId: { type: 'number', persist: false, index: 'product_id_idx' },
    singularPrice: { type: 'string', columnType: 'numeric(10,2)' },
    quantitySold: { type: 'number', default: 1 },
    productCountryMap: {
      kind: 'm:1',
      entity: () => ProductCountryMap,
      ref: true,
      fieldNames: [
        'country',
        'product_id'
      ],
      updateRule: 'cascade',
      index: 'fk_sales_product_country_map1_idx',
    },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductSellers } from './ProductSellers';

export class Sellers {
  [PrimaryKeyProp]?: 'sellerId';
  sellerId!: number;
  name!: string;
  sellerInverse = new Collection<ProductSellers>(this);
}

export const SellersSchema = new EntitySchema({
  class: Sellers,
  properties: {
    sellerId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255, unique: 'name_UNIQUE' },
    sellerInverse: { kind: '1:m', entity: () => ProductSellers, mappedBy: 'seller' },
  },
});
",
]
`;

exports[`4898 overlap_fk_example scalarPropertiesForRelations=never bidirectionalRelations=false identifiedReferences=false entitySchema=false: dump 1`] = `
[
  "import { Entity, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';

@Entity()
export class Countries {

  [PrimaryKeyProp]?: 'code';

  @PrimaryKey({ columnType: 'char(2)' })
  code!: unknown;

}
",
  "import { Entity, ManyToOne, OptionalProps, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Products } from './Products';

@Entity()
export class ProductCountryMap {

  [PrimaryKeyProp]?: ['country', 'product'];

  [OptionalProps]?: 'isCurrentlyAllowed';

  @ManyToOne({ entity: () => Countries, fieldName: 'country', primary: true })
  country!: Countries;

  @ManyToOne({ entity: () => Products, fieldName: 'product_id', primary: true, index: 'fk_product_country_map_products1' })
  product!: Products;

  @Property({ default: false })
  isCurrentlyAllowed: boolean = false;

}
",
  "import { Entity, ManyToOne, OptionalProps, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Products } from './Products';
import { Sellers } from './Sellers';

@Entity()
export class ProductSellers {

  [PrimaryKeyProp]?: ['seller', 'product'];

  [OptionalProps]?: 'isCurrentlyAllowed';

  @ManyToOne({ entity: () => Sellers, fieldName: 'seller_id', updateRule: 'cascade', deleteRule: 'cascade', primary: true })
  seller!: Sellers;

  @ManyToOne({ entity: () => Products, fieldName: 'product_id', updateRule: 'cascade', deleteRule: 'cascade', primary: true, index: 'fk_product_sellers_products1' })
  product!: Products;

  @Property({ default: false })
  isCurrentlyAllowed: boolean = false;

}
",
  "import { Entity, OptionalProps, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';

@Entity()
export class Products {

  [PrimaryKeyProp]?: 'productId';

  [OptionalProps]?: 'currentQuantity';

  @PrimaryKey()
  productId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property({ length: 255 })
  name!: string;

  @Property({ columnType: 'numeric(10,2)' })
  currentPrice!: string;

  @Property({ default: 0 })
  currentQuantity: number = 0;

}
",
  "import { Entity, Index, ManyToOne, OptionalProps, PrimaryKey, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { ProductCountryMap } from './ProductCountryMap';
import { ProductSellers } from './ProductSellers';

@Entity()
@Index({ name: 'product_id_idx', expression: 'create index \`product_id_idx\` on \`sales\` (\`product_id\`)')
export class Sales {

  [PrimaryKeyProp]?: 'saleId';

  [OptionalProps]?: 'quantitySold';

  @PrimaryKey()
  saleId!: number;

  @ManyToOne({ entity: () => ProductCountryMap, fieldNames: ['country', 'product_id'], updateRule: 'cascade', index: 'fk_sales_product_country_map1_idx' })
  country!: ProductCountryMap;

  @ManyToOne({ entity: () => ProductSellers, fieldNames: ['seller_id', 'product_id'], updateRule: 'cascade', index: 'fk_sales_product_sellers1_idx' })
  seller!: ProductSellers;

  @Property({ columnType: 'numeric(10,2)' })
  singularPrice!: string;

  @Property({ default: 1 })
  quantitySold: number = 1;

}
",
  "import { Entity, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';

@Entity()
export class Sellers {

  [PrimaryKeyProp]?: 'sellerId';

  @PrimaryKey()
  sellerId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property({ length: 255 })
  name!: string;

}
",
]
`;

exports[`4898 overlap_fk_example scalarPropertiesForRelations=never bidirectionalRelations=false identifiedReferences=false entitySchema=true: dump 1`] = `
[
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Countries {
  [PrimaryKeyProp]?: 'code';
  code!: unknown;
}

export const CountriesSchema = new EntitySchema({
  class: Countries,
  properties: {
    code: { primary: true, type: 'unknown', columnType: 'char(2)' },
  },
});
",
  "import { EntitySchema, OptionalProps, PrimaryKeyProp } from '@mikro-orm/core';

export class ProductCountryMap {
  [PrimaryKeyProp]?: ['country', 'product'];
  [OptionalProps]?: 'isCurrentlyAllowed';
  country!: Countries;
  product!: Products;
  isCurrentlyAllowed: boolean = false;
}

export const ProductCountryMapSchema = new EntitySchema({
  class: ProductCountryMap,
  properties: {
    country: { primary: true, kind: 'm:1', entity: () => Countries, fieldName: 'country' },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => Products,
      fieldName: 'product_id',
      index: 'fk_product_country_map_products1',
    },
    isCurrentlyAllowed: { type: 'boolean', default: false },
  },
});
",
  "import { EntitySchema, OptionalProps, PrimaryKeyProp } from '@mikro-orm/core';

export class ProductSellers {
  [PrimaryKeyProp]?: ['seller', 'product'];
  [OptionalProps]?: 'isCurrentlyAllowed';
  seller!: Sellers;
  product!: Products;
  isCurrentlyAllowed: boolean = false;
}

export const ProductSellersSchema = new EntitySchema({
  class: ProductSellers,
  properties: {
    seller: {
      primary: true,
      kind: 'm:1',
      entity: () => Sellers,
      fieldName: 'seller_id',
      updateRule: 'cascade',
      deleteRule: 'cascade',
    },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => Products,
      fieldName: 'product_id',
      updateRule: 'cascade',
      deleteRule: 'cascade',
      index: 'fk_product_sellers_products1',
    },
    isCurrentlyAllowed: { type: 'boolean', default: false },
  },
});
",
  "import { EntitySchema, OptionalProps, PrimaryKeyProp } from '@mikro-orm/core';

export class Products {
  [PrimaryKeyProp]?: 'productId';
  [OptionalProps]?: 'currentQuantity';
  productId!: number;
  name!: string;
  currentPrice!: string;
  currentQuantity: number = 0;
}

export const ProductsSchema = new EntitySchema({
  class: Products,
  properties: {
    productId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255, unique: 'name_UNIQUE' },
    currentPrice: { type: 'string', columnType: 'numeric(10,2)' },
    currentQuantity: { type: 'number', default: 0 },
  },
});
",
  "import { EntitySchema, OptionalProps, PrimaryKeyProp } from '@mikro-orm/core';

export class Sales {
  [PrimaryKeyProp]?: 'saleId';
  [OptionalProps]?: 'quantitySold';
  saleId!: number;
  country!: ProductCountryMap;
  seller!: ProductSellers;
  singularPrice!: string;
  quantitySold: number = 1;
}

export const SalesSchema = new EntitySchema({
  class: Sales,
  indexes: [
    { name: 'product_id_idx', expression: 'create index \`product_id_idx\` on \`sales\` (\`product_id\`)' },
  ],
  uniques: [
  ],
  properties: {
    saleId: { primary: true, type: 'number' },
    country: {
      kind: 'm:1',
      entity: () => ProductCountryMap,
      fieldNames: [
        'country',
        'product_id'
      ],
      updateRule: 'cascade',
      index: 'fk_sales_product_country_map1_idx',
    },
    seller: {
      kind: 'm:1',
      entity: () => ProductSellers,
      fieldNames: [
        'seller_id',
        'product_id'
      ],
      updateRule: 'cascade',
      index: 'fk_sales_product_sellers1_idx',
    },
    singularPrice: { type: 'string', columnType: 'numeric(10,2)' },
    quantitySold: { type: 'number', default: 1 },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Sellers {
  [PrimaryKeyProp]?: 'sellerId';
  sellerId!: number;
  name!: string;
}

export const SellersSchema = new EntitySchema({
  class: Sellers,
  properties: {
    sellerId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255, unique: 'name_UNIQUE' },
  },
});
",
]
`;

exports[`4898 overlap_fk_example scalarPropertiesForRelations=never bidirectionalRelations=false identifiedReferences=true entitySchema=false: dump 1`] = `
[
  "import { Entity, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';

@Entity()
export class Countries {

  [PrimaryKeyProp]?: 'code';

  @PrimaryKey({ columnType: 'char(2)' })
  code!: unknown;

}
",
  "import { Entity, ManyToOne, OptionalProps, PrimaryKeyProp, Property, Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Products } from './Products';

@Entity()
export class ProductCountryMap {

  [PrimaryKeyProp]?: ['country', 'product'];

  [OptionalProps]?: 'isCurrentlyAllowed';

  @ManyToOne({ entity: () => Countries, ref: true, fieldName: 'country', primary: true })
  country!: Ref<Countries>;

  @ManyToOne({ entity: () => Products, ref: true, fieldName: 'product_id', primary: true, index: 'fk_product_country_map_products1' })
  product!: Ref<Products>;

  @Property({ default: false })
  isCurrentlyAllowed: boolean = false;

}
",
  "import { Entity, ManyToOne, OptionalProps, PrimaryKeyProp, Property, Ref } from '@mikro-orm/core';
import { Products } from './Products';
import { Sellers } from './Sellers';

@Entity()
export class ProductSellers {

  [PrimaryKeyProp]?: ['seller', 'product'];

  [OptionalProps]?: 'isCurrentlyAllowed';

  @ManyToOne({ entity: () => Sellers, ref: true, fieldName: 'seller_id', updateRule: 'cascade', deleteRule: 'cascade', primary: true })
  seller!: Ref<Sellers>;

  @ManyToOne({ entity: () => Products, ref: true, fieldName: 'product_id', updateRule: 'cascade', deleteRule: 'cascade', primary: true, index: 'fk_product_sellers_products1' })
  product!: Ref<Products>;

  @Property({ default: false })
  isCurrentlyAllowed: boolean = false;

}
",
  "import { Entity, OptionalProps, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';

@Entity()
export class Products {

  [PrimaryKeyProp]?: 'productId';

  [OptionalProps]?: 'currentQuantity';

  @PrimaryKey()
  productId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property({ length: 255 })
  name!: string;

  @Property({ columnType: 'numeric(10,2)' })
  currentPrice!: string;

  @Property({ default: 0 })
  currentQuantity: number = 0;

}
",
  "import { Entity, Index, ManyToOne, OptionalProps, PrimaryKey, PrimaryKeyProp, Property, Ref } from '@mikro-orm/core';
import { ProductCountryMap } from './ProductCountryMap';
import { ProductSellers } from './ProductSellers';

@Entity()
@Index({ name: 'product_id_idx', expression: 'create index \`product_id_idx\` on \`sales\` (\`product_id\`)')
export class Sales {

  [PrimaryKeyProp]?: 'saleId';

  [OptionalProps]?: 'quantitySold';

  @PrimaryKey()
  saleId!: number;

  @ManyToOne({ entity: () => ProductCountryMap, ref: true, fieldNames: ['country', 'product_id'], updateRule: 'cascade', index: 'fk_sales_product_country_map1_idx' })
  country!: Ref<ProductCountryMap>;

  @ManyToOne({ entity: () => ProductSellers, ref: true, fieldNames: ['seller_id', 'product_id'], updateRule: 'cascade', index: 'fk_sales_product_sellers1_idx' })
  seller!: Ref<ProductSellers>;

  @Property({ columnType: 'numeric(10,2)' })
  singularPrice!: string;

  @Property({ default: 1 })
  quantitySold: number = 1;

}
",
  "import { Entity, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';

@Entity()
export class Sellers {

  [PrimaryKeyProp]?: 'sellerId';

  @PrimaryKey()
  sellerId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property({ length: 255 })
  name!: string;

}
",
]
`;

exports[`4898 overlap_fk_example scalarPropertiesForRelations=never bidirectionalRelations=false identifiedReferences=true entitySchema=true: dump 1`] = `
[
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Countries {
  [PrimaryKeyProp]?: 'code';
  code!: unknown;
}

export const CountriesSchema = new EntitySchema({
  class: Countries,
  properties: {
    code: { primary: true, type: 'unknown', columnType: 'char(2)' },
  },
});
",
  "import { EntitySchema, OptionalProps, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Products } from './Products';

export class ProductCountryMap {
  [PrimaryKeyProp]?: ['country', 'product'];
  [OptionalProps]?: 'isCurrentlyAllowed';
  country!: Ref<Countries>;
  product!: Ref<Products>;
  isCurrentlyAllowed: boolean = false;
}

export const ProductCountryMapSchema = new EntitySchema({
  class: ProductCountryMap,
  properties: {
    country: {
      primary: true,
      kind: 'm:1',
      entity: () => Countries,
      ref: true,
      fieldName: 'country',
    },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => Products,
      ref: true,
      fieldName: 'product_id',
      index: 'fk_product_country_map_products1',
    },
    isCurrentlyAllowed: { type: 'boolean', default: false },
  },
});
",
  "import { EntitySchema, OptionalProps, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Products } from './Products';
import { Sellers } from './Sellers';

export class ProductSellers {
  [PrimaryKeyProp]?: ['seller', 'product'];
  [OptionalProps]?: 'isCurrentlyAllowed';
  seller!: Ref<Sellers>;
  product!: Ref<Products>;
  isCurrentlyAllowed: boolean = false;
}

export const ProductSellersSchema = new EntitySchema({
  class: ProductSellers,
  properties: {
    seller: {
      primary: true,
      kind: 'm:1',
      entity: () => Sellers,
      ref: true,
      fieldName: 'seller_id',
      updateRule: 'cascade',
      deleteRule: 'cascade',
    },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => Products,
      ref: true,
      fieldName: 'product_id',
      updateRule: 'cascade',
      deleteRule: 'cascade',
      index: 'fk_product_sellers_products1',
    },
    isCurrentlyAllowed: { type: 'boolean', default: false },
  },
});
",
  "import { EntitySchema, OptionalProps, PrimaryKeyProp } from '@mikro-orm/core';

export class Products {
  [PrimaryKeyProp]?: 'productId';
  [OptionalProps]?: 'currentQuantity';
  productId!: number;
  name!: string;
  currentPrice!: string;
  currentQuantity: number = 0;
}

export const ProductsSchema = new EntitySchema({
  class: Products,
  properties: {
    productId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255, unique: 'name_UNIQUE' },
    currentPrice: { type: 'string', columnType: 'numeric(10,2)' },
    currentQuantity: { type: 'number', default: 0 },
  },
});
",
  "import { EntitySchema, OptionalProps, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { ProductCountryMap } from './ProductCountryMap';
import { ProductSellers } from './ProductSellers';

export class Sales {
  [PrimaryKeyProp]?: 'saleId';
  [OptionalProps]?: 'quantitySold';
  saleId!: number;
  country!: Ref<ProductCountryMap>;
  seller!: Ref<ProductSellers>;
  singularPrice!: string;
  quantitySold: number = 1;
}

export const SalesSchema = new EntitySchema({
  class: Sales,
  indexes: [
    { name: 'product_id_idx', expression: 'create index \`product_id_idx\` on \`sales\` (\`product_id\`)' },
  ],
  uniques: [
  ],
  properties: {
    saleId: { primary: true, type: 'number' },
    country: {
      kind: 'm:1',
      entity: () => ProductCountryMap,
      ref: true,
      fieldNames: [
        'country',
        'product_id'
      ],
      updateRule: 'cascade',
      index: 'fk_sales_product_country_map1_idx',
    },
    seller: {
      kind: 'm:1',
      entity: () => ProductSellers,
      ref: true,
      fieldNames: [
        'seller_id',
        'product_id'
      ],
      updateRule: 'cascade',
      index: 'fk_sales_product_sellers1_idx',
    },
    singularPrice: { type: 'string', columnType: 'numeric(10,2)' },
    quantitySold: { type: 'number', default: 1 },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Sellers {
  [PrimaryKeyProp]?: 'sellerId';
  sellerId!: number;
  name!: string;
}

export const SellersSchema = new EntitySchema({
  class: Sellers,
  properties: {
    sellerId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255, unique: 'name_UNIQUE' },
  },
});
",
]
`;

exports[`4898 overlap_fk_example scalarPropertiesForRelations=never bidirectionalRelations=true identifiedReferences=false entitySchema=false: dump 1`] = `
[
  "import { Collection, Entity, OneToMany, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductCountryMap } from './ProductCountryMap';

@Entity()
export class Countries {

  [PrimaryKeyProp]?: 'code';

  @PrimaryKey({ columnType: 'char(2)' })
  code!: unknown;

  @OneToMany({ entity: () => ProductCountryMap, mappedBy: 'country' })
  countryInverse = new Collection<ProductCountryMap>(this);

}
",
  "import { Collection, Entity, ManyToOne, OneToMany, OptionalProps, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Products } from './Products';
import { Sales } from './Sales';

@Entity()
export class ProductCountryMap {

  [PrimaryKeyProp]?: ['country', 'product'];

  [OptionalProps]?: 'isCurrentlyAllowed';

  @ManyToOne({ entity: () => Countries, fieldName: 'country', primary: true })
  country!: Countries;

  @ManyToOne({ entity: () => Products, fieldName: 'product_id', primary: true, index: 'fk_product_country_map_products1' })
  product!: Products;

  @Property({ default: false })
  isCurrentlyAllowed: boolean = false;

  @OneToMany({ entity: () => Sales, mappedBy: 'country' })
  countryInverse = new Collection<Sales>(this);

}
",
  "import { Collection, Entity, ManyToOne, OneToMany, OptionalProps, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Products } from './Products';
import { Sales } from './Sales';
import { Sellers } from './Sellers';

@Entity()
export class ProductSellers {

  [PrimaryKeyProp]?: ['seller', 'product'];

  [OptionalProps]?: 'isCurrentlyAllowed';

  @ManyToOne({ entity: () => Sellers, fieldName: 'seller_id', updateRule: 'cascade', deleteRule: 'cascade', primary: true })
  seller!: Sellers;

  @ManyToOne({ entity: () => Products, fieldName: 'product_id', updateRule: 'cascade', deleteRule: 'cascade', primary: true, index: 'fk_product_sellers_products1' })
  product!: Products;

  @Property({ default: false })
  isCurrentlyAllowed: boolean = false;

  @OneToMany({ entity: () => Sales, mappedBy: 'seller' })
  sellerInverse = new Collection<Sales>(this);

}
",
  "import { Collection, Entity, OneToMany, OptionalProps, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { ProductSellers } from './ProductSellers';

@Entity()
export class Products {

  [PrimaryKeyProp]?: 'productId';

  [OptionalProps]?: 'currentQuantity';

  @PrimaryKey()
  productId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property({ length: 255 })
  name!: string;

  @Property({ columnType: 'numeric(10,2)' })
  currentPrice!: string;

  @Property({ default: 0 })
  currentQuantity: number = 0;

  @OneToMany({ entity: () => ProductSellers, mappedBy: 'product' })
  productInverse = new Collection<ProductSellers>(this);

}
",
  "import { Entity, Index, ManyToOne, OptionalProps, PrimaryKey, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { ProductCountryMap } from './ProductCountryMap';
import { ProductSellers } from './ProductSellers';

@Entity()
@Index({ name: 'product_id_idx', expression: 'create index \`product_id_idx\` on \`sales\` (\`product_id\`)')
export class Sales {

  [PrimaryKeyProp]?: 'saleId';

  [OptionalProps]?: 'quantitySold';

  @PrimaryKey()
  saleId!: number;

  @ManyToOne({ entity: () => ProductCountryMap, fieldNames: ['country', 'product_id'], updateRule: 'cascade', index: 'fk_sales_product_country_map1_idx' })
  country!: ProductCountryMap;

  @ManyToOne({ entity: () => ProductSellers, fieldNames: ['seller_id', 'product_id'], updateRule: 'cascade', index: 'fk_sales_product_sellers1_idx' })
  seller!: ProductSellers;

  @Property({ columnType: 'numeric(10,2)' })
  singularPrice!: string;

  @Property({ default: 1 })
  quantitySold: number = 1;

}
",
  "import { Collection, Entity, OneToMany, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { ProductSellers } from './ProductSellers';

@Entity()
export class Sellers {

  [PrimaryKeyProp]?: 'sellerId';

  @PrimaryKey()
  sellerId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property({ length: 255 })
  name!: string;

  @OneToMany({ entity: () => ProductSellers, mappedBy: 'seller' })
  sellerInverse = new Collection<ProductSellers>(this);

}
",
]
`;

exports[`4898 overlap_fk_example scalarPropertiesForRelations=never bidirectionalRelations=true identifiedReferences=false entitySchema=true: dump 1`] = `
[
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductCountryMap } from './ProductCountryMap';

export class Countries {
  [PrimaryKeyProp]?: 'code';
  code!: unknown;
  countryInverse = new Collection<ProductCountryMap>(this);
}

export const CountriesSchema = new EntitySchema({
  class: Countries,
  properties: {
    code: { primary: true, type: 'unknown', columnType: 'char(2)' },
    countryInverse: { kind: '1:m', entity: () => ProductCountryMap, mappedBy: 'country' },
  },
});
",
  "import { Collection, EntitySchema, OptionalProps, PrimaryKeyProp } from '@mikro-orm/core';
import { Sales } from './Sales';

export class ProductCountryMap {
  [PrimaryKeyProp]?: ['country', 'product'];
  [OptionalProps]?: 'isCurrentlyAllowed';
  country!: Countries;
  product!: Products;
  isCurrentlyAllowed: boolean = false;
  countryInverse = new Collection<Sales>(this);
}

export const ProductCountryMapSchema = new EntitySchema({
  class: ProductCountryMap,
  properties: {
    country: { primary: true, kind: 'm:1', entity: () => Countries, fieldName: 'country' },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => Products,
      fieldName: 'product_id',
      index: 'fk_product_country_map_products1',
    },
    isCurrentlyAllowed: { type: 'boolean', default: false },
    countryInverse: { kind: '1:m', entity: () => Sales, mappedBy: 'country' },
  },
});
",
  "import { Collection, EntitySchema, OptionalProps, PrimaryKeyProp } from '@mikro-orm/core';
import { Sales } from './Sales';

export class ProductSellers {
  [PrimaryKeyProp]?: ['seller', 'product'];
  [OptionalProps]?: 'isCurrentlyAllowed';
  seller!: Sellers;
  product!: Products;
  isCurrentlyAllowed: boolean = false;
  sellerInverse = new Collection<Sales>(this);
}

export const ProductSellersSchema = new EntitySchema({
  class: ProductSellers,
  properties: {
    seller: {
      primary: true,
      kind: 'm:1',
      entity: () => Sellers,
      fieldName: 'seller_id',
      updateRule: 'cascade',
      deleteRule: 'cascade',
    },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => Products,
      fieldName: 'product_id',
      updateRule: 'cascade',
      deleteRule: 'cascade',
      index: 'fk_product_sellers_products1',
    },
    isCurrentlyAllowed: { type: 'boolean', default: false },
    sellerInverse: { kind: '1:m', entity: () => Sales, mappedBy: 'seller' },
  },
});
",
  "import { Collection, EntitySchema, OptionalProps, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductSellers } from './ProductSellers';

export class Products {
  [PrimaryKeyProp]?: 'productId';
  [OptionalProps]?: 'currentQuantity';
  productId!: number;
  name!: string;
  currentPrice!: string;
  currentQuantity: number = 0;
  productInverse = new Collection<ProductSellers>(this);
}

export const ProductsSchema = new EntitySchema({
  class: Products,
  properties: {
    productId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255, unique: 'name_UNIQUE' },
    currentPrice: { type: 'string', columnType: 'numeric(10,2)' },
    currentQuantity: { type: 'number', default: 0 },
    productInverse: { kind: '1:m', entity: () => ProductSellers, mappedBy: 'product' },
  },
});
",
  "import { EntitySchema, OptionalProps, PrimaryKeyProp } from '@mikro-orm/core';

export class Sales {
  [PrimaryKeyProp]?: 'saleId';
  [OptionalProps]?: 'quantitySold';
  saleId!: number;
  country!: ProductCountryMap;
  seller!: ProductSellers;
  singularPrice!: string;
  quantitySold: number = 1;
}

export const SalesSchema = new EntitySchema({
  class: Sales,
  indexes: [
    { name: 'product_id_idx', expression: 'create index \`product_id_idx\` on \`sales\` (\`product_id\`)' },
  ],
  uniques: [
  ],
  properties: {
    saleId: { primary: true, type: 'number' },
    country: {
      kind: 'm:1',
      entity: () => ProductCountryMap,
      fieldNames: [
        'country',
        'product_id'
      ],
      updateRule: 'cascade',
      index: 'fk_sales_product_country_map1_idx',
    },
    seller: {
      kind: 'm:1',
      entity: () => ProductSellers,
      fieldNames: [
        'seller_id',
        'product_id'
      ],
      updateRule: 'cascade',
      index: 'fk_sales_product_sellers1_idx',
    },
    singularPrice: { type: 'string', columnType: 'numeric(10,2)' },
    quantitySold: { type: 'number', default: 1 },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductSellers } from './ProductSellers';

export class Sellers {
  [PrimaryKeyProp]?: 'sellerId';
  sellerId!: number;
  name!: string;
  sellerInverse = new Collection<ProductSellers>(this);
}

export const SellersSchema = new EntitySchema({
  class: Sellers,
  properties: {
    sellerId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255, unique: 'name_UNIQUE' },
    sellerInverse: { kind: '1:m', entity: () => ProductSellers, mappedBy: 'seller' },
  },
});
",
]
`;

exports[`4898 overlap_fk_example scalarPropertiesForRelations=never bidirectionalRelations=true identifiedReferences=true entitySchema=false: dump 1`] = `
[
  "import { Collection, Entity, OneToMany, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductCountryMap } from './ProductCountryMap';

@Entity()
export class Countries {

  [PrimaryKeyProp]?: 'code';

  @PrimaryKey({ columnType: 'char(2)' })
  code!: unknown;

  @OneToMany({ entity: () => ProductCountryMap, mappedBy: 'country' })
  countryInverse = new Collection<ProductCountryMap>(this);

}
",
  "import { Collection, Entity, ManyToOne, OneToMany, OptionalProps, PrimaryKeyProp, Property, Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Products } from './Products';
import { Sales } from './Sales';

@Entity()
export class ProductCountryMap {

  [PrimaryKeyProp]?: ['country', 'product'];

  [OptionalProps]?: 'isCurrentlyAllowed';

  @ManyToOne({ entity: () => Countries, ref: true, fieldName: 'country', primary: true })
  country!: Ref<Countries>;

  @ManyToOne({ entity: () => Products, ref: true, fieldName: 'product_id', primary: true, index: 'fk_product_country_map_products1' })
  product!: Ref<Products>;

  @Property({ default: false })
  isCurrentlyAllowed: boolean = false;

  @OneToMany({ entity: () => Sales, mappedBy: 'country' })
  countryInverse = new Collection<Sales>(this);

}
",
  "import { Collection, Entity, ManyToOne, OneToMany, OptionalProps, PrimaryKeyProp, Property, Ref } from '@mikro-orm/core';
import { Products } from './Products';
import { Sales } from './Sales';
import { Sellers } from './Sellers';

@Entity()
export class ProductSellers {

  [PrimaryKeyProp]?: ['seller', 'product'];

  [OptionalProps]?: 'isCurrentlyAllowed';

  @ManyToOne({ entity: () => Sellers, ref: true, fieldName: 'seller_id', updateRule: 'cascade', deleteRule: 'cascade', primary: true })
  seller!: Ref<Sellers>;

  @ManyToOne({ entity: () => Products, ref: true, fieldName: 'product_id', updateRule: 'cascade', deleteRule: 'cascade', primary: true, index: 'fk_product_sellers_products1' })
  product!: Ref<Products>;

  @Property({ default: false })
  isCurrentlyAllowed: boolean = false;

  @OneToMany({ entity: () => Sales, mappedBy: 'seller' })
  sellerInverse = new Collection<Sales>(this);

}
",
  "import { Collection, Entity, OneToMany, OptionalProps, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { ProductSellers } from './ProductSellers';

@Entity()
export class Products {

  [PrimaryKeyProp]?: 'productId';

  [OptionalProps]?: 'currentQuantity';

  @PrimaryKey()
  productId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property({ length: 255 })
  name!: string;

  @Property({ columnType: 'numeric(10,2)' })
  currentPrice!: string;

  @Property({ default: 0 })
  currentQuantity: number = 0;

  @OneToMany({ entity: () => ProductSellers, mappedBy: 'product' })
  productInverse = new Collection<ProductSellers>(this);

}
",
  "import { Entity, Index, ManyToOne, OptionalProps, PrimaryKey, PrimaryKeyProp, Property, Ref } from '@mikro-orm/core';
import { ProductCountryMap } from './ProductCountryMap';
import { ProductSellers } from './ProductSellers';

@Entity()
@Index({ name: 'product_id_idx', expression: 'create index \`product_id_idx\` on \`sales\` (\`product_id\`)')
export class Sales {

  [PrimaryKeyProp]?: 'saleId';

  [OptionalProps]?: 'quantitySold';

  @PrimaryKey()
  saleId!: number;

  @ManyToOne({ entity: () => ProductCountryMap, ref: true, fieldNames: ['country', 'product_id'], updateRule: 'cascade', index: 'fk_sales_product_country_map1_idx' })
  country!: Ref<ProductCountryMap>;

  @ManyToOne({ entity: () => ProductSellers, ref: true, fieldNames: ['seller_id', 'product_id'], updateRule: 'cascade', index: 'fk_sales_product_sellers1_idx' })
  seller!: Ref<ProductSellers>;

  @Property({ columnType: 'numeric(10,2)' })
  singularPrice!: string;

  @Property({ default: 1 })
  quantitySold: number = 1;

}
",
  "import { Collection, Entity, OneToMany, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { ProductSellers } from './ProductSellers';

@Entity()
export class Sellers {

  [PrimaryKeyProp]?: 'sellerId';

  @PrimaryKey()
  sellerId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property({ length: 255 })
  name!: string;

  @OneToMany({ entity: () => ProductSellers, mappedBy: 'seller' })
  sellerInverse = new Collection<ProductSellers>(this);

}
",
]
`;

exports[`4898 overlap_fk_example scalarPropertiesForRelations=never bidirectionalRelations=true identifiedReferences=true entitySchema=true: dump 1`] = `
[
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductCountryMap } from './ProductCountryMap';

export class Countries {
  [PrimaryKeyProp]?: 'code';
  code!: unknown;
  countryInverse = new Collection<ProductCountryMap>(this);
}

export const CountriesSchema = new EntitySchema({
  class: Countries,
  properties: {
    code: { primary: true, type: 'unknown', columnType: 'char(2)' },
    countryInverse: { kind: '1:m', entity: () => ProductCountryMap, mappedBy: 'country' },
  },
});
",
  "import { Collection, EntitySchema, OptionalProps, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Products } from './Products';
import { Sales } from './Sales';

export class ProductCountryMap {
  [PrimaryKeyProp]?: ['country', 'product'];
  [OptionalProps]?: 'isCurrentlyAllowed';
  country!: Ref<Countries>;
  product!: Ref<Products>;
  isCurrentlyAllowed: boolean = false;
  countryInverse = new Collection<Sales>(this);
}

export const ProductCountryMapSchema = new EntitySchema({
  class: ProductCountryMap,
  properties: {
    country: {
      primary: true,
      kind: 'm:1',
      entity: () => Countries,
      ref: true,
      fieldName: 'country',
    },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => Products,
      ref: true,
      fieldName: 'product_id',
      index: 'fk_product_country_map_products1',
    },
    isCurrentlyAllowed: { type: 'boolean', default: false },
    countryInverse: { kind: '1:m', entity: () => Sales, mappedBy: 'country' },
  },
});
",
  "import { Collection, EntitySchema, OptionalProps, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Products } from './Products';
import { Sales } from './Sales';
import { Sellers } from './Sellers';

export class ProductSellers {
  [PrimaryKeyProp]?: ['seller', 'product'];
  [OptionalProps]?: 'isCurrentlyAllowed';
  seller!: Ref<Sellers>;
  product!: Ref<Products>;
  isCurrentlyAllowed: boolean = false;
  sellerInverse = new Collection<Sales>(this);
}

export const ProductSellersSchema = new EntitySchema({
  class: ProductSellers,
  properties: {
    seller: {
      primary: true,
      kind: 'm:1',
      entity: () => Sellers,
      ref: true,
      fieldName: 'seller_id',
      updateRule: 'cascade',
      deleteRule: 'cascade',
    },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => Products,
      ref: true,
      fieldName: 'product_id',
      updateRule: 'cascade',
      deleteRule: 'cascade',
      index: 'fk_product_sellers_products1',
    },
    isCurrentlyAllowed: { type: 'boolean', default: false },
    sellerInverse: { kind: '1:m', entity: () => Sales, mappedBy: 'seller' },
  },
});
",
  "import { Collection, EntitySchema, OptionalProps, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductSellers } from './ProductSellers';

export class Products {
  [PrimaryKeyProp]?: 'productId';
  [OptionalProps]?: 'currentQuantity';
  productId!: number;
  name!: string;
  currentPrice!: string;
  currentQuantity: number = 0;
  productInverse = new Collection<ProductSellers>(this);
}

export const ProductsSchema = new EntitySchema({
  class: Products,
  properties: {
    productId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255, unique: 'name_UNIQUE' },
    currentPrice: { type: 'string', columnType: 'numeric(10,2)' },
    currentQuantity: { type: 'number', default: 0 },
    productInverse: { kind: '1:m', entity: () => ProductSellers, mappedBy: 'product' },
  },
});
",
  "import { EntitySchema, OptionalProps, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { ProductCountryMap } from './ProductCountryMap';
import { ProductSellers } from './ProductSellers';

export class Sales {
  [PrimaryKeyProp]?: 'saleId';
  [OptionalProps]?: 'quantitySold';
  saleId!: number;
  country!: Ref<ProductCountryMap>;
  seller!: Ref<ProductSellers>;
  singularPrice!: string;
  quantitySold: number = 1;
}

export const SalesSchema = new EntitySchema({
  class: Sales,
  indexes: [
    { name: 'product_id_idx', expression: 'create index \`product_id_idx\` on \`sales\` (\`product_id\`)' },
  ],
  uniques: [
  ],
  properties: {
    saleId: { primary: true, type: 'number' },
    country: {
      kind: 'm:1',
      entity: () => ProductCountryMap,
      ref: true,
      fieldNames: [
        'country',
        'product_id'
      ],
      updateRule: 'cascade',
      index: 'fk_sales_product_country_map1_idx',
    },
    seller: {
      kind: 'm:1',
      entity: () => ProductSellers,
      ref: true,
      fieldNames: [
        'seller_id',
        'product_id'
      ],
      updateRule: 'cascade',
      index: 'fk_sales_product_sellers1_idx',
    },
    singularPrice: { type: 'string', columnType: 'numeric(10,2)' },
    quantitySold: { type: 'number', default: 1 },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductSellers } from './ProductSellers';

export class Sellers {
  [PrimaryKeyProp]?: 'sellerId';
  sellerId!: number;
  name!: string;
  sellerInverse = new Collection<ProductSellers>(this);
}

export const SellersSchema = new EntitySchema({
  class: Sellers,
  properties: {
    sellerId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255, unique: 'name_UNIQUE' },
    sellerInverse: { kind: '1:m', entity: () => ProductSellers, mappedBy: 'seller' },
  },
});
",
]
`;

exports[`4898 overlap_fk_example scalarPropertiesForRelations=smart bidirectionalRelations=false identifiedReferences=false entitySchema=false: dump 1`] = `
[
  "import { Entity, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';

@Entity()
export class Countries {

  [PrimaryKeyProp]?: 'code';

  @PrimaryKey({ columnType: 'char(2)' })
  code!: unknown;

}
",
  "import { Entity, ManyToOne, OptionalProps, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Products } from './Products';

@Entity()
export class ProductCountryMap {

  [PrimaryKeyProp]?: ['country', 'product'];

  [OptionalProps]?: 'isCurrentlyAllowed';

  @ManyToOne({ entity: () => Countries, fieldName: 'country', primary: true })
  country!: Countries;

  @ManyToOne({ entity: () => Products, fieldName: 'product_id', primary: true, index: 'fk_product_country_map_products1' })
  product!: Products;

  @Property({ default: false })
  isCurrentlyAllowed: boolean = false;

}
",
  "import { Entity, ManyToOne, OptionalProps, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Products } from './Products';
import { Sellers } from './Sellers';

@Entity()
export class ProductSellers {

  [PrimaryKeyProp]?: ['seller', 'product'];

  [OptionalProps]?: 'isCurrentlyAllowed';

  @ManyToOne({ entity: () => Sellers, fieldName: 'seller_id', updateRule: 'cascade', deleteRule: 'cascade', primary: true })
  seller!: Sellers;

  @ManyToOne({ entity: () => Products, fieldName: 'product_id', updateRule: 'cascade', deleteRule: 'cascade', primary: true, index: 'fk_product_sellers_products1' })
  product!: Products;

  @Property({ default: false })
  isCurrentlyAllowed: boolean = false;

}
",
  "import { Entity, OptionalProps, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';

@Entity()
export class Products {

  [PrimaryKeyProp]?: 'productId';

  [OptionalProps]?: 'currentQuantity';

  @PrimaryKey()
  productId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property({ length: 255 })
  name!: string;

  @Property({ columnType: 'numeric(10,2)' })
  currentPrice!: string;

  @Property({ default: 0 })
  currentQuantity: number = 0;

}
",
  "import { Entity, Index, ManyToOne, OptionalProps, PrimaryKey, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { ProductCountryMap } from './ProductCountryMap';
import { ProductSellers } from './ProductSellers';

@Entity()
@Index({ name: 'product_id_idx', expression: 'create index \`product_id_idx\` on \`sales\` (\`product_id\`)')
export class Sales {

  [PrimaryKeyProp]?: 'saleId';

  [OptionalProps]?: 'quantitySold';

  @PrimaryKey()
  saleId!: number;

  @ManyToOne({ entity: () => ProductCountryMap, fieldNames: ['country', 'product_id'], updateRule: 'cascade', index: 'fk_sales_product_country_map1_idx' })
  country!: ProductCountryMap;

  @ManyToOne({ entity: () => ProductSellers, fieldNames: ['seller_id', 'product_id'], updateRule: 'cascade', index: 'fk_sales_product_sellers1_idx' })
  seller!: ProductSellers;

  @Property({ columnType: 'numeric(10,2)' })
  singularPrice!: string;

  @Property({ default: 1 })
  quantitySold: number = 1;

}
",
  "import { Entity, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';

@Entity()
export class Sellers {

  [PrimaryKeyProp]?: 'sellerId';

  @PrimaryKey()
  sellerId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property({ length: 255 })
  name!: string;

}
",
]
`;

exports[`4898 overlap_fk_example scalarPropertiesForRelations=smart bidirectionalRelations=false identifiedReferences=false entitySchema=true: dump 1`] = `
[
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Countries {
  [PrimaryKeyProp]?: 'code';
  code!: unknown;
}

export const CountriesSchema = new EntitySchema({
  class: Countries,
  properties: {
    code: { primary: true, type: 'unknown', columnType: 'char(2)' },
  },
});
",
  "import { EntitySchema, OptionalProps, PrimaryKeyProp } from '@mikro-orm/core';

export class ProductCountryMap {
  [PrimaryKeyProp]?: ['country', 'product'];
  [OptionalProps]?: 'isCurrentlyAllowed';
  country!: Countries;
  product!: Products;
  isCurrentlyAllowed: boolean = false;
}

export const ProductCountryMapSchema = new EntitySchema({
  class: ProductCountryMap,
  properties: {
    country: { primary: true, kind: 'm:1', entity: () => Countries, fieldName: 'country' },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => Products,
      fieldName: 'product_id',
      index: 'fk_product_country_map_products1',
    },
    isCurrentlyAllowed: { type: 'boolean', default: false },
  },
});
",
  "import { EntitySchema, OptionalProps, PrimaryKeyProp } from '@mikro-orm/core';

export class ProductSellers {
  [PrimaryKeyProp]?: ['seller', 'product'];
  [OptionalProps]?: 'isCurrentlyAllowed';
  seller!: Sellers;
  product!: Products;
  isCurrentlyAllowed: boolean = false;
}

export const ProductSellersSchema = new EntitySchema({
  class: ProductSellers,
  properties: {
    seller: {
      primary: true,
      kind: 'm:1',
      entity: () => Sellers,
      fieldName: 'seller_id',
      updateRule: 'cascade',
      deleteRule: 'cascade',
    },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => Products,
      fieldName: 'product_id',
      updateRule: 'cascade',
      deleteRule: 'cascade',
      index: 'fk_product_sellers_products1',
    },
    isCurrentlyAllowed: { type: 'boolean', default: false },
  },
});
",
  "import { EntitySchema, OptionalProps, PrimaryKeyProp } from '@mikro-orm/core';

export class Products {
  [PrimaryKeyProp]?: 'productId';
  [OptionalProps]?: 'currentQuantity';
  productId!: number;
  name!: string;
  currentPrice!: string;
  currentQuantity: number = 0;
}

export const ProductsSchema = new EntitySchema({
  class: Products,
  properties: {
    productId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255, unique: 'name_UNIQUE' },
    currentPrice: { type: 'string', columnType: 'numeric(10,2)' },
    currentQuantity: { type: 'number', default: 0 },
  },
});
",
  "import { EntitySchema, OptionalProps, PrimaryKeyProp } from '@mikro-orm/core';

export class Sales {
  [PrimaryKeyProp]?: 'saleId';
  [OptionalProps]?: 'quantitySold';
  saleId!: number;
  country!: ProductCountryMap;
  seller!: ProductSellers;
  singularPrice!: string;
  quantitySold: number = 1;
}

export const SalesSchema = new EntitySchema({
  class: Sales,
  indexes: [
    { name: 'product_id_idx', expression: 'create index \`product_id_idx\` on \`sales\` (\`product_id\`)' },
  ],
  uniques: [
  ],
  properties: {
    saleId: { primary: true, type: 'number' },
    country: {
      kind: 'm:1',
      entity: () => ProductCountryMap,
      fieldNames: [
        'country',
        'product_id'
      ],
      updateRule: 'cascade',
      index: 'fk_sales_product_country_map1_idx',
    },
    seller: {
      kind: 'm:1',
      entity: () => ProductSellers,
      fieldNames: [
        'seller_id',
        'product_id'
      ],
      updateRule: 'cascade',
      index: 'fk_sales_product_sellers1_idx',
    },
    singularPrice: { type: 'string', columnType: 'numeric(10,2)' },
    quantitySold: { type: 'number', default: 1 },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Sellers {
  [PrimaryKeyProp]?: 'sellerId';
  sellerId!: number;
  name!: string;
}

export const SellersSchema = new EntitySchema({
  class: Sellers,
  properties: {
    sellerId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255, unique: 'name_UNIQUE' },
  },
});
",
]
`;

exports[`4898 overlap_fk_example scalarPropertiesForRelations=smart bidirectionalRelations=false identifiedReferences=true entitySchema=false: dump 1`] = `
[
  "import { Entity, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';

@Entity()
export class Countries {

  [PrimaryKeyProp]?: 'code';

  @PrimaryKey({ columnType: 'char(2)' })
  code!: unknown;

}
",
  "import { Entity, ManyToOne, OptionalProps, PrimaryKeyProp, Property, Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Products } from './Products';

@Entity()
export class ProductCountryMap {

  [PrimaryKeyProp]?: ['country', 'product'];

  [OptionalProps]?: 'isCurrentlyAllowed';

  @ManyToOne({ entity: () => Countries, ref: true, fieldName: 'country', primary: true })
  country!: Ref<Countries>;

  @ManyToOne({ entity: () => Products, ref: true, fieldName: 'product_id', primary: true, index: 'fk_product_country_map_products1' })
  product!: Ref<Products>;

  @Property({ default: false })
  isCurrentlyAllowed: boolean = false;

}
",
  "import { Entity, ManyToOne, OptionalProps, PrimaryKeyProp, Property, Ref } from '@mikro-orm/core';
import { Products } from './Products';
import { Sellers } from './Sellers';

@Entity()
export class ProductSellers {

  [PrimaryKeyProp]?: ['seller', 'product'];

  [OptionalProps]?: 'isCurrentlyAllowed';

  @ManyToOne({ entity: () => Sellers, ref: true, fieldName: 'seller_id', updateRule: 'cascade', deleteRule: 'cascade', primary: true })
  seller!: Ref<Sellers>;

  @ManyToOne({ entity: () => Products, ref: true, fieldName: 'product_id', updateRule: 'cascade', deleteRule: 'cascade', primary: true, index: 'fk_product_sellers_products1' })
  product!: Ref<Products>;

  @Property({ default: false })
  isCurrentlyAllowed: boolean = false;

}
",
  "import { Entity, OptionalProps, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';

@Entity()
export class Products {

  [PrimaryKeyProp]?: 'productId';

  [OptionalProps]?: 'currentQuantity';

  @PrimaryKey()
  productId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property({ length: 255 })
  name!: string;

  @Property({ columnType: 'numeric(10,2)' })
  currentPrice!: string;

  @Property({ default: 0 })
  currentQuantity: number = 0;

}
",
  "import { Entity, Index, ManyToOne, OptionalProps, PrimaryKey, PrimaryKeyProp, Property, Ref } from '@mikro-orm/core';
import { ProductCountryMap } from './ProductCountryMap';
import { ProductSellers } from './ProductSellers';

@Entity()
@Index({ name: 'product_id_idx', expression: 'create index \`product_id_idx\` on \`sales\` (\`product_id\`)')
export class Sales {

  [PrimaryKeyProp]?: 'saleId';

  [OptionalProps]?: 'quantitySold';

  @PrimaryKey()
  saleId!: number;

  @ManyToOne({ entity: () => ProductCountryMap, ref: true, fieldNames: ['country', 'product_id'], updateRule: 'cascade', index: 'fk_sales_product_country_map1_idx' })
  country!: Ref<ProductCountryMap>;

  @ManyToOne({ entity: () => ProductSellers, ref: true, fieldNames: ['seller_id', 'product_id'], updateRule: 'cascade', index: 'fk_sales_product_sellers1_idx' })
  seller!: Ref<ProductSellers>;

  @Property({ columnType: 'numeric(10,2)' })
  singularPrice!: string;

  @Property({ default: 1 })
  quantitySold: number = 1;

}
",
  "import { Entity, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';

@Entity()
export class Sellers {

  [PrimaryKeyProp]?: 'sellerId';

  @PrimaryKey()
  sellerId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property({ length: 255 })
  name!: string;

}
",
]
`;

exports[`4898 overlap_fk_example scalarPropertiesForRelations=smart bidirectionalRelations=false identifiedReferences=true entitySchema=true: dump 1`] = `
[
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Countries {
  [PrimaryKeyProp]?: 'code';
  code!: unknown;
}

export const CountriesSchema = new EntitySchema({
  class: Countries,
  properties: {
    code: { primary: true, type: 'unknown', columnType: 'char(2)' },
  },
});
",
  "import { EntitySchema, OptionalProps, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Products } from './Products';

export class ProductCountryMap {
  [PrimaryKeyProp]?: ['country', 'product'];
  [OptionalProps]?: 'isCurrentlyAllowed';
  country!: Ref<Countries>;
  product!: Ref<Products>;
  isCurrentlyAllowed: boolean = false;
}

export const ProductCountryMapSchema = new EntitySchema({
  class: ProductCountryMap,
  properties: {
    country: {
      primary: true,
      kind: 'm:1',
      entity: () => Countries,
      ref: true,
      fieldName: 'country',
    },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => Products,
      ref: true,
      fieldName: 'product_id',
      index: 'fk_product_country_map_products1',
    },
    isCurrentlyAllowed: { type: 'boolean', default: false },
  },
});
",
  "import { EntitySchema, OptionalProps, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Products } from './Products';
import { Sellers } from './Sellers';

export class ProductSellers {
  [PrimaryKeyProp]?: ['seller', 'product'];
  [OptionalProps]?: 'isCurrentlyAllowed';
  seller!: Ref<Sellers>;
  product!: Ref<Products>;
  isCurrentlyAllowed: boolean = false;
}

export const ProductSellersSchema = new EntitySchema({
  class: ProductSellers,
  properties: {
    seller: {
      primary: true,
      kind: 'm:1',
      entity: () => Sellers,
      ref: true,
      fieldName: 'seller_id',
      updateRule: 'cascade',
      deleteRule: 'cascade',
    },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => Products,
      ref: true,
      fieldName: 'product_id',
      updateRule: 'cascade',
      deleteRule: 'cascade',
      index: 'fk_product_sellers_products1',
    },
    isCurrentlyAllowed: { type: 'boolean', default: false },
  },
});
",
  "import { EntitySchema, OptionalProps, PrimaryKeyProp } from '@mikro-orm/core';

export class Products {
  [PrimaryKeyProp]?: 'productId';
  [OptionalProps]?: 'currentQuantity';
  productId!: number;
  name!: string;
  currentPrice!: string;
  currentQuantity: number = 0;
}

export const ProductsSchema = new EntitySchema({
  class: Products,
  properties: {
    productId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255, unique: 'name_UNIQUE' },
    currentPrice: { type: 'string', columnType: 'numeric(10,2)' },
    currentQuantity: { type: 'number', default: 0 },
  },
});
",
  "import { EntitySchema, OptionalProps, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { ProductCountryMap } from './ProductCountryMap';
import { ProductSellers } from './ProductSellers';

export class Sales {
  [PrimaryKeyProp]?: 'saleId';
  [OptionalProps]?: 'quantitySold';
  saleId!: number;
  country!: Ref<ProductCountryMap>;
  seller!: Ref<ProductSellers>;
  singularPrice!: string;
  quantitySold: number = 1;
}

export const SalesSchema = new EntitySchema({
  class: Sales,
  indexes: [
    { name: 'product_id_idx', expression: 'create index \`product_id_idx\` on \`sales\` (\`product_id\`)' },
  ],
  uniques: [
  ],
  properties: {
    saleId: { primary: true, type: 'number' },
    country: {
      kind: 'm:1',
      entity: () => ProductCountryMap,
      ref: true,
      fieldNames: [
        'country',
        'product_id'
      ],
      updateRule: 'cascade',
      index: 'fk_sales_product_country_map1_idx',
    },
    seller: {
      kind: 'm:1',
      entity: () => ProductSellers,
      ref: true,
      fieldNames: [
        'seller_id',
        'product_id'
      ],
      updateRule: 'cascade',
      index: 'fk_sales_product_sellers1_idx',
    },
    singularPrice: { type: 'string', columnType: 'numeric(10,2)' },
    quantitySold: { type: 'number', default: 1 },
  },
});
",
  "import { EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';

export class Sellers {
  [PrimaryKeyProp]?: 'sellerId';
  sellerId!: number;
  name!: string;
}

export const SellersSchema = new EntitySchema({
  class: Sellers,
  properties: {
    sellerId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255, unique: 'name_UNIQUE' },
  },
});
",
]
`;

exports[`4898 overlap_fk_example scalarPropertiesForRelations=smart bidirectionalRelations=true identifiedReferences=false entitySchema=false: dump 1`] = `
[
  "import { Collection, Entity, OneToMany, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductCountryMap } from './ProductCountryMap';

@Entity()
export class Countries {

  [PrimaryKeyProp]?: 'code';

  @PrimaryKey({ columnType: 'char(2)' })
  code!: unknown;

  @OneToMany({ entity: () => ProductCountryMap, mappedBy: 'country' })
  countryInverse = new Collection<ProductCountryMap>(this);

}
",
  "import { Collection, Entity, ManyToOne, OneToMany, OptionalProps, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Products } from './Products';
import { Sales } from './Sales';

@Entity()
export class ProductCountryMap {

  [PrimaryKeyProp]?: ['country', 'product'];

  [OptionalProps]?: 'isCurrentlyAllowed';

  @ManyToOne({ entity: () => Countries, fieldName: 'country', primary: true })
  country!: Countries;

  @ManyToOne({ entity: () => Products, fieldName: 'product_id', primary: true, index: 'fk_product_country_map_products1' })
  product!: Products;

  @Property({ default: false })
  isCurrentlyAllowed: boolean = false;

  @OneToMany({ entity: () => Sales, mappedBy: 'country' })
  countryInverse = new Collection<Sales>(this);

}
",
  "import { Collection, Entity, ManyToOne, OneToMany, OptionalProps, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { Products } from './Products';
import { Sales } from './Sales';
import { Sellers } from './Sellers';

@Entity()
export class ProductSellers {

  [PrimaryKeyProp]?: ['seller', 'product'];

  [OptionalProps]?: 'isCurrentlyAllowed';

  @ManyToOne({ entity: () => Sellers, fieldName: 'seller_id', updateRule: 'cascade', deleteRule: 'cascade', primary: true })
  seller!: Sellers;

  @ManyToOne({ entity: () => Products, fieldName: 'product_id', updateRule: 'cascade', deleteRule: 'cascade', primary: true, index: 'fk_product_sellers_products1' })
  product!: Products;

  @Property({ default: false })
  isCurrentlyAllowed: boolean = false;

  @OneToMany({ entity: () => Sales, mappedBy: 'seller' })
  sellerInverse = new Collection<Sales>(this);

}
",
  "import { Collection, Entity, OneToMany, OptionalProps, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { ProductSellers } from './ProductSellers';

@Entity()
export class Products {

  [PrimaryKeyProp]?: 'productId';

  [OptionalProps]?: 'currentQuantity';

  @PrimaryKey()
  productId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property({ length: 255 })
  name!: string;

  @Property({ columnType: 'numeric(10,2)' })
  currentPrice!: string;

  @Property({ default: 0 })
  currentQuantity: number = 0;

  @OneToMany({ entity: () => ProductSellers, mappedBy: 'product' })
  productInverse = new Collection<ProductSellers>(this);

}
",
  "import { Entity, Index, ManyToOne, OptionalProps, PrimaryKey, PrimaryKeyProp, Property } from '@mikro-orm/core';
import { ProductCountryMap } from './ProductCountryMap';
import { ProductSellers } from './ProductSellers';

@Entity()
@Index({ name: 'product_id_idx', expression: 'create index \`product_id_idx\` on \`sales\` (\`product_id\`)')
export class Sales {

  [PrimaryKeyProp]?: 'saleId';

  [OptionalProps]?: 'quantitySold';

  @PrimaryKey()
  saleId!: number;

  @ManyToOne({ entity: () => ProductCountryMap, fieldNames: ['country', 'product_id'], updateRule: 'cascade', index: 'fk_sales_product_country_map1_idx' })
  country!: ProductCountryMap;

  @ManyToOne({ entity: () => ProductSellers, fieldNames: ['seller_id', 'product_id'], updateRule: 'cascade', index: 'fk_sales_product_sellers1_idx' })
  seller!: ProductSellers;

  @Property({ columnType: 'numeric(10,2)' })
  singularPrice!: string;

  @Property({ default: 1 })
  quantitySold: number = 1;

}
",
  "import { Collection, Entity, OneToMany, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { ProductSellers } from './ProductSellers';

@Entity()
export class Sellers {

  [PrimaryKeyProp]?: 'sellerId';

  @PrimaryKey()
  sellerId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property({ length: 255 })
  name!: string;

  @OneToMany({ entity: () => ProductSellers, mappedBy: 'seller' })
  sellerInverse = new Collection<ProductSellers>(this);

}
",
]
`;

exports[`4898 overlap_fk_example scalarPropertiesForRelations=smart bidirectionalRelations=true identifiedReferences=false entitySchema=true: dump 1`] = `
[
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductCountryMap } from './ProductCountryMap';

export class Countries {
  [PrimaryKeyProp]?: 'code';
  code!: unknown;
  countryInverse = new Collection<ProductCountryMap>(this);
}

export const CountriesSchema = new EntitySchema({
  class: Countries,
  properties: {
    code: { primary: true, type: 'unknown', columnType: 'char(2)' },
    countryInverse: { kind: '1:m', entity: () => ProductCountryMap, mappedBy: 'country' },
  },
});
",
  "import { Collection, EntitySchema, OptionalProps, PrimaryKeyProp } from '@mikro-orm/core';
import { Sales } from './Sales';

export class ProductCountryMap {
  [PrimaryKeyProp]?: ['country', 'product'];
  [OptionalProps]?: 'isCurrentlyAllowed';
  country!: Countries;
  product!: Products;
  isCurrentlyAllowed: boolean = false;
  countryInverse = new Collection<Sales>(this);
}

export const ProductCountryMapSchema = new EntitySchema({
  class: ProductCountryMap,
  properties: {
    country: { primary: true, kind: 'm:1', entity: () => Countries, fieldName: 'country' },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => Products,
      fieldName: 'product_id',
      index: 'fk_product_country_map_products1',
    },
    isCurrentlyAllowed: { type: 'boolean', default: false },
    countryInverse: { kind: '1:m', entity: () => Sales, mappedBy: 'country' },
  },
});
",
  "import { Collection, EntitySchema, OptionalProps, PrimaryKeyProp } from '@mikro-orm/core';
import { Sales } from './Sales';

export class ProductSellers {
  [PrimaryKeyProp]?: ['seller', 'product'];
  [OptionalProps]?: 'isCurrentlyAllowed';
  seller!: Sellers;
  product!: Products;
  isCurrentlyAllowed: boolean = false;
  sellerInverse = new Collection<Sales>(this);
}

export const ProductSellersSchema = new EntitySchema({
  class: ProductSellers,
  properties: {
    seller: {
      primary: true,
      kind: 'm:1',
      entity: () => Sellers,
      fieldName: 'seller_id',
      updateRule: 'cascade',
      deleteRule: 'cascade',
    },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => Products,
      fieldName: 'product_id',
      updateRule: 'cascade',
      deleteRule: 'cascade',
      index: 'fk_product_sellers_products1',
    },
    isCurrentlyAllowed: { type: 'boolean', default: false },
    sellerInverse: { kind: '1:m', entity: () => Sales, mappedBy: 'seller' },
  },
});
",
  "import { Collection, EntitySchema, OptionalProps, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductSellers } from './ProductSellers';

export class Products {
  [PrimaryKeyProp]?: 'productId';
  [OptionalProps]?: 'currentQuantity';
  productId!: number;
  name!: string;
  currentPrice!: string;
  currentQuantity: number = 0;
  productInverse = new Collection<ProductSellers>(this);
}

export const ProductsSchema = new EntitySchema({
  class: Products,
  properties: {
    productId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255, unique: 'name_UNIQUE' },
    currentPrice: { type: 'string', columnType: 'numeric(10,2)' },
    currentQuantity: { type: 'number', default: 0 },
    productInverse: { kind: '1:m', entity: () => ProductSellers, mappedBy: 'product' },
  },
});
",
  "import { EntitySchema, OptionalProps, PrimaryKeyProp } from '@mikro-orm/core';

export class Sales {
  [PrimaryKeyProp]?: 'saleId';
  [OptionalProps]?: 'quantitySold';
  saleId!: number;
  country!: ProductCountryMap;
  seller!: ProductSellers;
  singularPrice!: string;
  quantitySold: number = 1;
}

export const SalesSchema = new EntitySchema({
  class: Sales,
  indexes: [
    { name: 'product_id_idx', expression: 'create index \`product_id_idx\` on \`sales\` (\`product_id\`)' },
  ],
  uniques: [
  ],
  properties: {
    saleId: { primary: true, type: 'number' },
    country: {
      kind: 'm:1',
      entity: () => ProductCountryMap,
      fieldNames: [
        'country',
        'product_id'
      ],
      updateRule: 'cascade',
      index: 'fk_sales_product_country_map1_idx',
    },
    seller: {
      kind: 'm:1',
      entity: () => ProductSellers,
      fieldNames: [
        'seller_id',
        'product_id'
      ],
      updateRule: 'cascade',
      index: 'fk_sales_product_sellers1_idx',
    },
    singularPrice: { type: 'string', columnType: 'numeric(10,2)' },
    quantitySold: { type: 'number', default: 1 },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductSellers } from './ProductSellers';

export class Sellers {
  [PrimaryKeyProp]?: 'sellerId';
  sellerId!: number;
  name!: string;
  sellerInverse = new Collection<ProductSellers>(this);
}

export const SellersSchema = new EntitySchema({
  class: Sellers,
  properties: {
    sellerId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255, unique: 'name_UNIQUE' },
    sellerInverse: { kind: '1:m', entity: () => ProductSellers, mappedBy: 'seller' },
  },
});
",
]
`;

exports[`4898 overlap_fk_example scalarPropertiesForRelations=smart bidirectionalRelations=true identifiedReferences=true entitySchema=false: dump 1`] = `
[
  "import { Collection, Entity, OneToMany, PrimaryKey, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductCountryMap } from './ProductCountryMap';

@Entity()
export class Countries {

  [PrimaryKeyProp]?: 'code';

  @PrimaryKey({ columnType: 'char(2)' })
  code!: unknown;

  @OneToMany({ entity: () => ProductCountryMap, mappedBy: 'country' })
  countryInverse = new Collection<ProductCountryMap>(this);

}
",
  "import { Collection, Entity, ManyToOne, OneToMany, OptionalProps, PrimaryKeyProp, Property, Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Products } from './Products';
import { Sales } from './Sales';

@Entity()
export class ProductCountryMap {

  [PrimaryKeyProp]?: ['country', 'product'];

  [OptionalProps]?: 'isCurrentlyAllowed';

  @ManyToOne({ entity: () => Countries, ref: true, fieldName: 'country', primary: true })
  country!: Ref<Countries>;

  @ManyToOne({ entity: () => Products, ref: true, fieldName: 'product_id', primary: true, index: 'fk_product_country_map_products1' })
  product!: Ref<Products>;

  @Property({ default: false })
  isCurrentlyAllowed: boolean = false;

  @OneToMany({ entity: () => Sales, mappedBy: 'country' })
  countryInverse = new Collection<Sales>(this);

}
",
  "import { Collection, Entity, ManyToOne, OneToMany, OptionalProps, PrimaryKeyProp, Property, Ref } from '@mikro-orm/core';
import { Products } from './Products';
import { Sales } from './Sales';
import { Sellers } from './Sellers';

@Entity()
export class ProductSellers {

  [PrimaryKeyProp]?: ['seller', 'product'];

  [OptionalProps]?: 'isCurrentlyAllowed';

  @ManyToOne({ entity: () => Sellers, ref: true, fieldName: 'seller_id', updateRule: 'cascade', deleteRule: 'cascade', primary: true })
  seller!: Ref<Sellers>;

  @ManyToOne({ entity: () => Products, ref: true, fieldName: 'product_id', updateRule: 'cascade', deleteRule: 'cascade', primary: true, index: 'fk_product_sellers_products1' })
  product!: Ref<Products>;

  @Property({ default: false })
  isCurrentlyAllowed: boolean = false;

  @OneToMany({ entity: () => Sales, mappedBy: 'seller' })
  sellerInverse = new Collection<Sales>(this);

}
",
  "import { Collection, Entity, OneToMany, OptionalProps, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { ProductSellers } from './ProductSellers';

@Entity()
export class Products {

  [PrimaryKeyProp]?: 'productId';

  [OptionalProps]?: 'currentQuantity';

  @PrimaryKey()
  productId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property({ length: 255 })
  name!: string;

  @Property({ columnType: 'numeric(10,2)' })
  currentPrice!: string;

  @Property({ default: 0 })
  currentQuantity: number = 0;

  @OneToMany({ entity: () => ProductSellers, mappedBy: 'product' })
  productInverse = new Collection<ProductSellers>(this);

}
",
  "import { Entity, Index, ManyToOne, OptionalProps, PrimaryKey, PrimaryKeyProp, Property, Ref } from '@mikro-orm/core';
import { ProductCountryMap } from './ProductCountryMap';
import { ProductSellers } from './ProductSellers';

@Entity()
@Index({ name: 'product_id_idx', expression: 'create index \`product_id_idx\` on \`sales\` (\`product_id\`)')
export class Sales {

  [PrimaryKeyProp]?: 'saleId';

  [OptionalProps]?: 'quantitySold';

  @PrimaryKey()
  saleId!: number;

  @ManyToOne({ entity: () => ProductCountryMap, ref: true, fieldNames: ['country', 'product_id'], updateRule: 'cascade', index: 'fk_sales_product_country_map1_idx' })
  country!: Ref<ProductCountryMap>;

  @ManyToOne({ entity: () => ProductSellers, ref: true, fieldNames: ['seller_id', 'product_id'], updateRule: 'cascade', index: 'fk_sales_product_sellers1_idx' })
  seller!: Ref<ProductSellers>;

  @Property({ columnType: 'numeric(10,2)' })
  singularPrice!: string;

  @Property({ default: 1 })
  quantitySold: number = 1;

}
",
  "import { Collection, Entity, OneToMany, PrimaryKey, PrimaryKeyProp, Property, Unique } from '@mikro-orm/core';
import { ProductSellers } from './ProductSellers';

@Entity()
export class Sellers {

  [PrimaryKeyProp]?: 'sellerId';

  @PrimaryKey()
  sellerId!: number;

  @Unique({ name: 'name_UNIQUE' })
  @Property({ length: 255 })
  name!: string;

  @OneToMany({ entity: () => ProductSellers, mappedBy: 'seller' })
  sellerInverse = new Collection<ProductSellers>(this);

}
",
]
`;

exports[`4898 overlap_fk_example scalarPropertiesForRelations=smart bidirectionalRelations=true identifiedReferences=true entitySchema=true: dump 1`] = `
[
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductCountryMap } from './ProductCountryMap';

export class Countries {
  [PrimaryKeyProp]?: 'code';
  code!: unknown;
  countryInverse = new Collection<ProductCountryMap>(this);
}

export const CountriesSchema = new EntitySchema({
  class: Countries,
  properties: {
    code: { primary: true, type: 'unknown', columnType: 'char(2)' },
    countryInverse: { kind: '1:m', entity: () => ProductCountryMap, mappedBy: 'country' },
  },
});
",
  "import { Collection, EntitySchema, OptionalProps, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Countries } from './Countries';
import { Products } from './Products';
import { Sales } from './Sales';

export class ProductCountryMap {
  [PrimaryKeyProp]?: ['country', 'product'];
  [OptionalProps]?: 'isCurrentlyAllowed';
  country!: Ref<Countries>;
  product!: Ref<Products>;
  isCurrentlyAllowed: boolean = false;
  countryInverse = new Collection<Sales>(this);
}

export const ProductCountryMapSchema = new EntitySchema({
  class: ProductCountryMap,
  properties: {
    country: {
      primary: true,
      kind: 'm:1',
      entity: () => Countries,
      ref: true,
      fieldName: 'country',
    },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => Products,
      ref: true,
      fieldName: 'product_id',
      index: 'fk_product_country_map_products1',
    },
    isCurrentlyAllowed: { type: 'boolean', default: false },
    countryInverse: { kind: '1:m', entity: () => Sales, mappedBy: 'country' },
  },
});
",
  "import { Collection, EntitySchema, OptionalProps, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { Products } from './Products';
import { Sales } from './Sales';
import { Sellers } from './Sellers';

export class ProductSellers {
  [PrimaryKeyProp]?: ['seller', 'product'];
  [OptionalProps]?: 'isCurrentlyAllowed';
  seller!: Ref<Sellers>;
  product!: Ref<Products>;
  isCurrentlyAllowed: boolean = false;
  sellerInverse = new Collection<Sales>(this);
}

export const ProductSellersSchema = new EntitySchema({
  class: ProductSellers,
  properties: {
    seller: {
      primary: true,
      kind: 'm:1',
      entity: () => Sellers,
      ref: true,
      fieldName: 'seller_id',
      updateRule: 'cascade',
      deleteRule: 'cascade',
    },
    product: {
      primary: true,
      kind: 'm:1',
      entity: () => Products,
      ref: true,
      fieldName: 'product_id',
      updateRule: 'cascade',
      deleteRule: 'cascade',
      index: 'fk_product_sellers_products1',
    },
    isCurrentlyAllowed: { type: 'boolean', default: false },
    sellerInverse: { kind: '1:m', entity: () => Sales, mappedBy: 'seller' },
  },
});
",
  "import { Collection, EntitySchema, OptionalProps, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductSellers } from './ProductSellers';

export class Products {
  [PrimaryKeyProp]?: 'productId';
  [OptionalProps]?: 'currentQuantity';
  productId!: number;
  name!: string;
  currentPrice!: string;
  currentQuantity: number = 0;
  productInverse = new Collection<ProductSellers>(this);
}

export const ProductsSchema = new EntitySchema({
  class: Products,
  properties: {
    productId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255, unique: 'name_UNIQUE' },
    currentPrice: { type: 'string', columnType: 'numeric(10,2)' },
    currentQuantity: { type: 'number', default: 0 },
    productInverse: { kind: '1:m', entity: () => ProductSellers, mappedBy: 'product' },
  },
});
",
  "import { EntitySchema, OptionalProps, PrimaryKeyProp, Ref } from '@mikro-orm/core';
import { ProductCountryMap } from './ProductCountryMap';
import { ProductSellers } from './ProductSellers';

export class Sales {
  [PrimaryKeyProp]?: 'saleId';
  [OptionalProps]?: 'quantitySold';
  saleId!: number;
  country!: Ref<ProductCountryMap>;
  seller!: Ref<ProductSellers>;
  singularPrice!: string;
  quantitySold: number = 1;
}

export const SalesSchema = new EntitySchema({
  class: Sales,
  indexes: [
    { name: 'product_id_idx', expression: 'create index \`product_id_idx\` on \`sales\` (\`product_id\`)' },
  ],
  uniques: [
  ],
  properties: {
    saleId: { primary: true, type: 'number' },
    country: {
      kind: 'm:1',
      entity: () => ProductCountryMap,
      ref: true,
      fieldNames: [
        'country',
        'product_id'
      ],
      updateRule: 'cascade',
      index: 'fk_sales_product_country_map1_idx',
    },
    seller: {
      kind: 'm:1',
      entity: () => ProductSellers,
      ref: true,
      fieldNames: [
        'seller_id',
        'product_id'
      ],
      updateRule: 'cascade',
      index: 'fk_sales_product_sellers1_idx',
    },
    singularPrice: { type: 'string', columnType: 'numeric(10,2)' },
    quantitySold: { type: 'number', default: 1 },
  },
});
",
  "import { Collection, EntitySchema, PrimaryKeyProp } from '@mikro-orm/core';
import { ProductSellers } from './ProductSellers';

export class Sellers {
  [PrimaryKeyProp]?: 'sellerId';
  sellerId!: number;
  name!: string;
  sellerInverse = new Collection<ProductSellers>(this);
}

export const SellersSchema = new EntitySchema({
  class: Sellers,
  properties: {
    sellerId: { primary: true, type: 'number' },
    name: { type: 'string', length: 255, unique: 'name_UNIQUE' },
    sellerInverse: { kind: '1:m', entity: () => ProductSellers, mappedBy: 'seller' },
  },
});
",
]
`;
